
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000041c  00800060  00004bf8  00004c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080047c  0080047c  000050a8  2**0
                  ALLOC
  3 .stab         00003e58  00000000  00000000  000050a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fa3  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000aea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000afe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b153  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ea34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000eb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ee21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f5ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <__vector_13>
      38:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <__vector_14>
      3c:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <main>
      8a:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b4 e0       	ldi	r27, 0x04	; 4
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c1 25 	jmp	0x4b82	; 0x4b82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <VerifyCredentials>:
	char username[USERNAME_SIZE + 1];  // Increased size to accommodate null-terminator
	char password[PASSWORD_SIZE + 1];  // Increased size to accommodate null-terminator
} User;

// Function to verify the entered credentials
int VerifyCredentials(const char* enteredUsername, const char* enteredPassword, const User* user) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
     b62:	5e 83       	std	Y+6, r21	; 0x06
     b64:	4d 83       	std	Y+5, r20	; 0x05
	return (strcmp(enteredUsername, user->username) == 0 &&
     b66:	2d 81       	ldd	r18, Y+5	; 0x05
     b68:	3e 81       	ldd	r19, Y+6	; 0x06
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	b9 01       	movw	r22, r18
     b70:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <strcmp>
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	c1 f4       	brne	.+48     	; 0xba8 <VerifyCredentials+0x62>
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	9c 01       	movw	r18, r24
     b7e:	2f 5e       	subi	r18, 0xEF	; 239
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	b9 01       	movw	r22, r18
     b88:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <strcmp>
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	61 f4       	brne	.+24     	; 0xba8 <VerifyCredentials+0x62>
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <strlen>
     b98:	84 30       	cpi	r24, 0x04	; 4
     b9a:	91 05       	cpc	r25, r1
     b9c:	29 f4       	brne	.+10     	; 0xba8 <VerifyCredentials+0x62>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	98 87       	std	Y+8, r25	; 0x08
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <VerifyCredentials+0x66>
     ba8:	18 86       	std	Y+8, r1	; 0x08
     baa:	1f 82       	std	Y+7, r1	; 0x07
     bac:	8f 81       	ldd	r24, Y+7	; 0x07
     bae:	98 85       	ldd	r25, Y+8	; 0x08
			strcmp(enteredPassword, user->password) == 0 &&
			strlen(enteredPassword) == PASSWORD_SIZE);
}
     bb0:	28 96       	adiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <main>:

int main(void) {
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	c3 5d       	subi	r28, 0xD3	; 211
     bd0:	d1 40       	sbci	r29, 0x01	; 1
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
     bdc:	0e 94 94 17 	call	0x2f28	; 0x2f28 <MDIO_voidInit>
	MUART_voidInit();
     be0:	0e 94 8c 22 	call	0x4518	; 0x4518 <MUART_voidInit>
	MTIMER0_voidInit();
     be4:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <MTIMER0_voidInit>
	MTIMER1_voidInit();
     be8:	0e 94 76 20 	call	0x40ec	; 0x40ec <MTIMER1_voidInit>
	MTIMER0_voidSetOCR0Value(0);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>

	HLCD_voidInit();
     bf2:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <HLCD_voidInit>

	u8 local_u8ReceivedData = 255;
     bf6:	fe 01       	movw	r30, r28
     bf8:	e9 59       	subi	r30, 0x99	; 153
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	80 83       	st	Z, r24
	int attempts = 3;
     c00:	fe 01       	movw	r30, r28
     c02:	eb 59       	subi	r30, 0x9B	; 155
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	91 83       	std	Z+1, r25	; 0x01
     c0c:	80 83       	st	Z, r24
			{"user5", "5555"},
			{"user6", "6666"},
			{"user7", "7777"},
			{"user8", "8888"},
			{"user9", "9999"}
	};
     c0e:	ce 01       	movw	r24, r28
     c10:	88 59       	subi	r24, 0x98	; 152
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	2c ed       	ldi	r18, 0xDC	; 220
     c16:	fc 01       	movw	r30, r24
     c18:	df 01       	movw	r26, r30
     c1a:	32 2f       	mov	r19, r18
     c1c:	1d 92       	st	X+, r1
     c1e:	3a 95       	dec	r19
     c20:	e9 f7       	brne	.-6      	; 0xc1c <main+0x5a>
     c22:	ce 01       	movw	r24, r28
     c24:	88 59       	subi	r24, 0x98	; 152
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	c4 5a       	subi	r28, 0xA4	; 164
     c2a:	de 4f       	sbci	r29, 0xFE	; 254
     c2c:	99 83       	std	Y+1, r25	; 0x01
     c2e:	88 83       	st	Y, r24
     c30:	cc 55       	subi	r28, 0x5C	; 92
     c32:	d1 40       	sbci	r29, 0x01	; 1
     c34:	c4 5a       	subi	r28, 0xA4	; 164
     c36:	de 4f       	sbci	r29, 0xFE	; 254
     c38:	a8 81       	ld	r26, Y
     c3a:	b9 81       	ldd	r27, Y+1	; 0x01
     c3c:	cc 55       	subi	r28, 0x5C	; 92
     c3e:	d1 40       	sbci	r29, 0x01	; 1
     c40:	c2 5a       	subi	r28, 0xA2	; 162
     c42:	de 4f       	sbci	r29, 0xFE	; 254
     c44:	b9 83       	std	Y+1, r27	; 0x01
     c46:	a8 83       	st	Y, r26
     c48:	ce 55       	subi	r28, 0x5E	; 94
     c4a:	d1 40       	sbci	r29, 0x01	; 1
     c4c:	e8 e9       	ldi	r30, 0x98	; 152
     c4e:	f3 e0       	ldi	r31, 0x03	; 3
     c50:	c0 5a       	subi	r28, 0xA0	; 160
     c52:	de 4f       	sbci	r29, 0xFE	; 254
     c54:	f9 83       	std	Y+1, r31	; 0x01
     c56:	e8 83       	st	Y, r30
     c58:	c0 56       	subi	r28, 0x60	; 96
     c5a:	d1 40       	sbci	r29, 0x01	; 1
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	ce 59       	subi	r28, 0x9E	; 158
     c60:	de 4f       	sbci	r29, 0xFE	; 254
     c62:	f8 83       	st	Y, r31
     c64:	c2 56       	subi	r28, 0x62	; 98
     c66:	d1 40       	sbci	r29, 0x01	; 1
     c68:	c0 5a       	subi	r28, 0xA0	; 160
     c6a:	de 4f       	sbci	r29, 0xFE	; 254
     c6c:	a8 81       	ld	r26, Y
     c6e:	b9 81       	ldd	r27, Y+1	; 0x01
     c70:	c0 56       	subi	r28, 0x60	; 96
     c72:	d1 40       	sbci	r29, 0x01	; 1
     c74:	0c 90       	ld	r0, X
     c76:	c0 5a       	subi	r28, 0xA0	; 160
     c78:	de 4f       	sbci	r29, 0xFE	; 254
     c7a:	e8 81       	ld	r30, Y
     c7c:	f9 81       	ldd	r31, Y+1	; 0x01
     c7e:	c0 56       	subi	r28, 0x60	; 96
     c80:	d1 40       	sbci	r29, 0x01	; 1
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	c0 5a       	subi	r28, 0xA0	; 160
     c86:	de 4f       	sbci	r29, 0xFE	; 254
     c88:	f9 83       	std	Y+1, r31	; 0x01
     c8a:	e8 83       	st	Y, r30
     c8c:	c0 56       	subi	r28, 0x60	; 96
     c8e:	d1 40       	sbci	r29, 0x01	; 1
     c90:	c2 5a       	subi	r28, 0xA2	; 162
     c92:	de 4f       	sbci	r29, 0xFE	; 254
     c94:	a8 81       	ld	r26, Y
     c96:	b9 81       	ldd	r27, Y+1	; 0x01
     c98:	ce 55       	subi	r28, 0x5E	; 94
     c9a:	d1 40       	sbci	r29, 0x01	; 1
     c9c:	0c 92       	st	X, r0
     c9e:	c2 5a       	subi	r28, 0xA2	; 162
     ca0:	de 4f       	sbci	r29, 0xFE	; 254
     ca2:	e8 81       	ld	r30, Y
     ca4:	f9 81       	ldd	r31, Y+1	; 0x01
     ca6:	ce 55       	subi	r28, 0x5E	; 94
     ca8:	d1 40       	sbci	r29, 0x01	; 1
     caa:	31 96       	adiw	r30, 0x01	; 1
     cac:	c2 5a       	subi	r28, 0xA2	; 162
     cae:	de 4f       	sbci	r29, 0xFE	; 254
     cb0:	f9 83       	std	Y+1, r31	; 0x01
     cb2:	e8 83       	st	Y, r30
     cb4:	ce 55       	subi	r28, 0x5E	; 94
     cb6:	d1 40       	sbci	r29, 0x01	; 1
     cb8:	ce 59       	subi	r28, 0x9E	; 158
     cba:	de 4f       	sbci	r29, 0xFE	; 254
     cbc:	f8 81       	ld	r31, Y
     cbe:	c2 56       	subi	r28, 0x62	; 98
     cc0:	d1 40       	sbci	r29, 0x01	; 1
     cc2:	f1 50       	subi	r31, 0x01	; 1
     cc4:	ce 59       	subi	r28, 0x9E	; 158
     cc6:	de 4f       	sbci	r29, 0xFE	; 254
     cc8:	f8 83       	st	Y, r31
     cca:	c2 56       	subi	r28, 0x62	; 98
     ccc:	d1 40       	sbci	r29, 0x01	; 1
     cce:	ce 59       	subi	r28, 0x9E	; 158
     cd0:	de 4f       	sbci	r29, 0xFE	; 254
     cd2:	28 81       	ld	r18, Y
     cd4:	c2 56       	subi	r28, 0x62	; 98
     cd6:	d1 40       	sbci	r29, 0x01	; 1
     cd8:	22 23       	and	r18, r18
     cda:	31 f6       	brne	.-116    	; 0xc68 <main+0xa6>
     cdc:	8b e0       	ldi	r24, 0x0B	; 11
     cde:	c4 5a       	subi	r28, 0xA4	; 164
     ce0:	de 4f       	sbci	r29, 0xFE	; 254
     ce2:	e8 81       	ld	r30, Y
     ce4:	f9 81       	ldd	r31, Y+1	; 0x01
     ce6:	cc 55       	subi	r28, 0x5C	; 92
     ce8:	d1 40       	sbci	r29, 0x01	; 1
     cea:	36 96       	adiw	r30, 0x06	; 6
     cec:	df 01       	movw	r26, r30
     cee:	28 2f       	mov	r18, r24
     cf0:	1d 92       	st	X+, r1
     cf2:	2a 95       	dec	r18
     cf4:	e9 f7       	brne	.-6      	; 0xcf0 <main+0x12e>
     cf6:	ce 01       	movw	r24, r28
     cf8:	88 59       	subi	r24, 0x98	; 152
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	dc 01       	movw	r26, r24
     cfe:	51 96       	adiw	r26, 0x11	; 17
     d00:	cd 59       	subi	r28, 0x9D	; 157
     d02:	de 4f       	sbci	r29, 0xFE	; 254
     d04:	b9 83       	std	Y+1, r27	; 0x01
     d06:	a8 83       	st	Y, r26
     d08:	c3 56       	subi	r28, 0x63	; 99
     d0a:	d1 40       	sbci	r29, 0x01	; 1
     d0c:	e9 ea       	ldi	r30, 0xA9	; 169
     d0e:	f3 e0       	ldi	r31, 0x03	; 3
     d10:	cb 59       	subi	r28, 0x9B	; 155
     d12:	de 4f       	sbci	r29, 0xFE	; 254
     d14:	f9 83       	std	Y+1, r31	; 0x01
     d16:	e8 83       	st	Y, r30
     d18:	c5 56       	subi	r28, 0x65	; 101
     d1a:	d1 40       	sbci	r29, 0x01	; 1
     d1c:	f5 e0       	ldi	r31, 0x05	; 5
     d1e:	c9 59       	subi	r28, 0x99	; 153
     d20:	de 4f       	sbci	r29, 0xFE	; 254
     d22:	f8 83       	st	Y, r31
     d24:	c7 56       	subi	r28, 0x67	; 103
     d26:	d1 40       	sbci	r29, 0x01	; 1
     d28:	cb 59       	subi	r28, 0x9B	; 155
     d2a:	de 4f       	sbci	r29, 0xFE	; 254
     d2c:	a8 81       	ld	r26, Y
     d2e:	b9 81       	ldd	r27, Y+1	; 0x01
     d30:	c5 56       	subi	r28, 0x65	; 101
     d32:	d1 40       	sbci	r29, 0x01	; 1
     d34:	0c 90       	ld	r0, X
     d36:	cb 59       	subi	r28, 0x9B	; 155
     d38:	de 4f       	sbci	r29, 0xFE	; 254
     d3a:	e8 81       	ld	r30, Y
     d3c:	f9 81       	ldd	r31, Y+1	; 0x01
     d3e:	c5 56       	subi	r28, 0x65	; 101
     d40:	d1 40       	sbci	r29, 0x01	; 1
     d42:	31 96       	adiw	r30, 0x01	; 1
     d44:	cb 59       	subi	r28, 0x9B	; 155
     d46:	de 4f       	sbci	r29, 0xFE	; 254
     d48:	f9 83       	std	Y+1, r31	; 0x01
     d4a:	e8 83       	st	Y, r30
     d4c:	c5 56       	subi	r28, 0x65	; 101
     d4e:	d1 40       	sbci	r29, 0x01	; 1
     d50:	cd 59       	subi	r28, 0x9D	; 157
     d52:	de 4f       	sbci	r29, 0xFE	; 254
     d54:	a8 81       	ld	r26, Y
     d56:	b9 81       	ldd	r27, Y+1	; 0x01
     d58:	c3 56       	subi	r28, 0x63	; 99
     d5a:	d1 40       	sbci	r29, 0x01	; 1
     d5c:	0c 92       	st	X, r0
     d5e:	cd 59       	subi	r28, 0x9D	; 157
     d60:	de 4f       	sbci	r29, 0xFE	; 254
     d62:	e8 81       	ld	r30, Y
     d64:	f9 81       	ldd	r31, Y+1	; 0x01
     d66:	c3 56       	subi	r28, 0x63	; 99
     d68:	d1 40       	sbci	r29, 0x01	; 1
     d6a:	31 96       	adiw	r30, 0x01	; 1
     d6c:	cd 59       	subi	r28, 0x9D	; 157
     d6e:	de 4f       	sbci	r29, 0xFE	; 254
     d70:	f9 83       	std	Y+1, r31	; 0x01
     d72:	e8 83       	st	Y, r30
     d74:	c3 56       	subi	r28, 0x63	; 99
     d76:	d1 40       	sbci	r29, 0x01	; 1
     d78:	c9 59       	subi	r28, 0x99	; 153
     d7a:	de 4f       	sbci	r29, 0xFE	; 254
     d7c:	f8 81       	ld	r31, Y
     d7e:	c7 56       	subi	r28, 0x67	; 103
     d80:	d1 40       	sbci	r29, 0x01	; 1
     d82:	f1 50       	subi	r31, 0x01	; 1
     d84:	c9 59       	subi	r28, 0x99	; 153
     d86:	de 4f       	sbci	r29, 0xFE	; 254
     d88:	f8 83       	st	Y, r31
     d8a:	c7 56       	subi	r28, 0x67	; 103
     d8c:	d1 40       	sbci	r29, 0x01	; 1
     d8e:	c9 59       	subi	r28, 0x99	; 153
     d90:	de 4f       	sbci	r29, 0xFE	; 254
     d92:	28 81       	ld	r18, Y
     d94:	c7 56       	subi	r28, 0x67	; 103
     d96:	d1 40       	sbci	r29, 0x01	; 1
     d98:	22 23       	and	r18, r18
     d9a:	31 f6       	brne	.-116    	; 0xd28 <main+0x166>
     d9c:	ce 01       	movw	r24, r28
     d9e:	88 59       	subi	r24, 0x98	; 152
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	c8 59       	subi	r28, 0x98	; 152
     da4:	de 4f       	sbci	r29, 0xFE	; 254
     da6:	99 83       	std	Y+1, r25	; 0x01
     da8:	88 83       	st	Y, r24
     daa:	c8 56       	subi	r28, 0x68	; 104
     dac:	d1 40       	sbci	r29, 0x01	; 1
     dae:	c8 59       	subi	r28, 0x98	; 152
     db0:	de 4f       	sbci	r29, 0xFE	; 254
     db2:	a8 81       	ld	r26, Y
     db4:	b9 81       	ldd	r27, Y+1	; 0x01
     db6:	c8 56       	subi	r28, 0x68	; 104
     db8:	d1 40       	sbci	r29, 0x01	; 1
     dba:	56 96       	adiw	r26, 0x16	; 22
     dbc:	c6 59       	subi	r28, 0x96	; 150
     dbe:	de 4f       	sbci	r29, 0xFE	; 254
     dc0:	b9 83       	std	Y+1, r27	; 0x01
     dc2:	a8 83       	st	Y, r26
     dc4:	ca 56       	subi	r28, 0x6A	; 106
     dc6:	d1 40       	sbci	r29, 0x01	; 1
     dc8:	ee ea       	ldi	r30, 0xAE	; 174
     dca:	f3 e0       	ldi	r31, 0x03	; 3
     dcc:	c4 59       	subi	r28, 0x94	; 148
     dce:	de 4f       	sbci	r29, 0xFE	; 254
     dd0:	f9 83       	std	Y+1, r31	; 0x01
     dd2:	e8 83       	st	Y, r30
     dd4:	cc 56       	subi	r28, 0x6C	; 108
     dd6:	d1 40       	sbci	r29, 0x01	; 1
     dd8:	f6 e0       	ldi	r31, 0x06	; 6
     dda:	c2 59       	subi	r28, 0x92	; 146
     ddc:	de 4f       	sbci	r29, 0xFE	; 254
     dde:	f8 83       	st	Y, r31
     de0:	ce 56       	subi	r28, 0x6E	; 110
     de2:	d1 40       	sbci	r29, 0x01	; 1
     de4:	c4 59       	subi	r28, 0x94	; 148
     de6:	de 4f       	sbci	r29, 0xFE	; 254
     de8:	a8 81       	ld	r26, Y
     dea:	b9 81       	ldd	r27, Y+1	; 0x01
     dec:	cc 56       	subi	r28, 0x6C	; 108
     dee:	d1 40       	sbci	r29, 0x01	; 1
     df0:	0c 90       	ld	r0, X
     df2:	c4 59       	subi	r28, 0x94	; 148
     df4:	de 4f       	sbci	r29, 0xFE	; 254
     df6:	e8 81       	ld	r30, Y
     df8:	f9 81       	ldd	r31, Y+1	; 0x01
     dfa:	cc 56       	subi	r28, 0x6C	; 108
     dfc:	d1 40       	sbci	r29, 0x01	; 1
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	c4 59       	subi	r28, 0x94	; 148
     e02:	de 4f       	sbci	r29, 0xFE	; 254
     e04:	f9 83       	std	Y+1, r31	; 0x01
     e06:	e8 83       	st	Y, r30
     e08:	cc 56       	subi	r28, 0x6C	; 108
     e0a:	d1 40       	sbci	r29, 0x01	; 1
     e0c:	c6 59       	subi	r28, 0x96	; 150
     e0e:	de 4f       	sbci	r29, 0xFE	; 254
     e10:	a8 81       	ld	r26, Y
     e12:	b9 81       	ldd	r27, Y+1	; 0x01
     e14:	ca 56       	subi	r28, 0x6A	; 106
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	0c 92       	st	X, r0
     e1a:	c6 59       	subi	r28, 0x96	; 150
     e1c:	de 4f       	sbci	r29, 0xFE	; 254
     e1e:	e8 81       	ld	r30, Y
     e20:	f9 81       	ldd	r31, Y+1	; 0x01
     e22:	ca 56       	subi	r28, 0x6A	; 106
     e24:	d1 40       	sbci	r29, 0x01	; 1
     e26:	31 96       	adiw	r30, 0x01	; 1
     e28:	c6 59       	subi	r28, 0x96	; 150
     e2a:	de 4f       	sbci	r29, 0xFE	; 254
     e2c:	f9 83       	std	Y+1, r31	; 0x01
     e2e:	e8 83       	st	Y, r30
     e30:	ca 56       	subi	r28, 0x6A	; 106
     e32:	d1 40       	sbci	r29, 0x01	; 1
     e34:	c2 59       	subi	r28, 0x92	; 146
     e36:	de 4f       	sbci	r29, 0xFE	; 254
     e38:	f8 81       	ld	r31, Y
     e3a:	ce 56       	subi	r28, 0x6E	; 110
     e3c:	d1 40       	sbci	r29, 0x01	; 1
     e3e:	f1 50       	subi	r31, 0x01	; 1
     e40:	c2 59       	subi	r28, 0x92	; 146
     e42:	de 4f       	sbci	r29, 0xFE	; 254
     e44:	f8 83       	st	Y, r31
     e46:	ce 56       	subi	r28, 0x6E	; 110
     e48:	d1 40       	sbci	r29, 0x01	; 1
     e4a:	c2 59       	subi	r28, 0x92	; 146
     e4c:	de 4f       	sbci	r29, 0xFE	; 254
     e4e:	28 81       	ld	r18, Y
     e50:	ce 56       	subi	r28, 0x6E	; 110
     e52:	d1 40       	sbci	r29, 0x01	; 1
     e54:	22 23       	and	r18, r18
     e56:	31 f6       	brne	.-116    	; 0xde4 <main+0x222>
     e58:	8b e0       	ldi	r24, 0x0B	; 11
     e5a:	c8 59       	subi	r28, 0x98	; 152
     e5c:	de 4f       	sbci	r29, 0xFE	; 254
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	c8 56       	subi	r28, 0x68	; 104
     e64:	d1 40       	sbci	r29, 0x01	; 1
     e66:	7c 96       	adiw	r30, 0x1c	; 28
     e68:	df 01       	movw	r26, r30
     e6a:	28 2f       	mov	r18, r24
     e6c:	1d 92       	st	X+, r1
     e6e:	2a 95       	dec	r18
     e70:	e9 f7       	brne	.-6      	; 0xe6c <main+0x2aa>
     e72:	ce 01       	movw	r24, r28
     e74:	88 59       	subi	r24, 0x98	; 152
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	dc 01       	movw	r26, r24
     e7a:	97 96       	adiw	r26, 0x27	; 39
     e7c:	c1 59       	subi	r28, 0x91	; 145
     e7e:	de 4f       	sbci	r29, 0xFE	; 254
     e80:	b9 83       	std	Y+1, r27	; 0x01
     e82:	a8 83       	st	Y, r26
     e84:	cf 56       	subi	r28, 0x6F	; 111
     e86:	d1 40       	sbci	r29, 0x01	; 1
     e88:	ef eb       	ldi	r30, 0xBF	; 191
     e8a:	f3 e0       	ldi	r31, 0x03	; 3
     e8c:	cf 58       	subi	r28, 0x8F	; 143
     e8e:	de 4f       	sbci	r29, 0xFE	; 254
     e90:	f9 83       	std	Y+1, r31	; 0x01
     e92:	e8 83       	st	Y, r30
     e94:	c1 57       	subi	r28, 0x71	; 113
     e96:	d1 40       	sbci	r29, 0x01	; 1
     e98:	f5 e0       	ldi	r31, 0x05	; 5
     e9a:	cd 58       	subi	r28, 0x8D	; 141
     e9c:	de 4f       	sbci	r29, 0xFE	; 254
     e9e:	f8 83       	st	Y, r31
     ea0:	c3 57       	subi	r28, 0x73	; 115
     ea2:	d1 40       	sbci	r29, 0x01	; 1
     ea4:	cf 58       	subi	r28, 0x8F	; 143
     ea6:	de 4f       	sbci	r29, 0xFE	; 254
     ea8:	a8 81       	ld	r26, Y
     eaa:	b9 81       	ldd	r27, Y+1	; 0x01
     eac:	c1 57       	subi	r28, 0x71	; 113
     eae:	d1 40       	sbci	r29, 0x01	; 1
     eb0:	0c 90       	ld	r0, X
     eb2:	cf 58       	subi	r28, 0x8F	; 143
     eb4:	de 4f       	sbci	r29, 0xFE	; 254
     eb6:	e8 81       	ld	r30, Y
     eb8:	f9 81       	ldd	r31, Y+1	; 0x01
     eba:	c1 57       	subi	r28, 0x71	; 113
     ebc:	d1 40       	sbci	r29, 0x01	; 1
     ebe:	31 96       	adiw	r30, 0x01	; 1
     ec0:	cf 58       	subi	r28, 0x8F	; 143
     ec2:	de 4f       	sbci	r29, 0xFE	; 254
     ec4:	f9 83       	std	Y+1, r31	; 0x01
     ec6:	e8 83       	st	Y, r30
     ec8:	c1 57       	subi	r28, 0x71	; 113
     eca:	d1 40       	sbci	r29, 0x01	; 1
     ecc:	c1 59       	subi	r28, 0x91	; 145
     ece:	de 4f       	sbci	r29, 0xFE	; 254
     ed0:	a8 81       	ld	r26, Y
     ed2:	b9 81       	ldd	r27, Y+1	; 0x01
     ed4:	cf 56       	subi	r28, 0x6F	; 111
     ed6:	d1 40       	sbci	r29, 0x01	; 1
     ed8:	0c 92       	st	X, r0
     eda:	c1 59       	subi	r28, 0x91	; 145
     edc:	de 4f       	sbci	r29, 0xFE	; 254
     ede:	e8 81       	ld	r30, Y
     ee0:	f9 81       	ldd	r31, Y+1	; 0x01
     ee2:	cf 56       	subi	r28, 0x6F	; 111
     ee4:	d1 40       	sbci	r29, 0x01	; 1
     ee6:	31 96       	adiw	r30, 0x01	; 1
     ee8:	c1 59       	subi	r28, 0x91	; 145
     eea:	de 4f       	sbci	r29, 0xFE	; 254
     eec:	f9 83       	std	Y+1, r31	; 0x01
     eee:	e8 83       	st	Y, r30
     ef0:	cf 56       	subi	r28, 0x6F	; 111
     ef2:	d1 40       	sbci	r29, 0x01	; 1
     ef4:	cd 58       	subi	r28, 0x8D	; 141
     ef6:	de 4f       	sbci	r29, 0xFE	; 254
     ef8:	f8 81       	ld	r31, Y
     efa:	c3 57       	subi	r28, 0x73	; 115
     efc:	d1 40       	sbci	r29, 0x01	; 1
     efe:	f1 50       	subi	r31, 0x01	; 1
     f00:	cd 58       	subi	r28, 0x8D	; 141
     f02:	de 4f       	sbci	r29, 0xFE	; 254
     f04:	f8 83       	st	Y, r31
     f06:	c3 57       	subi	r28, 0x73	; 115
     f08:	d1 40       	sbci	r29, 0x01	; 1
     f0a:	cd 58       	subi	r28, 0x8D	; 141
     f0c:	de 4f       	sbci	r29, 0xFE	; 254
     f0e:	28 81       	ld	r18, Y
     f10:	c3 57       	subi	r28, 0x73	; 115
     f12:	d1 40       	sbci	r29, 0x01	; 1
     f14:	22 23       	and	r18, r18
     f16:	31 f6       	brne	.-116    	; 0xea4 <main+0x2e2>
     f18:	ce 01       	movw	r24, r28
     f1a:	88 59       	subi	r24, 0x98	; 152
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	cc 58       	subi	r28, 0x8C	; 140
     f20:	de 4f       	sbci	r29, 0xFE	; 254
     f22:	99 83       	std	Y+1, r25	; 0x01
     f24:	88 83       	st	Y, r24
     f26:	c4 57       	subi	r28, 0x74	; 116
     f28:	d1 40       	sbci	r29, 0x01	; 1
     f2a:	cc 58       	subi	r28, 0x8C	; 140
     f2c:	de 4f       	sbci	r29, 0xFE	; 254
     f2e:	a8 81       	ld	r26, Y
     f30:	b9 81       	ldd	r27, Y+1	; 0x01
     f32:	c4 57       	subi	r28, 0x74	; 116
     f34:	d1 40       	sbci	r29, 0x01	; 1
     f36:	9c 96       	adiw	r26, 0x2c	; 44
     f38:	ca 58       	subi	r28, 0x8A	; 138
     f3a:	de 4f       	sbci	r29, 0xFE	; 254
     f3c:	b9 83       	std	Y+1, r27	; 0x01
     f3e:	a8 83       	st	Y, r26
     f40:	c6 57       	subi	r28, 0x76	; 118
     f42:	d1 40       	sbci	r29, 0x01	; 1
     f44:	e4 ec       	ldi	r30, 0xC4	; 196
     f46:	f3 e0       	ldi	r31, 0x03	; 3
     f48:	c8 58       	subi	r28, 0x88	; 136
     f4a:	de 4f       	sbci	r29, 0xFE	; 254
     f4c:	f9 83       	std	Y+1, r31	; 0x01
     f4e:	e8 83       	st	Y, r30
     f50:	c8 57       	subi	r28, 0x78	; 120
     f52:	d1 40       	sbci	r29, 0x01	; 1
     f54:	f6 e0       	ldi	r31, 0x06	; 6
     f56:	c6 58       	subi	r28, 0x86	; 134
     f58:	de 4f       	sbci	r29, 0xFE	; 254
     f5a:	f8 83       	st	Y, r31
     f5c:	ca 57       	subi	r28, 0x7A	; 122
     f5e:	d1 40       	sbci	r29, 0x01	; 1
     f60:	c8 58       	subi	r28, 0x88	; 136
     f62:	de 4f       	sbci	r29, 0xFE	; 254
     f64:	a8 81       	ld	r26, Y
     f66:	b9 81       	ldd	r27, Y+1	; 0x01
     f68:	c8 57       	subi	r28, 0x78	; 120
     f6a:	d1 40       	sbci	r29, 0x01	; 1
     f6c:	0c 90       	ld	r0, X
     f6e:	c8 58       	subi	r28, 0x88	; 136
     f70:	de 4f       	sbci	r29, 0xFE	; 254
     f72:	e8 81       	ld	r30, Y
     f74:	f9 81       	ldd	r31, Y+1	; 0x01
     f76:	c8 57       	subi	r28, 0x78	; 120
     f78:	d1 40       	sbci	r29, 0x01	; 1
     f7a:	31 96       	adiw	r30, 0x01	; 1
     f7c:	c8 58       	subi	r28, 0x88	; 136
     f7e:	de 4f       	sbci	r29, 0xFE	; 254
     f80:	f9 83       	std	Y+1, r31	; 0x01
     f82:	e8 83       	st	Y, r30
     f84:	c8 57       	subi	r28, 0x78	; 120
     f86:	d1 40       	sbci	r29, 0x01	; 1
     f88:	ca 58       	subi	r28, 0x8A	; 138
     f8a:	de 4f       	sbci	r29, 0xFE	; 254
     f8c:	a8 81       	ld	r26, Y
     f8e:	b9 81       	ldd	r27, Y+1	; 0x01
     f90:	c6 57       	subi	r28, 0x76	; 118
     f92:	d1 40       	sbci	r29, 0x01	; 1
     f94:	0c 92       	st	X, r0
     f96:	ca 58       	subi	r28, 0x8A	; 138
     f98:	de 4f       	sbci	r29, 0xFE	; 254
     f9a:	e8 81       	ld	r30, Y
     f9c:	f9 81       	ldd	r31, Y+1	; 0x01
     f9e:	c6 57       	subi	r28, 0x76	; 118
     fa0:	d1 40       	sbci	r29, 0x01	; 1
     fa2:	31 96       	adiw	r30, 0x01	; 1
     fa4:	ca 58       	subi	r28, 0x8A	; 138
     fa6:	de 4f       	sbci	r29, 0xFE	; 254
     fa8:	f9 83       	std	Y+1, r31	; 0x01
     faa:	e8 83       	st	Y, r30
     fac:	c6 57       	subi	r28, 0x76	; 118
     fae:	d1 40       	sbci	r29, 0x01	; 1
     fb0:	c6 58       	subi	r28, 0x86	; 134
     fb2:	de 4f       	sbci	r29, 0xFE	; 254
     fb4:	f8 81       	ld	r31, Y
     fb6:	ca 57       	subi	r28, 0x7A	; 122
     fb8:	d1 40       	sbci	r29, 0x01	; 1
     fba:	f1 50       	subi	r31, 0x01	; 1
     fbc:	c6 58       	subi	r28, 0x86	; 134
     fbe:	de 4f       	sbci	r29, 0xFE	; 254
     fc0:	f8 83       	st	Y, r31
     fc2:	ca 57       	subi	r28, 0x7A	; 122
     fc4:	d1 40       	sbci	r29, 0x01	; 1
     fc6:	c6 58       	subi	r28, 0x86	; 134
     fc8:	de 4f       	sbci	r29, 0xFE	; 254
     fca:	28 81       	ld	r18, Y
     fcc:	ca 57       	subi	r28, 0x7A	; 122
     fce:	d1 40       	sbci	r29, 0x01	; 1
     fd0:	22 23       	and	r18, r18
     fd2:	31 f6       	brne	.-116    	; 0xf60 <main+0x39e>
     fd4:	8b e0       	ldi	r24, 0x0B	; 11
     fd6:	cc 58       	subi	r28, 0x8C	; 140
     fd8:	de 4f       	sbci	r29, 0xFE	; 254
     fda:	e8 81       	ld	r30, Y
     fdc:	f9 81       	ldd	r31, Y+1	; 0x01
     fde:	c4 57       	subi	r28, 0x74	; 116
     fe0:	d1 40       	sbci	r29, 0x01	; 1
     fe2:	f2 96       	adiw	r30, 0x32	; 50
     fe4:	df 01       	movw	r26, r30
     fe6:	28 2f       	mov	r18, r24
     fe8:	1d 92       	st	X+, r1
     fea:	2a 95       	dec	r18
     fec:	e9 f7       	brne	.-6      	; 0xfe8 <main+0x426>
     fee:	ce 01       	movw	r24, r28
     ff0:	88 59       	subi	r24, 0x98	; 152
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	dc 01       	movw	r26, r24
     ff6:	dd 96       	adiw	r26, 0x3d	; 61
     ff8:	c5 58       	subi	r28, 0x85	; 133
     ffa:	de 4f       	sbci	r29, 0xFE	; 254
     ffc:	b9 83       	std	Y+1, r27	; 0x01
     ffe:	a8 83       	st	Y, r26
    1000:	cb 57       	subi	r28, 0x7B	; 123
    1002:	d1 40       	sbci	r29, 0x01	; 1
    1004:	e5 ed       	ldi	r30, 0xD5	; 213
    1006:	f3 e0       	ldi	r31, 0x03	; 3
    1008:	c3 58       	subi	r28, 0x83	; 131
    100a:	de 4f       	sbci	r29, 0xFE	; 254
    100c:	f9 83       	std	Y+1, r31	; 0x01
    100e:	e8 83       	st	Y, r30
    1010:	cd 57       	subi	r28, 0x7D	; 125
    1012:	d1 40       	sbci	r29, 0x01	; 1
    1014:	f5 e0       	ldi	r31, 0x05	; 5
    1016:	c1 58       	subi	r28, 0x81	; 129
    1018:	de 4f       	sbci	r29, 0xFE	; 254
    101a:	f8 83       	st	Y, r31
    101c:	cf 57       	subi	r28, 0x7F	; 127
    101e:	d1 40       	sbci	r29, 0x01	; 1
    1020:	c3 58       	subi	r28, 0x83	; 131
    1022:	de 4f       	sbci	r29, 0xFE	; 254
    1024:	a8 81       	ld	r26, Y
    1026:	b9 81       	ldd	r27, Y+1	; 0x01
    1028:	cd 57       	subi	r28, 0x7D	; 125
    102a:	d1 40       	sbci	r29, 0x01	; 1
    102c:	0c 90       	ld	r0, X
    102e:	c3 58       	subi	r28, 0x83	; 131
    1030:	de 4f       	sbci	r29, 0xFE	; 254
    1032:	e8 81       	ld	r30, Y
    1034:	f9 81       	ldd	r31, Y+1	; 0x01
    1036:	cd 57       	subi	r28, 0x7D	; 125
    1038:	d1 40       	sbci	r29, 0x01	; 1
    103a:	31 96       	adiw	r30, 0x01	; 1
    103c:	c3 58       	subi	r28, 0x83	; 131
    103e:	de 4f       	sbci	r29, 0xFE	; 254
    1040:	f9 83       	std	Y+1, r31	; 0x01
    1042:	e8 83       	st	Y, r30
    1044:	cd 57       	subi	r28, 0x7D	; 125
    1046:	d1 40       	sbci	r29, 0x01	; 1
    1048:	c5 58       	subi	r28, 0x85	; 133
    104a:	de 4f       	sbci	r29, 0xFE	; 254
    104c:	a8 81       	ld	r26, Y
    104e:	b9 81       	ldd	r27, Y+1	; 0x01
    1050:	cb 57       	subi	r28, 0x7B	; 123
    1052:	d1 40       	sbci	r29, 0x01	; 1
    1054:	0c 92       	st	X, r0
    1056:	c5 58       	subi	r28, 0x85	; 133
    1058:	de 4f       	sbci	r29, 0xFE	; 254
    105a:	e8 81       	ld	r30, Y
    105c:	f9 81       	ldd	r31, Y+1	; 0x01
    105e:	cb 57       	subi	r28, 0x7B	; 123
    1060:	d1 40       	sbci	r29, 0x01	; 1
    1062:	31 96       	adiw	r30, 0x01	; 1
    1064:	c5 58       	subi	r28, 0x85	; 133
    1066:	de 4f       	sbci	r29, 0xFE	; 254
    1068:	f9 83       	std	Y+1, r31	; 0x01
    106a:	e8 83       	st	Y, r30
    106c:	cb 57       	subi	r28, 0x7B	; 123
    106e:	d1 40       	sbci	r29, 0x01	; 1
    1070:	c1 58       	subi	r28, 0x81	; 129
    1072:	de 4f       	sbci	r29, 0xFE	; 254
    1074:	f8 81       	ld	r31, Y
    1076:	cf 57       	subi	r28, 0x7F	; 127
    1078:	d1 40       	sbci	r29, 0x01	; 1
    107a:	f1 50       	subi	r31, 0x01	; 1
    107c:	c1 58       	subi	r28, 0x81	; 129
    107e:	de 4f       	sbci	r29, 0xFE	; 254
    1080:	f8 83       	st	Y, r31
    1082:	cf 57       	subi	r28, 0x7F	; 127
    1084:	d1 40       	sbci	r29, 0x01	; 1
    1086:	c1 58       	subi	r28, 0x81	; 129
    1088:	de 4f       	sbci	r29, 0xFE	; 254
    108a:	28 81       	ld	r18, Y
    108c:	cf 57       	subi	r28, 0x7F	; 127
    108e:	d1 40       	sbci	r29, 0x01	; 1
    1090:	22 23       	and	r18, r18
    1092:	31 f6       	brne	.-116    	; 0x1020 <main+0x45e>
    1094:	ce 01       	movw	r24, r28
    1096:	88 59       	subi	r24, 0x98	; 152
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	dc 01       	movw	r26, r24
    109c:	ae 5b       	subi	r26, 0xBE	; 190
    109e:	bf 4f       	sbci	r27, 0xFF	; 255
    10a0:	c0 58       	subi	r28, 0x80	; 128
    10a2:	de 4f       	sbci	r29, 0xFE	; 254
    10a4:	b9 83       	std	Y+1, r27	; 0x01
    10a6:	a8 83       	st	Y, r26
    10a8:	c0 58       	subi	r28, 0x80	; 128
    10aa:	d1 40       	sbci	r29, 0x01	; 1
    10ac:	c0 58       	subi	r28, 0x80	; 128
    10ae:	de 4f       	sbci	r29, 0xFE	; 254
    10b0:	e8 81       	ld	r30, Y
    10b2:	f9 81       	ldd	r31, Y+1	; 0x01
    10b4:	c0 58       	subi	r28, 0x80	; 128
    10b6:	d1 40       	sbci	r29, 0x01	; 1
    10b8:	ce 57       	subi	r28, 0x7E	; 126
    10ba:	de 4f       	sbci	r29, 0xFE	; 254
    10bc:	f9 83       	std	Y+1, r31	; 0x01
    10be:	e8 83       	st	Y, r30
    10c0:	c2 58       	subi	r28, 0x82	; 130
    10c2:	d1 40       	sbci	r29, 0x01	; 1
    10c4:	2a ed       	ldi	r18, 0xDA	; 218
    10c6:	33 e0       	ldi	r19, 0x03	; 3
    10c8:	cc 57       	subi	r28, 0x7C	; 124
    10ca:	de 4f       	sbci	r29, 0xFE	; 254
    10cc:	39 83       	std	Y+1, r19	; 0x01
    10ce:	28 83       	st	Y, r18
    10d0:	c4 58       	subi	r28, 0x84	; 132
    10d2:	d1 40       	sbci	r29, 0x01	; 1
    10d4:	36 e0       	ldi	r19, 0x06	; 6
    10d6:	ca 57       	subi	r28, 0x7A	; 122
    10d8:	de 4f       	sbci	r29, 0xFE	; 254
    10da:	38 83       	st	Y, r19
    10dc:	c6 58       	subi	r28, 0x86	; 134
    10de:	d1 40       	sbci	r29, 0x01	; 1
    10e0:	cc 57       	subi	r28, 0x7C	; 124
    10e2:	de 4f       	sbci	r29, 0xFE	; 254
    10e4:	a8 81       	ld	r26, Y
    10e6:	b9 81       	ldd	r27, Y+1	; 0x01
    10e8:	c4 58       	subi	r28, 0x84	; 132
    10ea:	d1 40       	sbci	r29, 0x01	; 1
    10ec:	0c 90       	ld	r0, X
    10ee:	cc 57       	subi	r28, 0x7C	; 124
    10f0:	de 4f       	sbci	r29, 0xFE	; 254
    10f2:	e8 81       	ld	r30, Y
    10f4:	f9 81       	ldd	r31, Y+1	; 0x01
    10f6:	c4 58       	subi	r28, 0x84	; 132
    10f8:	d1 40       	sbci	r29, 0x01	; 1
    10fa:	31 96       	adiw	r30, 0x01	; 1
    10fc:	cc 57       	subi	r28, 0x7C	; 124
    10fe:	de 4f       	sbci	r29, 0xFE	; 254
    1100:	f9 83       	std	Y+1, r31	; 0x01
    1102:	e8 83       	st	Y, r30
    1104:	c4 58       	subi	r28, 0x84	; 132
    1106:	d1 40       	sbci	r29, 0x01	; 1
    1108:	ce 57       	subi	r28, 0x7E	; 126
    110a:	de 4f       	sbci	r29, 0xFE	; 254
    110c:	a8 81       	ld	r26, Y
    110e:	b9 81       	ldd	r27, Y+1	; 0x01
    1110:	c2 58       	subi	r28, 0x82	; 130
    1112:	d1 40       	sbci	r29, 0x01	; 1
    1114:	0c 92       	st	X, r0
    1116:	ce 57       	subi	r28, 0x7E	; 126
    1118:	de 4f       	sbci	r29, 0xFE	; 254
    111a:	e8 81       	ld	r30, Y
    111c:	f9 81       	ldd	r31, Y+1	; 0x01
    111e:	c2 58       	subi	r28, 0x82	; 130
    1120:	d1 40       	sbci	r29, 0x01	; 1
    1122:	31 96       	adiw	r30, 0x01	; 1
    1124:	ce 57       	subi	r28, 0x7E	; 126
    1126:	de 4f       	sbci	r29, 0xFE	; 254
    1128:	f9 83       	std	Y+1, r31	; 0x01
    112a:	e8 83       	st	Y, r30
    112c:	c2 58       	subi	r28, 0x82	; 130
    112e:	d1 40       	sbci	r29, 0x01	; 1
    1130:	ca 57       	subi	r28, 0x7A	; 122
    1132:	de 4f       	sbci	r29, 0xFE	; 254
    1134:	f8 81       	ld	r31, Y
    1136:	c6 58       	subi	r28, 0x86	; 134
    1138:	d1 40       	sbci	r29, 0x01	; 1
    113a:	f1 50       	subi	r31, 0x01	; 1
    113c:	ca 57       	subi	r28, 0x7A	; 122
    113e:	de 4f       	sbci	r29, 0xFE	; 254
    1140:	f8 83       	st	Y, r31
    1142:	c6 58       	subi	r28, 0x86	; 134
    1144:	d1 40       	sbci	r29, 0x01	; 1
    1146:	ca 57       	subi	r28, 0x7A	; 122
    1148:	de 4f       	sbci	r29, 0xFE	; 254
    114a:	28 81       	ld	r18, Y
    114c:	c6 58       	subi	r28, 0x86	; 134
    114e:	d1 40       	sbci	r29, 0x01	; 1
    1150:	22 23       	and	r18, r18
    1152:	31 f6       	brne	.-116    	; 0x10e0 <main+0x51e>
    1154:	8b e0       	ldi	r24, 0x0B	; 11
    1156:	c0 58       	subi	r28, 0x80	; 128
    1158:	de 4f       	sbci	r29, 0xFE	; 254
    115a:	e8 81       	ld	r30, Y
    115c:	f9 81       	ldd	r31, Y+1	; 0x01
    115e:	c0 58       	subi	r28, 0x80	; 128
    1160:	d1 40       	sbci	r29, 0x01	; 1
    1162:	36 96       	adiw	r30, 0x06	; 6
    1164:	df 01       	movw	r26, r30
    1166:	28 2f       	mov	r18, r24
    1168:	1d 92       	st	X+, r1
    116a:	2a 95       	dec	r18
    116c:	e9 f7       	brne	.-6      	; 0x1168 <main+0x5a6>
    116e:	ce 01       	movw	r24, r28
    1170:	88 59       	subi	r24, 0x98	; 152
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	8d 5a       	subi	r24, 0xAD	; 173
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	c9 57       	subi	r28, 0x79	; 121
    117a:	de 4f       	sbci	r29, 0xFE	; 254
    117c:	99 83       	std	Y+1, r25	; 0x01
    117e:	88 83       	st	Y, r24
    1180:	c7 58       	subi	r28, 0x87	; 135
    1182:	d1 40       	sbci	r29, 0x01	; 1
    1184:	8b ee       	ldi	r24, 0xEB	; 235
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	c7 57       	subi	r28, 0x77	; 119
    118a:	de 4f       	sbci	r29, 0xFE	; 254
    118c:	99 83       	std	Y+1, r25	; 0x01
    118e:	88 83       	st	Y, r24
    1190:	c9 58       	subi	r28, 0x89	; 137
    1192:	d1 40       	sbci	r29, 0x01	; 1
    1194:	95 e0       	ldi	r25, 0x05	; 5
    1196:	c5 57       	subi	r28, 0x75	; 117
    1198:	de 4f       	sbci	r29, 0xFE	; 254
    119a:	98 83       	st	Y, r25
    119c:	cb 58       	subi	r28, 0x8B	; 139
    119e:	d1 40       	sbci	r29, 0x01	; 1
    11a0:	c7 57       	subi	r28, 0x77	; 119
    11a2:	de 4f       	sbci	r29, 0xFE	; 254
    11a4:	a8 81       	ld	r26, Y
    11a6:	b9 81       	ldd	r27, Y+1	; 0x01
    11a8:	c9 58       	subi	r28, 0x89	; 137
    11aa:	d1 40       	sbci	r29, 0x01	; 1
    11ac:	0c 90       	ld	r0, X
    11ae:	c7 57       	subi	r28, 0x77	; 119
    11b0:	de 4f       	sbci	r29, 0xFE	; 254
    11b2:	e8 81       	ld	r30, Y
    11b4:	f9 81       	ldd	r31, Y+1	; 0x01
    11b6:	c9 58       	subi	r28, 0x89	; 137
    11b8:	d1 40       	sbci	r29, 0x01	; 1
    11ba:	31 96       	adiw	r30, 0x01	; 1
    11bc:	c7 57       	subi	r28, 0x77	; 119
    11be:	de 4f       	sbci	r29, 0xFE	; 254
    11c0:	f9 83       	std	Y+1, r31	; 0x01
    11c2:	e8 83       	st	Y, r30
    11c4:	c9 58       	subi	r28, 0x89	; 137
    11c6:	d1 40       	sbci	r29, 0x01	; 1
    11c8:	c9 57       	subi	r28, 0x79	; 121
    11ca:	de 4f       	sbci	r29, 0xFE	; 254
    11cc:	a8 81       	ld	r26, Y
    11ce:	b9 81       	ldd	r27, Y+1	; 0x01
    11d0:	c7 58       	subi	r28, 0x87	; 135
    11d2:	d1 40       	sbci	r29, 0x01	; 1
    11d4:	0c 92       	st	X, r0
    11d6:	c9 57       	subi	r28, 0x79	; 121
    11d8:	de 4f       	sbci	r29, 0xFE	; 254
    11da:	e8 81       	ld	r30, Y
    11dc:	f9 81       	ldd	r31, Y+1	; 0x01
    11de:	c7 58       	subi	r28, 0x87	; 135
    11e0:	d1 40       	sbci	r29, 0x01	; 1
    11e2:	31 96       	adiw	r30, 0x01	; 1
    11e4:	c9 57       	subi	r28, 0x79	; 121
    11e6:	de 4f       	sbci	r29, 0xFE	; 254
    11e8:	f9 83       	std	Y+1, r31	; 0x01
    11ea:	e8 83       	st	Y, r30
    11ec:	c7 58       	subi	r28, 0x87	; 135
    11ee:	d1 40       	sbci	r29, 0x01	; 1
    11f0:	c5 57       	subi	r28, 0x75	; 117
    11f2:	de 4f       	sbci	r29, 0xFE	; 254
    11f4:	f8 81       	ld	r31, Y
    11f6:	cb 58       	subi	r28, 0x8B	; 139
    11f8:	d1 40       	sbci	r29, 0x01	; 1
    11fa:	f1 50       	subi	r31, 0x01	; 1
    11fc:	c5 57       	subi	r28, 0x75	; 117
    11fe:	de 4f       	sbci	r29, 0xFE	; 254
    1200:	f8 83       	st	Y, r31
    1202:	cb 58       	subi	r28, 0x8B	; 139
    1204:	d1 40       	sbci	r29, 0x01	; 1
    1206:	c5 57       	subi	r28, 0x75	; 117
    1208:	de 4f       	sbci	r29, 0xFE	; 254
    120a:	28 81       	ld	r18, Y
    120c:	cb 58       	subi	r28, 0x8B	; 139
    120e:	d1 40       	sbci	r29, 0x01	; 1
    1210:	22 23       	and	r18, r18
    1212:	31 f6       	brne	.-116    	; 0x11a0 <main+0x5de>
    1214:	ce 01       	movw	r24, r28
    1216:	88 59       	subi	r24, 0x98	; 152
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	dc 01       	movw	r26, r24
    121c:	a8 5a       	subi	r26, 0xA8	; 168
    121e:	bf 4f       	sbci	r27, 0xFF	; 255
    1220:	c4 57       	subi	r28, 0x74	; 116
    1222:	de 4f       	sbci	r29, 0xFE	; 254
    1224:	b9 83       	std	Y+1, r27	; 0x01
    1226:	a8 83       	st	Y, r26
    1228:	cc 58       	subi	r28, 0x8C	; 140
    122a:	d1 40       	sbci	r29, 0x01	; 1
    122c:	c4 57       	subi	r28, 0x74	; 116
    122e:	de 4f       	sbci	r29, 0xFE	; 254
    1230:	e8 81       	ld	r30, Y
    1232:	f9 81       	ldd	r31, Y+1	; 0x01
    1234:	cc 58       	subi	r28, 0x8C	; 140
    1236:	d1 40       	sbci	r29, 0x01	; 1
    1238:	c2 57       	subi	r28, 0x72	; 114
    123a:	de 4f       	sbci	r29, 0xFE	; 254
    123c:	f9 83       	std	Y+1, r31	; 0x01
    123e:	e8 83       	st	Y, r30
    1240:	ce 58       	subi	r28, 0x8E	; 142
    1242:	d1 40       	sbci	r29, 0x01	; 1
    1244:	20 ef       	ldi	r18, 0xF0	; 240
    1246:	33 e0       	ldi	r19, 0x03	; 3
    1248:	c0 57       	subi	r28, 0x70	; 112
    124a:	de 4f       	sbci	r29, 0xFE	; 254
    124c:	39 83       	std	Y+1, r19	; 0x01
    124e:	28 83       	st	Y, r18
    1250:	c0 59       	subi	r28, 0x90	; 144
    1252:	d1 40       	sbci	r29, 0x01	; 1
    1254:	36 e0       	ldi	r19, 0x06	; 6
    1256:	ce 56       	subi	r28, 0x6E	; 110
    1258:	de 4f       	sbci	r29, 0xFE	; 254
    125a:	38 83       	st	Y, r19
    125c:	c2 59       	subi	r28, 0x92	; 146
    125e:	d1 40       	sbci	r29, 0x01	; 1
    1260:	c0 57       	subi	r28, 0x70	; 112
    1262:	de 4f       	sbci	r29, 0xFE	; 254
    1264:	a8 81       	ld	r26, Y
    1266:	b9 81       	ldd	r27, Y+1	; 0x01
    1268:	c0 59       	subi	r28, 0x90	; 144
    126a:	d1 40       	sbci	r29, 0x01	; 1
    126c:	0c 90       	ld	r0, X
    126e:	c0 57       	subi	r28, 0x70	; 112
    1270:	de 4f       	sbci	r29, 0xFE	; 254
    1272:	e8 81       	ld	r30, Y
    1274:	f9 81       	ldd	r31, Y+1	; 0x01
    1276:	c0 59       	subi	r28, 0x90	; 144
    1278:	d1 40       	sbci	r29, 0x01	; 1
    127a:	31 96       	adiw	r30, 0x01	; 1
    127c:	c0 57       	subi	r28, 0x70	; 112
    127e:	de 4f       	sbci	r29, 0xFE	; 254
    1280:	f9 83       	std	Y+1, r31	; 0x01
    1282:	e8 83       	st	Y, r30
    1284:	c0 59       	subi	r28, 0x90	; 144
    1286:	d1 40       	sbci	r29, 0x01	; 1
    1288:	c2 57       	subi	r28, 0x72	; 114
    128a:	de 4f       	sbci	r29, 0xFE	; 254
    128c:	a8 81       	ld	r26, Y
    128e:	b9 81       	ldd	r27, Y+1	; 0x01
    1290:	ce 58       	subi	r28, 0x8E	; 142
    1292:	d1 40       	sbci	r29, 0x01	; 1
    1294:	0c 92       	st	X, r0
    1296:	c2 57       	subi	r28, 0x72	; 114
    1298:	de 4f       	sbci	r29, 0xFE	; 254
    129a:	e8 81       	ld	r30, Y
    129c:	f9 81       	ldd	r31, Y+1	; 0x01
    129e:	ce 58       	subi	r28, 0x8E	; 142
    12a0:	d1 40       	sbci	r29, 0x01	; 1
    12a2:	31 96       	adiw	r30, 0x01	; 1
    12a4:	c2 57       	subi	r28, 0x72	; 114
    12a6:	de 4f       	sbci	r29, 0xFE	; 254
    12a8:	f9 83       	std	Y+1, r31	; 0x01
    12aa:	e8 83       	st	Y, r30
    12ac:	ce 58       	subi	r28, 0x8E	; 142
    12ae:	d1 40       	sbci	r29, 0x01	; 1
    12b0:	ce 56       	subi	r28, 0x6E	; 110
    12b2:	de 4f       	sbci	r29, 0xFE	; 254
    12b4:	f8 81       	ld	r31, Y
    12b6:	c2 59       	subi	r28, 0x92	; 146
    12b8:	d1 40       	sbci	r29, 0x01	; 1
    12ba:	f1 50       	subi	r31, 0x01	; 1
    12bc:	ce 56       	subi	r28, 0x6E	; 110
    12be:	de 4f       	sbci	r29, 0xFE	; 254
    12c0:	f8 83       	st	Y, r31
    12c2:	c2 59       	subi	r28, 0x92	; 146
    12c4:	d1 40       	sbci	r29, 0x01	; 1
    12c6:	ce 56       	subi	r28, 0x6E	; 110
    12c8:	de 4f       	sbci	r29, 0xFE	; 254
    12ca:	28 81       	ld	r18, Y
    12cc:	c2 59       	subi	r28, 0x92	; 146
    12ce:	d1 40       	sbci	r29, 0x01	; 1
    12d0:	22 23       	and	r18, r18
    12d2:	31 f6       	brne	.-116    	; 0x1260 <main+0x69e>
    12d4:	8b e0       	ldi	r24, 0x0B	; 11
    12d6:	c4 57       	subi	r28, 0x74	; 116
    12d8:	de 4f       	sbci	r29, 0xFE	; 254
    12da:	e8 81       	ld	r30, Y
    12dc:	f9 81       	ldd	r31, Y+1	; 0x01
    12de:	cc 58       	subi	r28, 0x8C	; 140
    12e0:	d1 40       	sbci	r29, 0x01	; 1
    12e2:	36 96       	adiw	r30, 0x06	; 6
    12e4:	df 01       	movw	r26, r30
    12e6:	28 2f       	mov	r18, r24
    12e8:	1d 92       	st	X+, r1
    12ea:	2a 95       	dec	r18
    12ec:	e9 f7       	brne	.-6      	; 0x12e8 <main+0x726>
    12ee:	ce 01       	movw	r24, r28
    12f0:	88 59       	subi	r24, 0x98	; 152
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	87 59       	subi	r24, 0x97	; 151
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	cd 56       	subi	r28, 0x6D	; 109
    12fa:	de 4f       	sbci	r29, 0xFE	; 254
    12fc:	99 83       	std	Y+1, r25	; 0x01
    12fe:	88 83       	st	Y, r24
    1300:	c3 59       	subi	r28, 0x93	; 147
    1302:	d1 40       	sbci	r29, 0x01	; 1
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	cb 56       	subi	r28, 0x6B	; 107
    130a:	de 4f       	sbci	r29, 0xFE	; 254
    130c:	99 83       	std	Y+1, r25	; 0x01
    130e:	88 83       	st	Y, r24
    1310:	c5 59       	subi	r28, 0x95	; 149
    1312:	d1 40       	sbci	r29, 0x01	; 1
    1314:	95 e0       	ldi	r25, 0x05	; 5
    1316:	c9 56       	subi	r28, 0x69	; 105
    1318:	de 4f       	sbci	r29, 0xFE	; 254
    131a:	98 83       	st	Y, r25
    131c:	c7 59       	subi	r28, 0x97	; 151
    131e:	d1 40       	sbci	r29, 0x01	; 1
    1320:	cb 56       	subi	r28, 0x6B	; 107
    1322:	de 4f       	sbci	r29, 0xFE	; 254
    1324:	a8 81       	ld	r26, Y
    1326:	b9 81       	ldd	r27, Y+1	; 0x01
    1328:	c5 59       	subi	r28, 0x95	; 149
    132a:	d1 40       	sbci	r29, 0x01	; 1
    132c:	0c 90       	ld	r0, X
    132e:	cb 56       	subi	r28, 0x6B	; 107
    1330:	de 4f       	sbci	r29, 0xFE	; 254
    1332:	e8 81       	ld	r30, Y
    1334:	f9 81       	ldd	r31, Y+1	; 0x01
    1336:	c5 59       	subi	r28, 0x95	; 149
    1338:	d1 40       	sbci	r29, 0x01	; 1
    133a:	31 96       	adiw	r30, 0x01	; 1
    133c:	cb 56       	subi	r28, 0x6B	; 107
    133e:	de 4f       	sbci	r29, 0xFE	; 254
    1340:	f9 83       	std	Y+1, r31	; 0x01
    1342:	e8 83       	st	Y, r30
    1344:	c5 59       	subi	r28, 0x95	; 149
    1346:	d1 40       	sbci	r29, 0x01	; 1
    1348:	cd 56       	subi	r28, 0x6D	; 109
    134a:	de 4f       	sbci	r29, 0xFE	; 254
    134c:	a8 81       	ld	r26, Y
    134e:	b9 81       	ldd	r27, Y+1	; 0x01
    1350:	c3 59       	subi	r28, 0x93	; 147
    1352:	d1 40       	sbci	r29, 0x01	; 1
    1354:	0c 92       	st	X, r0
    1356:	cd 56       	subi	r28, 0x6D	; 109
    1358:	de 4f       	sbci	r29, 0xFE	; 254
    135a:	e8 81       	ld	r30, Y
    135c:	f9 81       	ldd	r31, Y+1	; 0x01
    135e:	c3 59       	subi	r28, 0x93	; 147
    1360:	d1 40       	sbci	r29, 0x01	; 1
    1362:	31 96       	adiw	r30, 0x01	; 1
    1364:	cd 56       	subi	r28, 0x6D	; 109
    1366:	de 4f       	sbci	r29, 0xFE	; 254
    1368:	f9 83       	std	Y+1, r31	; 0x01
    136a:	e8 83       	st	Y, r30
    136c:	c3 59       	subi	r28, 0x93	; 147
    136e:	d1 40       	sbci	r29, 0x01	; 1
    1370:	c9 56       	subi	r28, 0x69	; 105
    1372:	de 4f       	sbci	r29, 0xFE	; 254
    1374:	f8 81       	ld	r31, Y
    1376:	c7 59       	subi	r28, 0x97	; 151
    1378:	d1 40       	sbci	r29, 0x01	; 1
    137a:	f1 50       	subi	r31, 0x01	; 1
    137c:	c9 56       	subi	r28, 0x69	; 105
    137e:	de 4f       	sbci	r29, 0xFE	; 254
    1380:	f8 83       	st	Y, r31
    1382:	c7 59       	subi	r28, 0x97	; 151
    1384:	d1 40       	sbci	r29, 0x01	; 1
    1386:	c9 56       	subi	r28, 0x69	; 105
    1388:	de 4f       	sbci	r29, 0xFE	; 254
    138a:	28 81       	ld	r18, Y
    138c:	c7 59       	subi	r28, 0x97	; 151
    138e:	d1 40       	sbci	r29, 0x01	; 1
    1390:	22 23       	and	r18, r18
    1392:	31 f6       	brne	.-116    	; 0x1320 <main+0x75e>
    1394:	ce 01       	movw	r24, r28
    1396:	88 59       	subi	r24, 0x98	; 152
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	dc 01       	movw	r26, r24
    139c:	a2 59       	subi	r26, 0x92	; 146
    139e:	bf 4f       	sbci	r27, 0xFF	; 255
    13a0:	c8 56       	subi	r28, 0x68	; 104
    13a2:	de 4f       	sbci	r29, 0xFE	; 254
    13a4:	b9 83       	std	Y+1, r27	; 0x01
    13a6:	a8 83       	st	Y, r26
    13a8:	c8 59       	subi	r28, 0x98	; 152
    13aa:	d1 40       	sbci	r29, 0x01	; 1
    13ac:	c8 56       	subi	r28, 0x68	; 104
    13ae:	de 4f       	sbci	r29, 0xFE	; 254
    13b0:	e8 81       	ld	r30, Y
    13b2:	f9 81       	ldd	r31, Y+1	; 0x01
    13b4:	c8 59       	subi	r28, 0x98	; 152
    13b6:	d1 40       	sbci	r29, 0x01	; 1
    13b8:	c6 56       	subi	r28, 0x66	; 102
    13ba:	de 4f       	sbci	r29, 0xFE	; 254
    13bc:	f9 83       	std	Y+1, r31	; 0x01
    13be:	e8 83       	st	Y, r30
    13c0:	ca 59       	subi	r28, 0x9A	; 154
    13c2:	d1 40       	sbci	r29, 0x01	; 1
    13c4:	26 e0       	ldi	r18, 0x06	; 6
    13c6:	34 e0       	ldi	r19, 0x04	; 4
    13c8:	c4 56       	subi	r28, 0x64	; 100
    13ca:	de 4f       	sbci	r29, 0xFE	; 254
    13cc:	39 83       	std	Y+1, r19	; 0x01
    13ce:	28 83       	st	Y, r18
    13d0:	cc 59       	subi	r28, 0x9C	; 156
    13d2:	d1 40       	sbci	r29, 0x01	; 1
    13d4:	36 e0       	ldi	r19, 0x06	; 6
    13d6:	c2 56       	subi	r28, 0x62	; 98
    13d8:	de 4f       	sbci	r29, 0xFE	; 254
    13da:	38 83       	st	Y, r19
    13dc:	ce 59       	subi	r28, 0x9E	; 158
    13de:	d1 40       	sbci	r29, 0x01	; 1
    13e0:	c4 56       	subi	r28, 0x64	; 100
    13e2:	de 4f       	sbci	r29, 0xFE	; 254
    13e4:	a8 81       	ld	r26, Y
    13e6:	b9 81       	ldd	r27, Y+1	; 0x01
    13e8:	cc 59       	subi	r28, 0x9C	; 156
    13ea:	d1 40       	sbci	r29, 0x01	; 1
    13ec:	0c 90       	ld	r0, X
    13ee:	c4 56       	subi	r28, 0x64	; 100
    13f0:	de 4f       	sbci	r29, 0xFE	; 254
    13f2:	e8 81       	ld	r30, Y
    13f4:	f9 81       	ldd	r31, Y+1	; 0x01
    13f6:	cc 59       	subi	r28, 0x9C	; 156
    13f8:	d1 40       	sbci	r29, 0x01	; 1
    13fa:	31 96       	adiw	r30, 0x01	; 1
    13fc:	c4 56       	subi	r28, 0x64	; 100
    13fe:	de 4f       	sbci	r29, 0xFE	; 254
    1400:	f9 83       	std	Y+1, r31	; 0x01
    1402:	e8 83       	st	Y, r30
    1404:	cc 59       	subi	r28, 0x9C	; 156
    1406:	d1 40       	sbci	r29, 0x01	; 1
    1408:	c6 56       	subi	r28, 0x66	; 102
    140a:	de 4f       	sbci	r29, 0xFE	; 254
    140c:	a8 81       	ld	r26, Y
    140e:	b9 81       	ldd	r27, Y+1	; 0x01
    1410:	ca 59       	subi	r28, 0x9A	; 154
    1412:	d1 40       	sbci	r29, 0x01	; 1
    1414:	0c 92       	st	X, r0
    1416:	c6 56       	subi	r28, 0x66	; 102
    1418:	de 4f       	sbci	r29, 0xFE	; 254
    141a:	e8 81       	ld	r30, Y
    141c:	f9 81       	ldd	r31, Y+1	; 0x01
    141e:	ca 59       	subi	r28, 0x9A	; 154
    1420:	d1 40       	sbci	r29, 0x01	; 1
    1422:	31 96       	adiw	r30, 0x01	; 1
    1424:	c6 56       	subi	r28, 0x66	; 102
    1426:	de 4f       	sbci	r29, 0xFE	; 254
    1428:	f9 83       	std	Y+1, r31	; 0x01
    142a:	e8 83       	st	Y, r30
    142c:	ca 59       	subi	r28, 0x9A	; 154
    142e:	d1 40       	sbci	r29, 0x01	; 1
    1430:	c2 56       	subi	r28, 0x62	; 98
    1432:	de 4f       	sbci	r29, 0xFE	; 254
    1434:	f8 81       	ld	r31, Y
    1436:	ce 59       	subi	r28, 0x9E	; 158
    1438:	d1 40       	sbci	r29, 0x01	; 1
    143a:	f1 50       	subi	r31, 0x01	; 1
    143c:	c2 56       	subi	r28, 0x62	; 98
    143e:	de 4f       	sbci	r29, 0xFE	; 254
    1440:	f8 83       	st	Y, r31
    1442:	ce 59       	subi	r28, 0x9E	; 158
    1444:	d1 40       	sbci	r29, 0x01	; 1
    1446:	c2 56       	subi	r28, 0x62	; 98
    1448:	de 4f       	sbci	r29, 0xFE	; 254
    144a:	28 81       	ld	r18, Y
    144c:	ce 59       	subi	r28, 0x9E	; 158
    144e:	d1 40       	sbci	r29, 0x01	; 1
    1450:	22 23       	and	r18, r18
    1452:	31 f6       	brne	.-116    	; 0x13e0 <main+0x81e>
    1454:	8b e0       	ldi	r24, 0x0B	; 11
    1456:	c8 56       	subi	r28, 0x68	; 104
    1458:	de 4f       	sbci	r29, 0xFE	; 254
    145a:	e8 81       	ld	r30, Y
    145c:	f9 81       	ldd	r31, Y+1	; 0x01
    145e:	c8 59       	subi	r28, 0x98	; 152
    1460:	d1 40       	sbci	r29, 0x01	; 1
    1462:	36 96       	adiw	r30, 0x06	; 6
    1464:	df 01       	movw	r26, r30
    1466:	28 2f       	mov	r18, r24
    1468:	1d 92       	st	X+, r1
    146a:	2a 95       	dec	r18
    146c:	e9 f7       	brne	.-6      	; 0x1468 <main+0x8a6>
    146e:	ce 01       	movw	r24, r28
    1470:	88 59       	subi	r24, 0x98	; 152
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	81 58       	subi	r24, 0x81	; 129
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	c1 56       	subi	r28, 0x61	; 97
    147a:	de 4f       	sbci	r29, 0xFE	; 254
    147c:	99 83       	std	Y+1, r25	; 0x01
    147e:	88 83       	st	Y, r24
    1480:	cf 59       	subi	r28, 0x9F	; 159
    1482:	d1 40       	sbci	r29, 0x01	; 1
    1484:	87 e1       	ldi	r24, 0x17	; 23
    1486:	94 e0       	ldi	r25, 0x04	; 4
    1488:	cf 55       	subi	r28, 0x5F	; 95
    148a:	de 4f       	sbci	r29, 0xFE	; 254
    148c:	99 83       	std	Y+1, r25	; 0x01
    148e:	88 83       	st	Y, r24
    1490:	c1 5a       	subi	r28, 0xA1	; 161
    1492:	d1 40       	sbci	r29, 0x01	; 1
    1494:	95 e0       	ldi	r25, 0x05	; 5
    1496:	cd 55       	subi	r28, 0x5D	; 93
    1498:	de 4f       	sbci	r29, 0xFE	; 254
    149a:	98 83       	st	Y, r25
    149c:	c3 5a       	subi	r28, 0xA3	; 163
    149e:	d1 40       	sbci	r29, 0x01	; 1
    14a0:	cf 55       	subi	r28, 0x5F	; 95
    14a2:	de 4f       	sbci	r29, 0xFE	; 254
    14a4:	a8 81       	ld	r26, Y
    14a6:	b9 81       	ldd	r27, Y+1	; 0x01
    14a8:	c1 5a       	subi	r28, 0xA1	; 161
    14aa:	d1 40       	sbci	r29, 0x01	; 1
    14ac:	0c 90       	ld	r0, X
    14ae:	cf 55       	subi	r28, 0x5F	; 95
    14b0:	de 4f       	sbci	r29, 0xFE	; 254
    14b2:	e8 81       	ld	r30, Y
    14b4:	f9 81       	ldd	r31, Y+1	; 0x01
    14b6:	c1 5a       	subi	r28, 0xA1	; 161
    14b8:	d1 40       	sbci	r29, 0x01	; 1
    14ba:	31 96       	adiw	r30, 0x01	; 1
    14bc:	cf 55       	subi	r28, 0x5F	; 95
    14be:	de 4f       	sbci	r29, 0xFE	; 254
    14c0:	f9 83       	std	Y+1, r31	; 0x01
    14c2:	e8 83       	st	Y, r30
    14c4:	c1 5a       	subi	r28, 0xA1	; 161
    14c6:	d1 40       	sbci	r29, 0x01	; 1
    14c8:	c1 56       	subi	r28, 0x61	; 97
    14ca:	de 4f       	sbci	r29, 0xFE	; 254
    14cc:	a8 81       	ld	r26, Y
    14ce:	b9 81       	ldd	r27, Y+1	; 0x01
    14d0:	cf 59       	subi	r28, 0x9F	; 159
    14d2:	d1 40       	sbci	r29, 0x01	; 1
    14d4:	0c 92       	st	X, r0
    14d6:	c1 56       	subi	r28, 0x61	; 97
    14d8:	de 4f       	sbci	r29, 0xFE	; 254
    14da:	e8 81       	ld	r30, Y
    14dc:	f9 81       	ldd	r31, Y+1	; 0x01
    14de:	cf 59       	subi	r28, 0x9F	; 159
    14e0:	d1 40       	sbci	r29, 0x01	; 1
    14e2:	31 96       	adiw	r30, 0x01	; 1
    14e4:	c1 56       	subi	r28, 0x61	; 97
    14e6:	de 4f       	sbci	r29, 0xFE	; 254
    14e8:	f9 83       	std	Y+1, r31	; 0x01
    14ea:	e8 83       	st	Y, r30
    14ec:	cf 59       	subi	r28, 0x9F	; 159
    14ee:	d1 40       	sbci	r29, 0x01	; 1
    14f0:	cd 55       	subi	r28, 0x5D	; 93
    14f2:	de 4f       	sbci	r29, 0xFE	; 254
    14f4:	f8 81       	ld	r31, Y
    14f6:	c3 5a       	subi	r28, 0xA3	; 163
    14f8:	d1 40       	sbci	r29, 0x01	; 1
    14fa:	f1 50       	subi	r31, 0x01	; 1
    14fc:	cd 55       	subi	r28, 0x5D	; 93
    14fe:	de 4f       	sbci	r29, 0xFE	; 254
    1500:	f8 83       	st	Y, r31
    1502:	c3 5a       	subi	r28, 0xA3	; 163
    1504:	d1 40       	sbci	r29, 0x01	; 1
    1506:	cd 55       	subi	r28, 0x5D	; 93
    1508:	de 4f       	sbci	r29, 0xFE	; 254
    150a:	28 81       	ld	r18, Y
    150c:	c3 5a       	subi	r28, 0xA3	; 163
    150e:	d1 40       	sbci	r29, 0x01	; 1
    1510:	22 23       	and	r18, r18
    1512:	31 f6       	brne	.-116    	; 0x14a0 <main+0x8de>
    1514:	ce 01       	movw	r24, r28
    1516:	88 59       	subi	r24, 0x98	; 152
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	dc 01       	movw	r26, r24
    151c:	ac 57       	subi	r26, 0x7C	; 124
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	cc 55       	subi	r28, 0x5C	; 92
    1522:	de 4f       	sbci	r29, 0xFE	; 254
    1524:	b9 83       	std	Y+1, r27	; 0x01
    1526:	a8 83       	st	Y, r26
    1528:	c4 5a       	subi	r28, 0xA4	; 164
    152a:	d1 40       	sbci	r29, 0x01	; 1
    152c:	cc 55       	subi	r28, 0x5C	; 92
    152e:	de 4f       	sbci	r29, 0xFE	; 254
    1530:	e8 81       	ld	r30, Y
    1532:	f9 81       	ldd	r31, Y+1	; 0x01
    1534:	c4 5a       	subi	r28, 0xA4	; 164
    1536:	d1 40       	sbci	r29, 0x01	; 1
    1538:	ca 55       	subi	r28, 0x5A	; 90
    153a:	de 4f       	sbci	r29, 0xFE	; 254
    153c:	f9 83       	std	Y+1, r31	; 0x01
    153e:	e8 83       	st	Y, r30
    1540:	c6 5a       	subi	r28, 0xA6	; 166
    1542:	d1 40       	sbci	r29, 0x01	; 1
    1544:	2c e1       	ldi	r18, 0x1C	; 28
    1546:	34 e0       	ldi	r19, 0x04	; 4
    1548:	c8 55       	subi	r28, 0x58	; 88
    154a:	de 4f       	sbci	r29, 0xFE	; 254
    154c:	39 83       	std	Y+1, r19	; 0x01
    154e:	28 83       	st	Y, r18
    1550:	c8 5a       	subi	r28, 0xA8	; 168
    1552:	d1 40       	sbci	r29, 0x01	; 1
    1554:	36 e0       	ldi	r19, 0x06	; 6
    1556:	c6 55       	subi	r28, 0x56	; 86
    1558:	de 4f       	sbci	r29, 0xFE	; 254
    155a:	38 83       	st	Y, r19
    155c:	ca 5a       	subi	r28, 0xAA	; 170
    155e:	d1 40       	sbci	r29, 0x01	; 1
    1560:	c8 55       	subi	r28, 0x58	; 88
    1562:	de 4f       	sbci	r29, 0xFE	; 254
    1564:	a8 81       	ld	r26, Y
    1566:	b9 81       	ldd	r27, Y+1	; 0x01
    1568:	c8 5a       	subi	r28, 0xA8	; 168
    156a:	d1 40       	sbci	r29, 0x01	; 1
    156c:	0c 90       	ld	r0, X
    156e:	c8 55       	subi	r28, 0x58	; 88
    1570:	de 4f       	sbci	r29, 0xFE	; 254
    1572:	e8 81       	ld	r30, Y
    1574:	f9 81       	ldd	r31, Y+1	; 0x01
    1576:	c8 5a       	subi	r28, 0xA8	; 168
    1578:	d1 40       	sbci	r29, 0x01	; 1
    157a:	31 96       	adiw	r30, 0x01	; 1
    157c:	c8 55       	subi	r28, 0x58	; 88
    157e:	de 4f       	sbci	r29, 0xFE	; 254
    1580:	f9 83       	std	Y+1, r31	; 0x01
    1582:	e8 83       	st	Y, r30
    1584:	c8 5a       	subi	r28, 0xA8	; 168
    1586:	d1 40       	sbci	r29, 0x01	; 1
    1588:	ca 55       	subi	r28, 0x5A	; 90
    158a:	de 4f       	sbci	r29, 0xFE	; 254
    158c:	a8 81       	ld	r26, Y
    158e:	b9 81       	ldd	r27, Y+1	; 0x01
    1590:	c6 5a       	subi	r28, 0xA6	; 166
    1592:	d1 40       	sbci	r29, 0x01	; 1
    1594:	0c 92       	st	X, r0
    1596:	ca 55       	subi	r28, 0x5A	; 90
    1598:	de 4f       	sbci	r29, 0xFE	; 254
    159a:	e8 81       	ld	r30, Y
    159c:	f9 81       	ldd	r31, Y+1	; 0x01
    159e:	c6 5a       	subi	r28, 0xA6	; 166
    15a0:	d1 40       	sbci	r29, 0x01	; 1
    15a2:	31 96       	adiw	r30, 0x01	; 1
    15a4:	ca 55       	subi	r28, 0x5A	; 90
    15a6:	de 4f       	sbci	r29, 0xFE	; 254
    15a8:	f9 83       	std	Y+1, r31	; 0x01
    15aa:	e8 83       	st	Y, r30
    15ac:	c6 5a       	subi	r28, 0xA6	; 166
    15ae:	d1 40       	sbci	r29, 0x01	; 1
    15b0:	c6 55       	subi	r28, 0x56	; 86
    15b2:	de 4f       	sbci	r29, 0xFE	; 254
    15b4:	f8 81       	ld	r31, Y
    15b6:	ca 5a       	subi	r28, 0xAA	; 170
    15b8:	d1 40       	sbci	r29, 0x01	; 1
    15ba:	f1 50       	subi	r31, 0x01	; 1
    15bc:	c6 55       	subi	r28, 0x56	; 86
    15be:	de 4f       	sbci	r29, 0xFE	; 254
    15c0:	f8 83       	st	Y, r31
    15c2:	ca 5a       	subi	r28, 0xAA	; 170
    15c4:	d1 40       	sbci	r29, 0x01	; 1
    15c6:	c6 55       	subi	r28, 0x56	; 86
    15c8:	de 4f       	sbci	r29, 0xFE	; 254
    15ca:	28 81       	ld	r18, Y
    15cc:	ca 5a       	subi	r28, 0xAA	; 170
    15ce:	d1 40       	sbci	r29, 0x01	; 1
    15d0:	22 23       	and	r18, r18
    15d2:	31 f6       	brne	.-116    	; 0x1560 <main+0x99e>
    15d4:	8b e0       	ldi	r24, 0x0B	; 11
    15d6:	cc 55       	subi	r28, 0x5C	; 92
    15d8:	de 4f       	sbci	r29, 0xFE	; 254
    15da:	e8 81       	ld	r30, Y
    15dc:	f9 81       	ldd	r31, Y+1	; 0x01
    15de:	c4 5a       	subi	r28, 0xA4	; 164
    15e0:	d1 40       	sbci	r29, 0x01	; 1
    15e2:	36 96       	adiw	r30, 0x06	; 6
    15e4:	df 01       	movw	r26, r30
    15e6:	28 2f       	mov	r18, r24
    15e8:	1d 92       	st	X+, r1
    15ea:	2a 95       	dec	r18
    15ec:	e9 f7       	brne	.-6      	; 0x15e8 <main+0xa26>
    15ee:	ce 01       	movw	r24, r28
    15f0:	88 59       	subi	r24, 0x98	; 152
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	8b 56       	subi	r24, 0x6B	; 107
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	c5 55       	subi	r28, 0x55	; 85
    15fa:	de 4f       	sbci	r29, 0xFE	; 254
    15fc:	99 83       	std	Y+1, r25	; 0x01
    15fe:	88 83       	st	Y, r24
    1600:	cb 5a       	subi	r28, 0xAB	; 171
    1602:	d1 40       	sbci	r29, 0x01	; 1
    1604:	8d e2       	ldi	r24, 0x2D	; 45
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	c3 55       	subi	r28, 0x53	; 83
    160a:	de 4f       	sbci	r29, 0xFE	; 254
    160c:	99 83       	std	Y+1, r25	; 0x01
    160e:	88 83       	st	Y, r24
    1610:	cd 5a       	subi	r28, 0xAD	; 173
    1612:	d1 40       	sbci	r29, 0x01	; 1
    1614:	95 e0       	ldi	r25, 0x05	; 5
    1616:	c1 55       	subi	r28, 0x51	; 81
    1618:	de 4f       	sbci	r29, 0xFE	; 254
    161a:	98 83       	st	Y, r25
    161c:	cf 5a       	subi	r28, 0xAF	; 175
    161e:	d1 40       	sbci	r29, 0x01	; 1
    1620:	c3 55       	subi	r28, 0x53	; 83
    1622:	de 4f       	sbci	r29, 0xFE	; 254
    1624:	a8 81       	ld	r26, Y
    1626:	b9 81       	ldd	r27, Y+1	; 0x01
    1628:	cd 5a       	subi	r28, 0xAD	; 173
    162a:	d1 40       	sbci	r29, 0x01	; 1
    162c:	0c 90       	ld	r0, X
    162e:	c3 55       	subi	r28, 0x53	; 83
    1630:	de 4f       	sbci	r29, 0xFE	; 254
    1632:	e8 81       	ld	r30, Y
    1634:	f9 81       	ldd	r31, Y+1	; 0x01
    1636:	cd 5a       	subi	r28, 0xAD	; 173
    1638:	d1 40       	sbci	r29, 0x01	; 1
    163a:	31 96       	adiw	r30, 0x01	; 1
    163c:	c3 55       	subi	r28, 0x53	; 83
    163e:	de 4f       	sbci	r29, 0xFE	; 254
    1640:	f9 83       	std	Y+1, r31	; 0x01
    1642:	e8 83       	st	Y, r30
    1644:	cd 5a       	subi	r28, 0xAD	; 173
    1646:	d1 40       	sbci	r29, 0x01	; 1
    1648:	c5 55       	subi	r28, 0x55	; 85
    164a:	de 4f       	sbci	r29, 0xFE	; 254
    164c:	a8 81       	ld	r26, Y
    164e:	b9 81       	ldd	r27, Y+1	; 0x01
    1650:	cb 5a       	subi	r28, 0xAB	; 171
    1652:	d1 40       	sbci	r29, 0x01	; 1
    1654:	0c 92       	st	X, r0
    1656:	c5 55       	subi	r28, 0x55	; 85
    1658:	de 4f       	sbci	r29, 0xFE	; 254
    165a:	e8 81       	ld	r30, Y
    165c:	f9 81       	ldd	r31, Y+1	; 0x01
    165e:	cb 5a       	subi	r28, 0xAB	; 171
    1660:	d1 40       	sbci	r29, 0x01	; 1
    1662:	31 96       	adiw	r30, 0x01	; 1
    1664:	c5 55       	subi	r28, 0x55	; 85
    1666:	de 4f       	sbci	r29, 0xFE	; 254
    1668:	f9 83       	std	Y+1, r31	; 0x01
    166a:	e8 83       	st	Y, r30
    166c:	cb 5a       	subi	r28, 0xAB	; 171
    166e:	d1 40       	sbci	r29, 0x01	; 1
    1670:	c1 55       	subi	r28, 0x51	; 81
    1672:	de 4f       	sbci	r29, 0xFE	; 254
    1674:	f8 81       	ld	r31, Y
    1676:	cf 5a       	subi	r28, 0xAF	; 175
    1678:	d1 40       	sbci	r29, 0x01	; 1
    167a:	f1 50       	subi	r31, 0x01	; 1
    167c:	c1 55       	subi	r28, 0x51	; 81
    167e:	de 4f       	sbci	r29, 0xFE	; 254
    1680:	f8 83       	st	Y, r31
    1682:	cf 5a       	subi	r28, 0xAF	; 175
    1684:	d1 40       	sbci	r29, 0x01	; 1
    1686:	c1 55       	subi	r28, 0x51	; 81
    1688:	de 4f       	sbci	r29, 0xFE	; 254
    168a:	28 81       	ld	r18, Y
    168c:	cf 5a       	subi	r28, 0xAF	; 175
    168e:	d1 40       	sbci	r29, 0x01	; 1
    1690:	22 23       	and	r18, r18
    1692:	31 f6       	brne	.-116    	; 0x1620 <main+0xa5e>
    1694:	ce 01       	movw	r24, r28
    1696:	88 59       	subi	r24, 0x98	; 152
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	dc 01       	movw	r26, r24
    169c:	a6 56       	subi	r26, 0x66	; 102
    169e:	bf 4f       	sbci	r27, 0xFF	; 255
    16a0:	c0 55       	subi	r28, 0x50	; 80
    16a2:	de 4f       	sbci	r29, 0xFE	; 254
    16a4:	b9 83       	std	Y+1, r27	; 0x01
    16a6:	a8 83       	st	Y, r26
    16a8:	c0 5b       	subi	r28, 0xB0	; 176
    16aa:	d1 40       	sbci	r29, 0x01	; 1
    16ac:	c0 55       	subi	r28, 0x50	; 80
    16ae:	de 4f       	sbci	r29, 0xFE	; 254
    16b0:	e8 81       	ld	r30, Y
    16b2:	f9 81       	ldd	r31, Y+1	; 0x01
    16b4:	c0 5b       	subi	r28, 0xB0	; 176
    16b6:	d1 40       	sbci	r29, 0x01	; 1
    16b8:	ce 54       	subi	r28, 0x4E	; 78
    16ba:	de 4f       	sbci	r29, 0xFE	; 254
    16bc:	f9 83       	std	Y+1, r31	; 0x01
    16be:	e8 83       	st	Y, r30
    16c0:	c2 5b       	subi	r28, 0xB2	; 178
    16c2:	d1 40       	sbci	r29, 0x01	; 1
    16c4:	22 e3       	ldi	r18, 0x32	; 50
    16c6:	34 e0       	ldi	r19, 0x04	; 4
    16c8:	cc 54       	subi	r28, 0x4C	; 76
    16ca:	de 4f       	sbci	r29, 0xFE	; 254
    16cc:	39 83       	std	Y+1, r19	; 0x01
    16ce:	28 83       	st	Y, r18
    16d0:	c4 5b       	subi	r28, 0xB4	; 180
    16d2:	d1 40       	sbci	r29, 0x01	; 1
    16d4:	36 e0       	ldi	r19, 0x06	; 6
    16d6:	ca 54       	subi	r28, 0x4A	; 74
    16d8:	de 4f       	sbci	r29, 0xFE	; 254
    16da:	38 83       	st	Y, r19
    16dc:	c6 5b       	subi	r28, 0xB6	; 182
    16de:	d1 40       	sbci	r29, 0x01	; 1
    16e0:	cc 54       	subi	r28, 0x4C	; 76
    16e2:	de 4f       	sbci	r29, 0xFE	; 254
    16e4:	a8 81       	ld	r26, Y
    16e6:	b9 81       	ldd	r27, Y+1	; 0x01
    16e8:	c4 5b       	subi	r28, 0xB4	; 180
    16ea:	d1 40       	sbci	r29, 0x01	; 1
    16ec:	0c 90       	ld	r0, X
    16ee:	cc 54       	subi	r28, 0x4C	; 76
    16f0:	de 4f       	sbci	r29, 0xFE	; 254
    16f2:	e8 81       	ld	r30, Y
    16f4:	f9 81       	ldd	r31, Y+1	; 0x01
    16f6:	c4 5b       	subi	r28, 0xB4	; 180
    16f8:	d1 40       	sbci	r29, 0x01	; 1
    16fa:	31 96       	adiw	r30, 0x01	; 1
    16fc:	cc 54       	subi	r28, 0x4C	; 76
    16fe:	de 4f       	sbci	r29, 0xFE	; 254
    1700:	f9 83       	std	Y+1, r31	; 0x01
    1702:	e8 83       	st	Y, r30
    1704:	c4 5b       	subi	r28, 0xB4	; 180
    1706:	d1 40       	sbci	r29, 0x01	; 1
    1708:	ce 54       	subi	r28, 0x4E	; 78
    170a:	de 4f       	sbci	r29, 0xFE	; 254
    170c:	a8 81       	ld	r26, Y
    170e:	b9 81       	ldd	r27, Y+1	; 0x01
    1710:	c2 5b       	subi	r28, 0xB2	; 178
    1712:	d1 40       	sbci	r29, 0x01	; 1
    1714:	0c 92       	st	X, r0
    1716:	ce 54       	subi	r28, 0x4E	; 78
    1718:	de 4f       	sbci	r29, 0xFE	; 254
    171a:	e8 81       	ld	r30, Y
    171c:	f9 81       	ldd	r31, Y+1	; 0x01
    171e:	c2 5b       	subi	r28, 0xB2	; 178
    1720:	d1 40       	sbci	r29, 0x01	; 1
    1722:	31 96       	adiw	r30, 0x01	; 1
    1724:	ce 54       	subi	r28, 0x4E	; 78
    1726:	de 4f       	sbci	r29, 0xFE	; 254
    1728:	f9 83       	std	Y+1, r31	; 0x01
    172a:	e8 83       	st	Y, r30
    172c:	c2 5b       	subi	r28, 0xB2	; 178
    172e:	d1 40       	sbci	r29, 0x01	; 1
    1730:	ca 54       	subi	r28, 0x4A	; 74
    1732:	de 4f       	sbci	r29, 0xFE	; 254
    1734:	f8 81       	ld	r31, Y
    1736:	c6 5b       	subi	r28, 0xB6	; 182
    1738:	d1 40       	sbci	r29, 0x01	; 1
    173a:	f1 50       	subi	r31, 0x01	; 1
    173c:	ca 54       	subi	r28, 0x4A	; 74
    173e:	de 4f       	sbci	r29, 0xFE	; 254
    1740:	f8 83       	st	Y, r31
    1742:	c6 5b       	subi	r28, 0xB6	; 182
    1744:	d1 40       	sbci	r29, 0x01	; 1
    1746:	ca 54       	subi	r28, 0x4A	; 74
    1748:	de 4f       	sbci	r29, 0xFE	; 254
    174a:	28 81       	ld	r18, Y
    174c:	c6 5b       	subi	r28, 0xB6	; 182
    174e:	d1 40       	sbci	r29, 0x01	; 1
    1750:	22 23       	and	r18, r18
    1752:	31 f6       	brne	.-116    	; 0x16e0 <main+0xb1e>
    1754:	8b e0       	ldi	r24, 0x0B	; 11
    1756:	c0 55       	subi	r28, 0x50	; 80
    1758:	de 4f       	sbci	r29, 0xFE	; 254
    175a:	e8 81       	ld	r30, Y
    175c:	f9 81       	ldd	r31, Y+1	; 0x01
    175e:	c0 5b       	subi	r28, 0xB0	; 176
    1760:	d1 40       	sbci	r29, 0x01	; 1
    1762:	36 96       	adiw	r30, 0x06	; 6
    1764:	df 01       	movw	r26, r30
    1766:	28 2f       	mov	r18, r24
    1768:	1d 92       	st	X+, r1
    176a:	2a 95       	dec	r18
    176c:	e9 f7       	brne	.-6      	; 0x1768 <main+0xba6>
    176e:	ce 01       	movw	r24, r28
    1770:	88 59       	subi	r24, 0x98	; 152
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	85 55       	subi	r24, 0x55	; 85
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	c9 54       	subi	r28, 0x49	; 73
    177a:	de 4f       	sbci	r29, 0xFE	; 254
    177c:	99 83       	std	Y+1, r25	; 0x01
    177e:	88 83       	st	Y, r24
    1780:	c7 5b       	subi	r28, 0xB7	; 183
    1782:	d1 40       	sbci	r29, 0x01	; 1
    1784:	83 e4       	ldi	r24, 0x43	; 67
    1786:	94 e0       	ldi	r25, 0x04	; 4
    1788:	c7 54       	subi	r28, 0x47	; 71
    178a:	de 4f       	sbci	r29, 0xFE	; 254
    178c:	99 83       	std	Y+1, r25	; 0x01
    178e:	88 83       	st	Y, r24
    1790:	c9 5b       	subi	r28, 0xB9	; 185
    1792:	d1 40       	sbci	r29, 0x01	; 1
    1794:	95 e0       	ldi	r25, 0x05	; 5
    1796:	c5 54       	subi	r28, 0x45	; 69
    1798:	de 4f       	sbci	r29, 0xFE	; 254
    179a:	98 83       	st	Y, r25
    179c:	cb 5b       	subi	r28, 0xBB	; 187
    179e:	d1 40       	sbci	r29, 0x01	; 1
    17a0:	c7 54       	subi	r28, 0x47	; 71
    17a2:	de 4f       	sbci	r29, 0xFE	; 254
    17a4:	a8 81       	ld	r26, Y
    17a6:	b9 81       	ldd	r27, Y+1	; 0x01
    17a8:	c9 5b       	subi	r28, 0xB9	; 185
    17aa:	d1 40       	sbci	r29, 0x01	; 1
    17ac:	0c 90       	ld	r0, X
    17ae:	c7 54       	subi	r28, 0x47	; 71
    17b0:	de 4f       	sbci	r29, 0xFE	; 254
    17b2:	e8 81       	ld	r30, Y
    17b4:	f9 81       	ldd	r31, Y+1	; 0x01
    17b6:	c9 5b       	subi	r28, 0xB9	; 185
    17b8:	d1 40       	sbci	r29, 0x01	; 1
    17ba:	31 96       	adiw	r30, 0x01	; 1
    17bc:	c7 54       	subi	r28, 0x47	; 71
    17be:	de 4f       	sbci	r29, 0xFE	; 254
    17c0:	f9 83       	std	Y+1, r31	; 0x01
    17c2:	e8 83       	st	Y, r30
    17c4:	c9 5b       	subi	r28, 0xB9	; 185
    17c6:	d1 40       	sbci	r29, 0x01	; 1
    17c8:	c9 54       	subi	r28, 0x49	; 73
    17ca:	de 4f       	sbci	r29, 0xFE	; 254
    17cc:	a8 81       	ld	r26, Y
    17ce:	b9 81       	ldd	r27, Y+1	; 0x01
    17d0:	c7 5b       	subi	r28, 0xB7	; 183
    17d2:	d1 40       	sbci	r29, 0x01	; 1
    17d4:	0c 92       	st	X, r0
    17d6:	c9 54       	subi	r28, 0x49	; 73
    17d8:	de 4f       	sbci	r29, 0xFE	; 254
    17da:	e8 81       	ld	r30, Y
    17dc:	f9 81       	ldd	r31, Y+1	; 0x01
    17de:	c7 5b       	subi	r28, 0xB7	; 183
    17e0:	d1 40       	sbci	r29, 0x01	; 1
    17e2:	31 96       	adiw	r30, 0x01	; 1
    17e4:	c9 54       	subi	r28, 0x49	; 73
    17e6:	de 4f       	sbci	r29, 0xFE	; 254
    17e8:	f9 83       	std	Y+1, r31	; 0x01
    17ea:	e8 83       	st	Y, r30
    17ec:	c7 5b       	subi	r28, 0xB7	; 183
    17ee:	d1 40       	sbci	r29, 0x01	; 1
    17f0:	c5 54       	subi	r28, 0x45	; 69
    17f2:	de 4f       	sbci	r29, 0xFE	; 254
    17f4:	f8 81       	ld	r31, Y
    17f6:	cb 5b       	subi	r28, 0xBB	; 187
    17f8:	d1 40       	sbci	r29, 0x01	; 1
    17fa:	f1 50       	subi	r31, 0x01	; 1
    17fc:	c5 54       	subi	r28, 0x45	; 69
    17fe:	de 4f       	sbci	r29, 0xFE	; 254
    1800:	f8 83       	st	Y, r31
    1802:	cb 5b       	subi	r28, 0xBB	; 187
    1804:	d1 40       	sbci	r29, 0x01	; 1
    1806:	c5 54       	subi	r28, 0x45	; 69
    1808:	de 4f       	sbci	r29, 0xFE	; 254
    180a:	28 81       	ld	r18, Y
    180c:	cb 5b       	subi	r28, 0xBB	; 187
    180e:	d1 40       	sbci	r29, 0x01	; 1
    1810:	22 23       	and	r18, r18
    1812:	31 f6       	brne	.-116    	; 0x17a0 <main+0xbde>
    1814:	ce 01       	movw	r24, r28
    1816:	88 59       	subi	r24, 0x98	; 152
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	dc 01       	movw	r26, r24
    181c:	a0 55       	subi	r26, 0x50	; 80
    181e:	bf 4f       	sbci	r27, 0xFF	; 255
    1820:	c4 54       	subi	r28, 0x44	; 68
    1822:	de 4f       	sbci	r29, 0xFE	; 254
    1824:	b9 83       	std	Y+1, r27	; 0x01
    1826:	a8 83       	st	Y, r26
    1828:	cc 5b       	subi	r28, 0xBC	; 188
    182a:	d1 40       	sbci	r29, 0x01	; 1
    182c:	c4 54       	subi	r28, 0x44	; 68
    182e:	de 4f       	sbci	r29, 0xFE	; 254
    1830:	e8 81       	ld	r30, Y
    1832:	f9 81       	ldd	r31, Y+1	; 0x01
    1834:	cc 5b       	subi	r28, 0xBC	; 188
    1836:	d1 40       	sbci	r29, 0x01	; 1
    1838:	c2 54       	subi	r28, 0x42	; 66
    183a:	de 4f       	sbci	r29, 0xFE	; 254
    183c:	f9 83       	std	Y+1, r31	; 0x01
    183e:	e8 83       	st	Y, r30
    1840:	ce 5b       	subi	r28, 0xBE	; 190
    1842:	d1 40       	sbci	r29, 0x01	; 1
    1844:	28 e4       	ldi	r18, 0x48	; 72
    1846:	34 e0       	ldi	r19, 0x04	; 4
    1848:	c0 54       	subi	r28, 0x40	; 64
    184a:	de 4f       	sbci	r29, 0xFE	; 254
    184c:	39 83       	std	Y+1, r19	; 0x01
    184e:	28 83       	st	Y, r18
    1850:	c0 5c       	subi	r28, 0xC0	; 192
    1852:	d1 40       	sbci	r29, 0x01	; 1
    1854:	36 e0       	ldi	r19, 0x06	; 6
    1856:	ce 53       	subi	r28, 0x3E	; 62
    1858:	de 4f       	sbci	r29, 0xFE	; 254
    185a:	38 83       	st	Y, r19
    185c:	c2 5c       	subi	r28, 0xC2	; 194
    185e:	d1 40       	sbci	r29, 0x01	; 1
    1860:	c0 54       	subi	r28, 0x40	; 64
    1862:	de 4f       	sbci	r29, 0xFE	; 254
    1864:	a8 81       	ld	r26, Y
    1866:	b9 81       	ldd	r27, Y+1	; 0x01
    1868:	c0 5c       	subi	r28, 0xC0	; 192
    186a:	d1 40       	sbci	r29, 0x01	; 1
    186c:	0c 90       	ld	r0, X
    186e:	c0 54       	subi	r28, 0x40	; 64
    1870:	de 4f       	sbci	r29, 0xFE	; 254
    1872:	e8 81       	ld	r30, Y
    1874:	f9 81       	ldd	r31, Y+1	; 0x01
    1876:	c0 5c       	subi	r28, 0xC0	; 192
    1878:	d1 40       	sbci	r29, 0x01	; 1
    187a:	31 96       	adiw	r30, 0x01	; 1
    187c:	c0 54       	subi	r28, 0x40	; 64
    187e:	de 4f       	sbci	r29, 0xFE	; 254
    1880:	f9 83       	std	Y+1, r31	; 0x01
    1882:	e8 83       	st	Y, r30
    1884:	c0 5c       	subi	r28, 0xC0	; 192
    1886:	d1 40       	sbci	r29, 0x01	; 1
    1888:	c2 54       	subi	r28, 0x42	; 66
    188a:	de 4f       	sbci	r29, 0xFE	; 254
    188c:	a8 81       	ld	r26, Y
    188e:	b9 81       	ldd	r27, Y+1	; 0x01
    1890:	ce 5b       	subi	r28, 0xBE	; 190
    1892:	d1 40       	sbci	r29, 0x01	; 1
    1894:	0c 92       	st	X, r0
    1896:	c2 54       	subi	r28, 0x42	; 66
    1898:	de 4f       	sbci	r29, 0xFE	; 254
    189a:	e8 81       	ld	r30, Y
    189c:	f9 81       	ldd	r31, Y+1	; 0x01
    189e:	ce 5b       	subi	r28, 0xBE	; 190
    18a0:	d1 40       	sbci	r29, 0x01	; 1
    18a2:	31 96       	adiw	r30, 0x01	; 1
    18a4:	c2 54       	subi	r28, 0x42	; 66
    18a6:	de 4f       	sbci	r29, 0xFE	; 254
    18a8:	f9 83       	std	Y+1, r31	; 0x01
    18aa:	e8 83       	st	Y, r30
    18ac:	ce 5b       	subi	r28, 0xBE	; 190
    18ae:	d1 40       	sbci	r29, 0x01	; 1
    18b0:	ce 53       	subi	r28, 0x3E	; 62
    18b2:	de 4f       	sbci	r29, 0xFE	; 254
    18b4:	f8 81       	ld	r31, Y
    18b6:	c2 5c       	subi	r28, 0xC2	; 194
    18b8:	d1 40       	sbci	r29, 0x01	; 1
    18ba:	f1 50       	subi	r31, 0x01	; 1
    18bc:	ce 53       	subi	r28, 0x3E	; 62
    18be:	de 4f       	sbci	r29, 0xFE	; 254
    18c0:	f8 83       	st	Y, r31
    18c2:	c2 5c       	subi	r28, 0xC2	; 194
    18c4:	d1 40       	sbci	r29, 0x01	; 1
    18c6:	ce 53       	subi	r28, 0x3E	; 62
    18c8:	de 4f       	sbci	r29, 0xFE	; 254
    18ca:	28 81       	ld	r18, Y
    18cc:	c2 5c       	subi	r28, 0xC2	; 194
    18ce:	d1 40       	sbci	r29, 0x01	; 1
    18d0:	22 23       	and	r18, r18
    18d2:	31 f6       	brne	.-116    	; 0x1860 <main+0xc9e>
    18d4:	8b e0       	ldi	r24, 0x0B	; 11
    18d6:	c4 54       	subi	r28, 0x44	; 68
    18d8:	de 4f       	sbci	r29, 0xFE	; 254
    18da:	e8 81       	ld	r30, Y
    18dc:	f9 81       	ldd	r31, Y+1	; 0x01
    18de:	cc 5b       	subi	r28, 0xBC	; 188
    18e0:	d1 40       	sbci	r29, 0x01	; 1
    18e2:	36 96       	adiw	r30, 0x06	; 6
    18e4:	df 01       	movw	r26, r30
    18e6:	28 2f       	mov	r18, r24
    18e8:	1d 92       	st	X+, r1
    18ea:	2a 95       	dec	r18
    18ec:	e9 f7       	brne	.-6      	; 0x18e8 <main+0xd26>
    18ee:	ce 01       	movw	r24, r28
    18f0:	88 59       	subi	r24, 0x98	; 152
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	8f 53       	subi	r24, 0x3F	; 63
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	cd 53       	subi	r28, 0x3D	; 61
    18fa:	de 4f       	sbci	r29, 0xFE	; 254
    18fc:	99 83       	std	Y+1, r25	; 0x01
    18fe:	88 83       	st	Y, r24
    1900:	c3 5c       	subi	r28, 0xC3	; 195
    1902:	d1 40       	sbci	r29, 0x01	; 1
    1904:	89 e5       	ldi	r24, 0x59	; 89
    1906:	94 e0       	ldi	r25, 0x04	; 4
    1908:	cb 53       	subi	r28, 0x3B	; 59
    190a:	de 4f       	sbci	r29, 0xFE	; 254
    190c:	99 83       	std	Y+1, r25	; 0x01
    190e:	88 83       	st	Y, r24
    1910:	c5 5c       	subi	r28, 0xC5	; 197
    1912:	d1 40       	sbci	r29, 0x01	; 1
    1914:	95 e0       	ldi	r25, 0x05	; 5
    1916:	c9 53       	subi	r28, 0x39	; 57
    1918:	de 4f       	sbci	r29, 0xFE	; 254
    191a:	98 83       	st	Y, r25
    191c:	c7 5c       	subi	r28, 0xC7	; 199
    191e:	d1 40       	sbci	r29, 0x01	; 1
    1920:	cb 53       	subi	r28, 0x3B	; 59
    1922:	de 4f       	sbci	r29, 0xFE	; 254
    1924:	a8 81       	ld	r26, Y
    1926:	b9 81       	ldd	r27, Y+1	; 0x01
    1928:	c5 5c       	subi	r28, 0xC5	; 197
    192a:	d1 40       	sbci	r29, 0x01	; 1
    192c:	0c 90       	ld	r0, X
    192e:	cb 53       	subi	r28, 0x3B	; 59
    1930:	de 4f       	sbci	r29, 0xFE	; 254
    1932:	e8 81       	ld	r30, Y
    1934:	f9 81       	ldd	r31, Y+1	; 0x01
    1936:	c5 5c       	subi	r28, 0xC5	; 197
    1938:	d1 40       	sbci	r29, 0x01	; 1
    193a:	31 96       	adiw	r30, 0x01	; 1
    193c:	cb 53       	subi	r28, 0x3B	; 59
    193e:	de 4f       	sbci	r29, 0xFE	; 254
    1940:	f9 83       	std	Y+1, r31	; 0x01
    1942:	e8 83       	st	Y, r30
    1944:	c5 5c       	subi	r28, 0xC5	; 197
    1946:	d1 40       	sbci	r29, 0x01	; 1
    1948:	cd 53       	subi	r28, 0x3D	; 61
    194a:	de 4f       	sbci	r29, 0xFE	; 254
    194c:	a8 81       	ld	r26, Y
    194e:	b9 81       	ldd	r27, Y+1	; 0x01
    1950:	c3 5c       	subi	r28, 0xC3	; 195
    1952:	d1 40       	sbci	r29, 0x01	; 1
    1954:	0c 92       	st	X, r0
    1956:	cd 53       	subi	r28, 0x3D	; 61
    1958:	de 4f       	sbci	r29, 0xFE	; 254
    195a:	e8 81       	ld	r30, Y
    195c:	f9 81       	ldd	r31, Y+1	; 0x01
    195e:	c3 5c       	subi	r28, 0xC3	; 195
    1960:	d1 40       	sbci	r29, 0x01	; 1
    1962:	31 96       	adiw	r30, 0x01	; 1
    1964:	cd 53       	subi	r28, 0x3D	; 61
    1966:	de 4f       	sbci	r29, 0xFE	; 254
    1968:	f9 83       	std	Y+1, r31	; 0x01
    196a:	e8 83       	st	Y, r30
    196c:	c3 5c       	subi	r28, 0xC3	; 195
    196e:	d1 40       	sbci	r29, 0x01	; 1
    1970:	c9 53       	subi	r28, 0x39	; 57
    1972:	de 4f       	sbci	r29, 0xFE	; 254
    1974:	f8 81       	ld	r31, Y
    1976:	c7 5c       	subi	r28, 0xC7	; 199
    1978:	d1 40       	sbci	r29, 0x01	; 1
    197a:	f1 50       	subi	r31, 0x01	; 1
    197c:	c9 53       	subi	r28, 0x39	; 57
    197e:	de 4f       	sbci	r29, 0xFE	; 254
    1980:	f8 83       	st	Y, r31
    1982:	c7 5c       	subi	r28, 0xC7	; 199
    1984:	d1 40       	sbci	r29, 0x01	; 1
    1986:	c9 53       	subi	r28, 0x39	; 57
    1988:	de 4f       	sbci	r29, 0xFE	; 254
    198a:	28 81       	ld	r18, Y
    198c:	c7 5c       	subi	r28, 0xC7	; 199
    198e:	d1 40       	sbci	r29, 0x01	; 1
    1990:	22 23       	and	r18, r18
    1992:	31 f6       	brne	.-116    	; 0x1920 <main+0xd5e>
    1994:	ce 01       	movw	r24, r28
    1996:	88 59       	subi	r24, 0x98	; 152
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	dc 01       	movw	r26, r24
    199c:	aa 53       	subi	r26, 0x3A	; 58
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	c8 53       	subi	r28, 0x38	; 56
    19a2:	de 4f       	sbci	r29, 0xFE	; 254
    19a4:	b9 83       	std	Y+1, r27	; 0x01
    19a6:	a8 83       	st	Y, r26
    19a8:	c8 5c       	subi	r28, 0xC8	; 200
    19aa:	d1 40       	sbci	r29, 0x01	; 1
    19ac:	c8 53       	subi	r28, 0x38	; 56
    19ae:	de 4f       	sbci	r29, 0xFE	; 254
    19b0:	e8 81       	ld	r30, Y
    19b2:	f9 81       	ldd	r31, Y+1	; 0x01
    19b4:	c8 5c       	subi	r28, 0xC8	; 200
    19b6:	d1 40       	sbci	r29, 0x01	; 1
    19b8:	c6 53       	subi	r28, 0x36	; 54
    19ba:	de 4f       	sbci	r29, 0xFE	; 254
    19bc:	f9 83       	std	Y+1, r31	; 0x01
    19be:	e8 83       	st	Y, r30
    19c0:	ca 5c       	subi	r28, 0xCA	; 202
    19c2:	d1 40       	sbci	r29, 0x01	; 1
    19c4:	2e e5       	ldi	r18, 0x5E	; 94
    19c6:	34 e0       	ldi	r19, 0x04	; 4
    19c8:	c4 53       	subi	r28, 0x34	; 52
    19ca:	de 4f       	sbci	r29, 0xFE	; 254
    19cc:	39 83       	std	Y+1, r19	; 0x01
    19ce:	28 83       	st	Y, r18
    19d0:	cc 5c       	subi	r28, 0xCC	; 204
    19d2:	d1 40       	sbci	r29, 0x01	; 1
    19d4:	36 e0       	ldi	r19, 0x06	; 6
    19d6:	c2 53       	subi	r28, 0x32	; 50
    19d8:	de 4f       	sbci	r29, 0xFE	; 254
    19da:	38 83       	st	Y, r19
    19dc:	ce 5c       	subi	r28, 0xCE	; 206
    19de:	d1 40       	sbci	r29, 0x01	; 1
    19e0:	c4 53       	subi	r28, 0x34	; 52
    19e2:	de 4f       	sbci	r29, 0xFE	; 254
    19e4:	a8 81       	ld	r26, Y
    19e6:	b9 81       	ldd	r27, Y+1	; 0x01
    19e8:	cc 5c       	subi	r28, 0xCC	; 204
    19ea:	d1 40       	sbci	r29, 0x01	; 1
    19ec:	0c 90       	ld	r0, X
    19ee:	c4 53       	subi	r28, 0x34	; 52
    19f0:	de 4f       	sbci	r29, 0xFE	; 254
    19f2:	e8 81       	ld	r30, Y
    19f4:	f9 81       	ldd	r31, Y+1	; 0x01
    19f6:	cc 5c       	subi	r28, 0xCC	; 204
    19f8:	d1 40       	sbci	r29, 0x01	; 1
    19fa:	31 96       	adiw	r30, 0x01	; 1
    19fc:	c4 53       	subi	r28, 0x34	; 52
    19fe:	de 4f       	sbci	r29, 0xFE	; 254
    1a00:	f9 83       	std	Y+1, r31	; 0x01
    1a02:	e8 83       	st	Y, r30
    1a04:	cc 5c       	subi	r28, 0xCC	; 204
    1a06:	d1 40       	sbci	r29, 0x01	; 1
    1a08:	c6 53       	subi	r28, 0x36	; 54
    1a0a:	de 4f       	sbci	r29, 0xFE	; 254
    1a0c:	a8 81       	ld	r26, Y
    1a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a10:	ca 5c       	subi	r28, 0xCA	; 202
    1a12:	d1 40       	sbci	r29, 0x01	; 1
    1a14:	0c 92       	st	X, r0
    1a16:	c6 53       	subi	r28, 0x36	; 54
    1a18:	de 4f       	sbci	r29, 0xFE	; 254
    1a1a:	e8 81       	ld	r30, Y
    1a1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a1e:	ca 5c       	subi	r28, 0xCA	; 202
    1a20:	d1 40       	sbci	r29, 0x01	; 1
    1a22:	31 96       	adiw	r30, 0x01	; 1
    1a24:	c6 53       	subi	r28, 0x36	; 54
    1a26:	de 4f       	sbci	r29, 0xFE	; 254
    1a28:	f9 83       	std	Y+1, r31	; 0x01
    1a2a:	e8 83       	st	Y, r30
    1a2c:	ca 5c       	subi	r28, 0xCA	; 202
    1a2e:	d1 40       	sbci	r29, 0x01	; 1
    1a30:	c2 53       	subi	r28, 0x32	; 50
    1a32:	de 4f       	sbci	r29, 0xFE	; 254
    1a34:	f8 81       	ld	r31, Y
    1a36:	ce 5c       	subi	r28, 0xCE	; 206
    1a38:	d1 40       	sbci	r29, 0x01	; 1
    1a3a:	f1 50       	subi	r31, 0x01	; 1
    1a3c:	c2 53       	subi	r28, 0x32	; 50
    1a3e:	de 4f       	sbci	r29, 0xFE	; 254
    1a40:	f8 83       	st	Y, r31
    1a42:	ce 5c       	subi	r28, 0xCE	; 206
    1a44:	d1 40       	sbci	r29, 0x01	; 1
    1a46:	c2 53       	subi	r28, 0x32	; 50
    1a48:	de 4f       	sbci	r29, 0xFE	; 254
    1a4a:	28 81       	ld	r18, Y
    1a4c:	ce 5c       	subi	r28, 0xCE	; 206
    1a4e:	d1 40       	sbci	r29, 0x01	; 1
    1a50:	22 23       	and	r18, r18
    1a52:	31 f6       	brne	.-116    	; 0x19e0 <main+0xe1e>
    1a54:	8b e0       	ldi	r24, 0x0B	; 11
    1a56:	c8 53       	subi	r28, 0x38	; 56
    1a58:	de 4f       	sbci	r29, 0xFE	; 254
    1a5a:	e8 81       	ld	r30, Y
    1a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5e:	c8 5c       	subi	r28, 0xC8	; 200
    1a60:	d1 40       	sbci	r29, 0x01	; 1
    1a62:	36 96       	adiw	r30, 0x06	; 6
    1a64:	df 01       	movw	r26, r30
    1a66:	28 2f       	mov	r18, r24
    1a68:	1d 92       	st	X+, r1
    1a6a:	2a 95       	dec	r18
    1a6c:	e9 f7       	brne	.-6      	; 0x1a68 <main+0xea6>
    1a6e:	ce 01       	movw	r24, r28
    1a70:	88 59       	subi	r24, 0x98	; 152
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	89 52       	subi	r24, 0x29	; 41
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	c1 53       	subi	r28, 0x31	; 49
    1a7a:	de 4f       	sbci	r29, 0xFE	; 254
    1a7c:	99 83       	std	Y+1, r25	; 0x01
    1a7e:	88 83       	st	Y, r24
    1a80:	cf 5c       	subi	r28, 0xCF	; 207
    1a82:	d1 40       	sbci	r29, 0x01	; 1
    1a84:	8f e6       	ldi	r24, 0x6F	; 111
    1a86:	94 e0       	ldi	r25, 0x04	; 4
    1a88:	cf 52       	subi	r28, 0x2F	; 47
    1a8a:	de 4f       	sbci	r29, 0xFE	; 254
    1a8c:	99 83       	std	Y+1, r25	; 0x01
    1a8e:	88 83       	st	Y, r24
    1a90:	c1 5d       	subi	r28, 0xD1	; 209
    1a92:	d1 40       	sbci	r29, 0x01	; 1
    1a94:	95 e0       	ldi	r25, 0x05	; 5
    1a96:	cd 52       	subi	r28, 0x2D	; 45
    1a98:	de 4f       	sbci	r29, 0xFE	; 254
    1a9a:	98 83       	st	Y, r25
    1a9c:	c3 5d       	subi	r28, 0xD3	; 211
    1a9e:	d1 40       	sbci	r29, 0x01	; 1
    1aa0:	cf 52       	subi	r28, 0x2F	; 47
    1aa2:	de 4f       	sbci	r29, 0xFE	; 254
    1aa4:	a8 81       	ld	r26, Y
    1aa6:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa8:	c1 5d       	subi	r28, 0xD1	; 209
    1aaa:	d1 40       	sbci	r29, 0x01	; 1
    1aac:	0c 90       	ld	r0, X
    1aae:	cf 52       	subi	r28, 0x2F	; 47
    1ab0:	de 4f       	sbci	r29, 0xFE	; 254
    1ab2:	e8 81       	ld	r30, Y
    1ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab6:	c1 5d       	subi	r28, 0xD1	; 209
    1ab8:	d1 40       	sbci	r29, 0x01	; 1
    1aba:	31 96       	adiw	r30, 0x01	; 1
    1abc:	cf 52       	subi	r28, 0x2F	; 47
    1abe:	de 4f       	sbci	r29, 0xFE	; 254
    1ac0:	f9 83       	std	Y+1, r31	; 0x01
    1ac2:	e8 83       	st	Y, r30
    1ac4:	c1 5d       	subi	r28, 0xD1	; 209
    1ac6:	d1 40       	sbci	r29, 0x01	; 1
    1ac8:	c1 53       	subi	r28, 0x31	; 49
    1aca:	de 4f       	sbci	r29, 0xFE	; 254
    1acc:	a8 81       	ld	r26, Y
    1ace:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad0:	cf 5c       	subi	r28, 0xCF	; 207
    1ad2:	d1 40       	sbci	r29, 0x01	; 1
    1ad4:	0c 92       	st	X, r0
    1ad6:	c1 53       	subi	r28, 0x31	; 49
    1ad8:	de 4f       	sbci	r29, 0xFE	; 254
    1ada:	e8 81       	ld	r30, Y
    1adc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ade:	cf 5c       	subi	r28, 0xCF	; 207
    1ae0:	d1 40       	sbci	r29, 0x01	; 1
    1ae2:	31 96       	adiw	r30, 0x01	; 1
    1ae4:	c1 53       	subi	r28, 0x31	; 49
    1ae6:	de 4f       	sbci	r29, 0xFE	; 254
    1ae8:	f9 83       	std	Y+1, r31	; 0x01
    1aea:	e8 83       	st	Y, r30
    1aec:	cf 5c       	subi	r28, 0xCF	; 207
    1aee:	d1 40       	sbci	r29, 0x01	; 1
    1af0:	cd 52       	subi	r28, 0x2D	; 45
    1af2:	de 4f       	sbci	r29, 0xFE	; 254
    1af4:	f8 81       	ld	r31, Y
    1af6:	c3 5d       	subi	r28, 0xD3	; 211
    1af8:	d1 40       	sbci	r29, 0x01	; 1
    1afa:	f1 50       	subi	r31, 0x01	; 1
    1afc:	cd 52       	subi	r28, 0x2D	; 45
    1afe:	de 4f       	sbci	r29, 0xFE	; 254
    1b00:	f8 83       	st	Y, r31
    1b02:	c3 5d       	subi	r28, 0xD3	; 211
    1b04:	d1 40       	sbci	r29, 0x01	; 1
    1b06:	cd 52       	subi	r28, 0x2D	; 45
    1b08:	de 4f       	sbci	r29, 0xFE	; 254
    1b0a:	28 81       	ld	r18, Y
    1b0c:	c3 5d       	subi	r28, 0xD3	; 211
    1b0e:	d1 40       	sbci	r29, 0x01	; 1
    1b10:	22 23       	and	r18, r18
    1b12:	31 f6       	brne	.-116    	; 0x1aa0 <main+0xede>
	// Buffer to store user input
	char enteredUsername[USERNAME_SIZE + 1];
	char enteredPassword[PASSWORD_SIZE + 1];

	// Send a welcome message
	MUART_voidSendStringSyncNonBlocking("Welcome to the Smart Home System!\r\n\r\n");
    1b14:	80 e6       	ldi	r24, 0x60	; 96
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
	HLCD_voidDisplayString("Welcome Home...");
    1b1c:	86 e8       	ldi	r24, 0x86	; 134
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>

	// Loop until the correct credentials are entered or maximum attempts reached
	MUART_voidSendStringSyncNonBlocking("Enter username: ");
    1b24:	86 e9       	ldi	r24, 0x96	; 150
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidReceiveStringSync(enteredUsername);
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	8c 5b       	subi	r24, 0xBC	; 188
    1b30:	9e 4f       	sbci	r25, 0xFE	; 254
    1b32:	0e 94 99 23 	call	0x4732	; 0x4732 <MUART_voidReceiveStringSync>

	MUART_voidSendStringSyncNonBlocking("\r\nEnter password: ");
    1b36:	87 ea       	ldi	r24, 0xA7	; 167
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidReceiveStringSync(enteredPassword);
    1b3e:	ce 01       	movw	r24, r28
    1b40:	8b 5a       	subi	r24, 0xAB	; 171
    1b42:	9e 4f       	sbci	r25, 0xFE	; 254
    1b44:	0e 94 99 23 	call	0x4732	; 0x4732 <MUART_voidReceiveStringSync>

	// Check if the entered credentials are correct
	for (int i = 0; i < MAX_USERS; ++i) {
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ed 59       	subi	r30, 0x9D	; 157
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	11 82       	std	Z+1, r1	; 0x01
    1b50:	10 82       	st	Z, r1
    1b52:	9a c5       	rjmp	.+2868   	; 0x2688 <main+0x1ac6>
		if (VerifyCredentials(enteredUsername, enteredPassword, &validUsers[i])) {
    1b54:	fe 01       	movw	r30, r28
    1b56:	ed 59       	subi	r30, 0x9D	; 157
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	40 81       	ld	r20, Z
    1b5c:	51 81       	ldd	r21, Z+1	; 0x01
    1b5e:	ca 01       	movw	r24, r20
    1b60:	9c 01       	movw	r18, r24
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	24 0f       	add	r18, r20
    1b68:	35 1f       	adc	r19, r21
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	82 1b       	sub	r24, r18
    1b7a:	93 0b       	sbc	r25, r19
    1b7c:	84 0f       	add	r24, r20
    1b7e:	95 1f       	adc	r25, r21
    1b80:	9e 01       	movw	r18, r28
    1b82:	28 59       	subi	r18, 0x98	; 152
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	28 0f       	add	r18, r24
    1b88:	39 1f       	adc	r19, r25
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	8c 5b       	subi	r24, 0xBC	; 188
    1b8e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b90:	ae 01       	movw	r20, r28
    1b92:	4b 5a       	subi	r20, 0xAB	; 171
    1b94:	5e 4f       	sbci	r21, 0xFE	; 254
    1b96:	ba 01       	movw	r22, r20
    1b98:	a9 01       	movw	r20, r18
    1b9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <VerifyCredentials>
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <main+0xfe2>
    1ba2:	66 c5       	rjmp	.+2764   	; 0x2670 <main+0x1aae>
		while(1){
			MUART_voidSendStringSyncNonBlocking("\r\n");
    1ba4:	8a eb       	ldi	r24, 0xBA	; 186
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
			MUART_voidSendStringSyncNonBlocking("To Turn ON the FirstRoom Press 1\r\nTo Turn OFF the FirstRoom Press 2\r\n");
    1bac:	8d eb       	ldi	r24, 0xBD	; 189
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
			MUART_voidSendStringSyncNonBlocking("\r\nTo Turn ON the SecondRoom Press 3\r\nTo Turn OFF the SecondRoom Press 4\r\n");
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
			MUART_voidSendStringSyncNonBlocking("\r\nTo Turn ON the ThirdRoom Press 5\r\nTo Turn OFF the ThirdRoom Press 6\r\n");
    1bbc:	8d e4       	ldi	r24, 0x4D	; 77
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
			MUART_voidSendStringSyncNonBlocking("\r\nTo Turn ON the FourthRoom Press 7\r\nTo Turn OFF the FourthRoom Press 8\r\n");
    1bc4:	85 e9       	ldi	r24, 0x95	; 149
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
			MUART_voidSendStringSyncNonBlocking("\r\nTo Open The Door Press o or O\r\nTo Close The Door Press c or C\r\n\r\n");
    1bcc:	8f ed       	ldi	r24, 0xDF	; 223
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>

			HLCD_voidClearDisplay();
    1bd4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <HLCD_voidClearDisplay>
			local_u8ReceivedData = MUART_u8ReadByteSyncBlocking();
    1bd8:	0e 94 c7 23 	call	0x478e	; 0x478e <MUART_u8ReadByteSyncBlocking>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e9 59       	subi	r30, 0x99	; 153
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 83       	st	Z, r24

			switch(local_u8ReceivedData)
    1be4:	fe 01       	movw	r30, r28
    1be6:	e9 59       	subi	r30, 0x99	; 153
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	a8 2f       	mov	r26, r24
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	c6 5a       	subi	r28, 0xA6	; 166
    1bf2:	de 4f       	sbci	r29, 0xFE	; 254
    1bf4:	b9 83       	std	Y+1, r27	; 0x01
    1bf6:	a8 83       	st	Y, r26
    1bf8:	ca 55       	subi	r28, 0x5A	; 90
    1bfa:	d1 40       	sbci	r29, 0x01	; 1
    1bfc:	c6 5a       	subi	r28, 0xA6	; 166
    1bfe:	de 4f       	sbci	r29, 0xFE	; 254
    1c00:	e8 81       	ld	r30, Y
    1c02:	f9 81       	ldd	r31, Y+1	; 0x01
    1c04:	ca 55       	subi	r28, 0x5A	; 90
    1c06:	d1 40       	sbci	r29, 0x01	; 1
    1c08:	e6 33       	cpi	r30, 0x36	; 54
    1c0a:	f1 05       	cpc	r31, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <main+0x104e>
    1c0e:	14 c1       	rjmp	.+552    	; 0x1e38 <main+0x1276>
    1c10:	c6 5a       	subi	r28, 0xA6	; 166
    1c12:	de 4f       	sbci	r29, 0xFE	; 254
    1c14:	28 81       	ld	r18, Y
    1c16:	39 81       	ldd	r19, Y+1	; 0x01
    1c18:	ca 55       	subi	r28, 0x5A	; 90
    1c1a:	d1 40       	sbci	r29, 0x01	; 1
    1c1c:	27 33       	cpi	r18, 0x37	; 55
    1c1e:	31 05       	cpc	r19, r1
    1c20:	ec f5       	brge	.+122    	; 0x1c9c <main+0x10da>
    1c22:	c6 5a       	subi	r28, 0xA6	; 166
    1c24:	de 4f       	sbci	r29, 0xFE	; 254
    1c26:	88 81       	ld	r24, Y
    1c28:	99 81       	ldd	r25, Y+1	; 0x01
    1c2a:	ca 55       	subi	r28, 0x5A	; 90
    1c2c:	d1 40       	sbci	r29, 0x01	; 1
    1c2e:	83 33       	cpi	r24, 0x33	; 51
    1c30:	91 05       	cpc	r25, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <main+0x1074>
    1c34:	b0 c0       	rjmp	.+352    	; 0x1d96 <main+0x11d4>
    1c36:	c6 5a       	subi	r28, 0xA6	; 166
    1c38:	de 4f       	sbci	r29, 0xFE	; 254
    1c3a:	a8 81       	ld	r26, Y
    1c3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c3e:	ca 55       	subi	r28, 0x5A	; 90
    1c40:	d1 40       	sbci	r29, 0x01	; 1
    1c42:	a4 33       	cpi	r26, 0x34	; 52
    1c44:	b1 05       	cpc	r27, r1
    1c46:	ac f4       	brge	.+42     	; 0x1c72 <main+0x10b0>
    1c48:	c6 5a       	subi	r28, 0xA6	; 166
    1c4a:	de 4f       	sbci	r29, 0xFE	; 254
    1c4c:	e8 81       	ld	r30, Y
    1c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c50:	ca 55       	subi	r28, 0x5A	; 90
    1c52:	d1 40       	sbci	r29, 0x01	; 1
    1c54:	e1 33       	cpi	r30, 0x31	; 49
    1c56:	f1 05       	cpc	r31, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <main+0x109a>
    1c5a:	67 c0       	rjmp	.+206    	; 0x1d2a <main+0x1168>
    1c5c:	c6 5a       	subi	r28, 0xA6	; 166
    1c5e:	de 4f       	sbci	r29, 0xFE	; 254
    1c60:	28 81       	ld	r18, Y
    1c62:	39 81       	ldd	r19, Y+1	; 0x01
    1c64:	ca 55       	subi	r28, 0x5A	; 90
    1c66:	d1 40       	sbci	r29, 0x01	; 1
    1c68:	22 33       	cpi	r18, 0x32	; 50
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <main+0x10ae>
    1c6e:	78 c0       	rjmp	.+240    	; 0x1d60 <main+0x119e>
    1c70:	6a c1       	rjmp	.+724    	; 0x1f46 <main+0x1384>
    1c72:	c6 5a       	subi	r28, 0xA6	; 166
    1c74:	de 4f       	sbci	r29, 0xFE	; 254
    1c76:	88 81       	ld	r24, Y
    1c78:	99 81       	ldd	r25, Y+1	; 0x01
    1c7a:	ca 55       	subi	r28, 0x5A	; 90
    1c7c:	d1 40       	sbci	r29, 0x01	; 1
    1c7e:	84 33       	cpi	r24, 0x34	; 52
    1c80:	91 05       	cpc	r25, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <main+0x10c4>
    1c84:	a3 c0       	rjmp	.+326    	; 0x1dcc <main+0x120a>
    1c86:	c6 5a       	subi	r28, 0xA6	; 166
    1c88:	de 4f       	sbci	r29, 0xFE	; 254
    1c8a:	a8 81       	ld	r26, Y
    1c8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c8e:	ca 55       	subi	r28, 0x5A	; 90
    1c90:	d1 40       	sbci	r29, 0x01	; 1
    1c92:	a5 33       	cpi	r26, 0x35	; 53
    1c94:	b1 05       	cpc	r27, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <main+0x10d8>
    1c98:	b4 c0       	rjmp	.+360    	; 0x1e02 <main+0x1240>
    1c9a:	55 c1       	rjmp	.+682    	; 0x1f46 <main+0x1384>
    1c9c:	c6 5a       	subi	r28, 0xA6	; 166
    1c9e:	de 4f       	sbci	r29, 0xFE	; 254
    1ca0:	e8 81       	ld	r30, Y
    1ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca4:	ca 55       	subi	r28, 0x5A	; 90
    1ca6:	d1 40       	sbci	r29, 0x01	; 1
    1ca8:	e3 34       	cpi	r30, 0x43	; 67
    1caa:	f1 05       	cpc	r31, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <main+0x10ee>
    1cae:	30 c1       	rjmp	.+608    	; 0x1f10 <main+0x134e>
    1cb0:	c6 5a       	subi	r28, 0xA6	; 166
    1cb2:	de 4f       	sbci	r29, 0xFE	; 254
    1cb4:	28 81       	ld	r18, Y
    1cb6:	39 81       	ldd	r19, Y+1	; 0x01
    1cb8:	ca 55       	subi	r28, 0x5A	; 90
    1cba:	d1 40       	sbci	r29, 0x01	; 1
    1cbc:	24 34       	cpi	r18, 0x44	; 68
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	ac f4       	brge	.+42     	; 0x1cec <main+0x112a>
    1cc2:	c6 5a       	subi	r28, 0xA6	; 166
    1cc4:	de 4f       	sbci	r29, 0xFE	; 254
    1cc6:	88 81       	ld	r24, Y
    1cc8:	99 81       	ldd	r25, Y+1	; 0x01
    1cca:	ca 55       	subi	r28, 0x5A	; 90
    1ccc:	d1 40       	sbci	r29, 0x01	; 1
    1cce:	87 33       	cpi	r24, 0x37	; 55
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <main+0x1114>
    1cd4:	cc c0       	rjmp	.+408    	; 0x1e6e <main+0x12ac>
    1cd6:	c6 5a       	subi	r28, 0xA6	; 166
    1cd8:	de 4f       	sbci	r29, 0xFE	; 254
    1cda:	a8 81       	ld	r26, Y
    1cdc:	b9 81       	ldd	r27, Y+1	; 0x01
    1cde:	ca 55       	subi	r28, 0x5A	; 90
    1ce0:	d1 40       	sbci	r29, 0x01	; 1
    1ce2:	a8 33       	cpi	r26, 0x38	; 56
    1ce4:	b1 05       	cpc	r27, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <main+0x1128>
    1ce8:	dd c0       	rjmp	.+442    	; 0x1ea4 <main+0x12e2>
    1cea:	2d c1       	rjmp	.+602    	; 0x1f46 <main+0x1384>
    1cec:	c6 5a       	subi	r28, 0xA6	; 166
    1cee:	de 4f       	sbci	r29, 0xFE	; 254
    1cf0:	e8 81       	ld	r30, Y
    1cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    1cf4:	ca 55       	subi	r28, 0x5A	; 90
    1cf6:	d1 40       	sbci	r29, 0x01	; 1
    1cf8:	e3 36       	cpi	r30, 0x63	; 99
    1cfa:	f1 05       	cpc	r31, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <main+0x113e>
    1cfe:	08 c1       	rjmp	.+528    	; 0x1f10 <main+0x134e>
    1d00:	c6 5a       	subi	r28, 0xA6	; 166
    1d02:	de 4f       	sbci	r29, 0xFE	; 254
    1d04:	28 81       	ld	r18, Y
    1d06:	39 81       	ldd	r19, Y+1	; 0x01
    1d08:	ca 55       	subi	r28, 0x5A	; 90
    1d0a:	d1 40       	sbci	r29, 0x01	; 1
    1d0c:	2f 36       	cpi	r18, 0x6F	; 111
    1d0e:	31 05       	cpc	r19, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <main+0x1152>
    1d12:	e3 c0       	rjmp	.+454    	; 0x1eda <main+0x1318>
    1d14:	c6 5a       	subi	r28, 0xA6	; 166
    1d16:	de 4f       	sbci	r29, 0xFE	; 254
    1d18:	88 81       	ld	r24, Y
    1d1a:	99 81       	ldd	r25, Y+1	; 0x01
    1d1c:	ca 55       	subi	r28, 0x5A	; 90
    1d1e:	d1 40       	sbci	r29, 0x01	; 1
    1d20:	8f 34       	cpi	r24, 0x4F	; 79
    1d22:	91 05       	cpc	r25, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <main+0x1166>
    1d26:	d9 c0       	rjmp	.+434    	; 0x1eda <main+0x1318>
    1d28:	0e c1       	rjmp	.+540    	; 0x1f46 <main+0x1384>
			{

            //first room
			case '1':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 59       	subi	r30, 0x99	; 153
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1d36:	83 e2       	ldi	r24, 0x23	; 35
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1d3e:	8a eb       	ldi	r24, 0xBA	; 186
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOn(DIO_PORTD, PIN2);
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HLED_voidTurnOn>
				MUART_voidSendStringSyncNonBlocking("Light ROOM1 ON\r\n");
    1d4e:	8b e3       	ldi	r24, 0x3B	; 59
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM1 ON");
    1d56:	8c e4       	ldi	r24, 0x4C	; 76
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1d5e:	22 cf       	rjmp	.-444    	; 0x1ba4 <main+0xfe2>
				break;
			case '2':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1d60:	fe 01       	movw	r30, r28
    1d62:	e9 59       	subi	r30, 0x99	; 153
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1d6c:	83 e2       	ldi	r24, 0x23	; 35
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1d74:	8a eb       	ldi	r24, 0xBA	; 186
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOff(DIO_PORTD, PIN2);
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <HLED_voidTurnOff>
				MUART_voidSendStringSyncNonBlocking("Light ROOM1 OFF\r\n");
    1d84:	8b e5       	ldi	r24, 0x5B	; 91
    1d86:	92 e0       	ldi	r25, 0x02	; 2
    1d88:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM2 OFF");
    1d8c:	8d e6       	ldi	r24, 0x6D	; 109
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1d94:	07 cf       	rjmp	.-498    	; 0x1ba4 <main+0xfe2>
			break;

			//second room
			case '3':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1d96:	fe 01       	movw	r30, r28
    1d98:	e9 59       	subi	r30, 0x99	; 153
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1da2:	83 e2       	ldi	r24, 0x23	; 35
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1daa:	8a eb       	ldi	r24, 0xBA	; 186
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOn(DIO_PORTD, PIN3);
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	63 e0       	ldi	r22, 0x03	; 3
    1db6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HLED_voidTurnOn>
				MUART_voidSendStringSyncNonBlocking("Light ROOM2 ON\r\n");
    1dba:	8d e7       	ldi	r24, 0x7D	; 125
    1dbc:	92 e0       	ldi	r25, 0x02	; 2
    1dbe:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM2 ON");
    1dc2:	8e e8       	ldi	r24, 0x8E	; 142
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1dca:	ec ce       	rjmp	.-552    	; 0x1ba4 <main+0xfe2>

			break;
			case '4':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e9 59       	subi	r30, 0x99	; 153
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1dd8:	83 e2       	ldi	r24, 0x23	; 35
    1dda:	92 e0       	ldi	r25, 0x02	; 2
    1ddc:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1de0:	8a eb       	ldi	r24, 0xBA	; 186
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOff(DIO_PORTD, PIN3);
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <HLED_voidTurnOff>
				MUART_voidSendStringSyncNonBlocking("Light ROOM2 OFF\r\n");
    1df0:	8d e9       	ldi	r24, 0x9D	; 157
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM2 OFF");
    1df8:	8d e6       	ldi	r24, 0x6D	; 109
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
    1dfc:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1e00:	d1 ce       	rjmp	.-606    	; 0x1ba4 <main+0xfe2>
			break;

			//third room
			case '5':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1e02:	fe 01       	movw	r30, r28
    1e04:	e9 59       	subi	r30, 0x99	; 153
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1e0e:	83 e2       	ldi	r24, 0x23	; 35
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1e16:	8a eb       	ldi	r24, 0xBA	; 186
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOn(DIO_PORTD, PIN4);
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HLED_voidTurnOn>
				MUART_voidSendStringSyncNonBlocking("Light ROOM3 ON\r\n");
    1e26:	8f ea       	ldi	r24, 0xAF	; 175
    1e28:	92 e0       	ldi	r25, 0x02	; 2
    1e2a:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM3 ON");
    1e2e:	80 ec       	ldi	r24, 0xC0	; 192
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1e36:	b6 ce       	rjmp	.-660    	; 0x1ba4 <main+0xfe2>

			break;
			case '6':


				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e9 59       	subi	r30, 0x99	; 153
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1e44:	83 e2       	ldi	r24, 0x23	; 35
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1e4c:	8a eb       	ldi	r24, 0xBA	; 186
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOff(DIO_PORTD, PIN4);
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	64 e0       	ldi	r22, 0x04	; 4
    1e58:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <HLED_voidTurnOff>
				MUART_voidSendStringSyncNonBlocking("Light ROOM3 OFF\r\n");
    1e5c:	8f ec       	ldi	r24, 0xCF	; 207
    1e5e:	92 e0       	ldi	r25, 0x02	; 2
    1e60:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM3 OFF");
    1e64:	81 ee       	ldi	r24, 0xE1	; 225
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1e6c:	9b ce       	rjmp	.-714    	; 0x1ba4 <main+0xfe2>
			break;

			//fourth room
			case '7':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 59       	subi	r30, 0x99	; 153
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1e7a:	83 e2       	ldi	r24, 0x23	; 35
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1e82:	8a eb       	ldi	r24, 0xBA	; 186
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOn(DIO_PORTD, PIN5);
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	65 e0       	ldi	r22, 0x05	; 5
    1e8e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HLED_voidTurnOn>
				MUART_voidSendStringSyncNonBlocking("Light ROOM4 ON\r\n");
    1e92:	81 ef       	ldi	r24, 0xF1	; 241
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM4 ON");
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	93 e0       	ldi	r25, 0x03	; 3
    1e9e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1ea2:	80 ce       	rjmp	.-768    	; 0x1ba4 <main+0xfe2>

			break;
			case '8':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e9 59       	subi	r30, 0x99	; 153
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1eb0:	83 e2       	ldi	r24, 0x23	; 35
    1eb2:	92 e0       	ldi	r25, 0x02	; 2
    1eb4:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1eb8:	8a eb       	ldi	r24, 0xBA	; 186
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLED_voidTurnOff(DIO_PORTD, PIN5);
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	65 e0       	ldi	r22, 0x05	; 5
    1ec4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <HLED_voidTurnOff>
				MUART_voidSendStringSyncNonBlocking("Light ROOM4 OFF\r\n");
    1ec8:	81 e1       	ldi	r24, 0x11	; 17
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Light ROOM4 OFF");
    1ed0:	83 e2       	ldi	r24, 0x23	; 35
    1ed2:	93 e0       	ldi	r25, 0x03	; 3
    1ed4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1ed8:	65 ce       	rjmp	.-822    	; 0x1ba4 <main+0xfe2>
			break;
			//the door
			case 'o':
			case 'O':

				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1eda:	fe 01       	movw	r30, r28
    1edc:	e9 59       	subi	r30, 0x99	; 153
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1ee6:	83 e2       	ldi	r24, 0x23	; 35
    1ee8:	92 e0       	ldi	r25, 0x02	; 2
    1eea:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1eee:	8a eb       	ldi	r24, 0xBA	; 186
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MTIMER1_voidSetOCR1AValue(1000);
    1ef6:	88 ee       	ldi	r24, 0xE8	; 232
    1ef8:	93 e0       	ldi	r25, 0x03	; 3
    1efa:	0e 94 c8 20 	call	0x4190	; 0x4190 <MTIMER1_voidSetOCR1AValue>
				MUART_voidSendStringSyncNonBlocking("Door Is Opened\r\n");
    1efe:	83 e3       	ldi	r24, 0x33	; 51
    1f00:	93 e0       	ldi	r25, 0x03	; 3
    1f02:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Door Is Opened");
    1f06:	84 e4       	ldi	r24, 0x44	; 68
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1f0e:	4a ce       	rjmp	.-876    	; 0x1ba4 <main+0xfe2>

			break;
			case 'c':
			case 'C':
				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1f10:	fe 01       	movw	r30, r28
    1f12:	e9 59       	subi	r30, 0x99	; 153
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n\r\nAccess Granted!\r\n\r\n");
    1f1c:	83 e2       	ldi	r24, 0x23	; 35
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1f24:	8a eb       	ldi	r24, 0xBA	; 186
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MTIMER1_voidSetOCR1AValue(2000);
    1f2c:	80 ed       	ldi	r24, 0xD0	; 208
    1f2e:	97 e0       	ldi	r25, 0x07	; 7
    1f30:	0e 94 c8 20 	call	0x4190	; 0x4190 <MTIMER1_voidSetOCR1AValue>
				MUART_voidSendStringSyncNonBlocking("Door Is Cloosed\r\n");
    1f34:	83 e5       	ldi	r24, 0x53	; 83
    1f36:	93 e0       	ldi	r25, 0x03	; 3
    1f38:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Door Is Cloosed");
    1f3c:	85 e6       	ldi	r24, 0x65	; 101
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <HLCD_voidDisplayString>
    1f44:	2f ce       	rjmp	.-930    	; 0x1ba4 <main+0xfe2>

			break;

			default:
			{
                MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_OUTPUT);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	63 e0       	ldi	r22, 0x03	; 3
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 c0 13 	call	0x2780	; 0x2780 <MDIO_voidSetPinDirection>
				MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    1f50:	fe 01       	movw	r30, r28
    1f52:	e9 59       	subi	r30, 0x99	; 153
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	0e 94 be 22 	call	0x457c	; 0x457c <MUART_voidSendByteSyncBlocking>
				MUART_voidSendStringSyncNonBlocking("\r\n");
    1f5c:	8a eb       	ldi	r24, 0xBA	; 186
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MUART_voidSendStringSyncNonBlocking("Its wrong chois pleas try again.\r\n");
    1f64:	85 e7       	ldi	r24, 0x75	; 117
    1f66:	93 e0       	ldi	r25, 0x03	; 3
    1f68:	0e 94 62 23 	call	0x46c4	; 0x46c4 <MUART_voidSendStringSyncNonBlocking>
				MTIMER0_voidSetOCR0Value(10000);
    1f6c:	80 e1       	ldi	r24, 0x10	; 16
    1f6e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
				MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_INPUT);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	63 e0       	ldi	r22, 0x03	; 3
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 c0 13 	call	0x2780	; 0x2780 <MDIO_voidSetPinDirection>
				attempts--;
    1f7c:	de 01       	movw	r26, r28
    1f7e:	ab 59       	subi	r26, 0x9B	; 155
    1f80:	bf 4f       	sbci	r27, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	eb 59       	subi	r30, 0x9B	; 155
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	8d 93       	st	X+, r24
    1f90:	9c 93       	st	X, r25
    1f92:	fe 01       	movw	r30, r28
    1f94:	e1 5a       	subi	r30, 0xA1	; 161
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a8 ec       	ldi	r26, 0xC8	; 200
    1f9e:	b3 e4       	ldi	r27, 0x43	; 67
    1fa0:	80 83       	st	Z, r24
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	a2 83       	std	Z+2, r26	; 0x02
    1fa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	8e 01       	movw	r16, r28
    1faa:	05 5a       	subi	r16, 0xA5	; 165
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e1 5a       	subi	r30, 0xA1	; 161
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	f8 01       	movw	r30, r16
    1fce:	80 83       	st	Z, r24
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	a2 83       	std	Z+2, r26	; 0x02
    1fd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e5 5a       	subi	r30, 0xA5	; 165
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	44 f4       	brge	.+16     	; 0x2004 <main+0x1442>
		__ticks = 1;
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 5a       	subi	r30, 0xA7	; 167
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
    2002:	64 c0       	rjmp	.+200    	; 0x20cc <main+0x150a>
	else if (__tmp > 65535)
    2004:	fe 01       	movw	r30, r28
    2006:	e5 5a       	subi	r30, 0xA5	; 165
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	60 81       	ld	r22, Z
    200c:	71 81       	ldd	r23, Z+1	; 0x01
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	93 81       	ldd	r25, Z+3	; 0x03
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	0c f0       	brlt	.+2      	; 0x2024 <main+0x1462>
    2022:	43 c0       	rjmp	.+134    	; 0x20aa <main+0x14e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	fe 01       	movw	r30, r28
    2026:	e1 5a       	subi	r30, 0xA1	; 161
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	8e 01       	movw	r16, r28
    2044:	07 5a       	subi	r16, 0xA7	; 167
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	f8 01       	movw	r30, r16
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
    205a:	1f c0       	rjmp	.+62     	; 0x209a <main+0x14d8>
    205c:	fe 01       	movw	r30, r28
    205e:	e9 5a       	subi	r30, 0xA9	; 169
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	88 ec       	ldi	r24, 0xC8	; 200
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    206a:	fe 01       	movw	r30, r28
    206c:	e9 5a       	subi	r30, 0xA9	; 169
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <main+0x14b2>
    2078:	fe 01       	movw	r30, r28
    207a:	e9 5a       	subi	r30, 0xA9	; 169
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	de 01       	movw	r26, r28
    2084:	a7 5a       	subi	r26, 0xA7	; 167
    2086:	bf 4f       	sbci	r27, 0xFF	; 255
    2088:	fe 01       	movw	r30, r28
    208a:	e7 5a       	subi	r30, 0xA7	; 167
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	11 96       	adiw	r26, 0x01	; 1
    2096:	9c 93       	st	X, r25
    2098:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	fe 01       	movw	r30, r28
    209c:	e7 5a       	subi	r30, 0xA7	; 167
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	d1 f6       	brne	.-76     	; 0x205c <main+0x149a>
    20a8:	27 c0       	rjmp	.+78     	; 0x20f8 <main+0x1536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	8e 01       	movw	r16, r28
    20ac:	07 5a       	subi	r16, 0xA7	; 167
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	e5 5a       	subi	r30, 0xA5	; 165
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	f8 01       	movw	r30, r16
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    20cc:	de 01       	movw	r26, r28
    20ce:	ab 5a       	subi	r26, 0xAB	; 171
    20d0:	bf 4f       	sbci	r27, 0xFF	; 255
    20d2:	fe 01       	movw	r30, r28
    20d4:	e7 5a       	subi	r30, 0xA7	; 167
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	8d 93       	st	X+, r24
    20de:	9c 93       	st	X, r25
    20e0:	fe 01       	movw	r30, r28
    20e2:	eb 5a       	subi	r30, 0xAB	; 171
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <main+0x1528>
    20ee:	fe 01       	movw	r30, r28
    20f0:	eb 5a       	subi	r30, 0xAB	; 171
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
			}

			_delay_ms(400);
			HLCD_voidClearDisplay();
    20f8:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <HLCD_voidClearDisplay>
	if (attempts == 0) {
    20fc:	fe 01       	movw	r30, r28
    20fe:	eb 59       	subi	r30, 0x9B	; 155
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	09 f0       	breq	.+2      	; 0x210c <main+0x154a>
    210a:	4c cd       	rjmp	.-1384   	; 0x1ba4 <main+0xfe2>
	    MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_OUTPUT);
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	63 e0       	ldi	r22, 0x03	; 3
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 c0 13 	call	0x2780	; 0x2780 <MDIO_voidSetPinDirection>
		MTIMER0_voidSetOCR0Value(200);
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
    211c:	fe 01       	movw	r30, r28
    211e:	ef 5a       	subi	r30, 0xAF	; 175
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a6 e9       	ldi	r26, 0x96	; 150
    2128:	b3 e4       	ldi	r27, 0x43	; 67
    212a:	80 83       	st	Z, r24
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	a2 83       	std	Z+2, r26	; 0x02
    2130:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	8e 01       	movw	r16, r28
    2134:	03 5b       	subi	r16, 0xB3	; 179
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	ef 5a       	subi	r30, 0xAF	; 175
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	f8 01       	movw	r30, r16
    2158:	80 83       	st	Z, r24
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	a2 83       	std	Z+2, r26	; 0x02
    215e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2160:	fe 01       	movw	r30, r28
    2162:	e3 5b       	subi	r30, 0xB3	; 179
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	44 f4       	brge	.+16     	; 0x218e <main+0x15cc>
		__ticks = 1;
    217e:	fe 01       	movw	r30, r28
    2180:	e5 5b       	subi	r30, 0xB5	; 181
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    218c:	64 c0       	rjmp	.+200    	; 0x2256 <main+0x1694>
	else if (__tmp > 65535)
    218e:	fe 01       	movw	r30, r28
    2190:	e3 5b       	subi	r30, 0xB3	; 179
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	0c f0       	brlt	.+2      	; 0x21ae <main+0x15ec>
    21ac:	43 c0       	rjmp	.+134    	; 0x2234 <main+0x1672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	fe 01       	movw	r30, r28
    21b0:	ef 5a       	subi	r30, 0xAF	; 175
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8e 01       	movw	r16, r28
    21ce:	05 5b       	subi	r16, 0xB5	; 181
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	1f c0       	rjmp	.+62     	; 0x2224 <main+0x1662>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e7 5b       	subi	r30, 0xB7	; 183
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	88 ec       	ldi	r24, 0xC8	; 200
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5b       	subi	r30, 0xB7	; 183
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <main+0x163c>
    2202:	fe 01       	movw	r30, r28
    2204:	e7 5b       	subi	r30, 0xB7	; 183
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	de 01       	movw	r26, r28
    220e:	a5 5b       	subi	r26, 0xB5	; 181
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	fe 01       	movw	r30, r28
    2214:	e5 5b       	subi	r30, 0xB5	; 181
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	9c 93       	st	X, r25
    2222:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	fe 01       	movw	r30, r28
    2226:	e5 5b       	subi	r30, 0xB5	; 181
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	d1 f6       	brne	.-76     	; 0x21e6 <main+0x1624>
    2232:	27 c0       	rjmp	.+78     	; 0x2282 <main+0x16c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	8e 01       	movw	r16, r28
    2236:	05 5b       	subi	r16, 0xB5	; 181
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e3 5b       	subi	r30, 0xB3	; 179
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	f8 01       	movw	r30, r16
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	de 01       	movw	r26, r28
    2258:	a9 5b       	subi	r26, 0xB9	; 185
    225a:	bf 4f       	sbci	r27, 0xFF	; 255
    225c:	fe 01       	movw	r30, r28
    225e:	e5 5b       	subi	r30, 0xB5	; 181
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	8d 93       	st	X+, r24
    2268:	9c 93       	st	X, r25
    226a:	fe 01       	movw	r30, r28
    226c:	e9 5b       	subi	r30, 0xB9	; 185
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <main+0x16b2>
    2278:	fe 01       	movw	r30, r28
    227a:	e9 5b       	subi	r30, 0xB9	; 185
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
		_delay_ms(300);
		MTIMER0_voidSetOCR0Value(0);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
    2288:	fe 01       	movw	r30, r28
    228a:	ed 5b       	subi	r30, 0xBD	; 189
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a6 e9       	ldi	r26, 0x96	; 150
    2294:	b3 e4       	ldi	r27, 0x43	; 67
    2296:	80 83       	st	Z, r24
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	a2 83       	std	Z+2, r26	; 0x02
    229c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	8e 01       	movw	r16, r28
    22a0:	01 5c       	subi	r16, 0xC1	; 193
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 5b       	subi	r30, 0xBD	; 189
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	82 81       	ldd	r24, Z+2	; 0x02
    22b0:	93 81       	ldd	r25, Z+3	; 0x03
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a ef       	ldi	r20, 0xFA	; 250
    22b8:	54 e4       	ldi	r21, 0x44	; 68
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	f8 01       	movw	r30, r16
    22c4:	80 83       	st	Z, r24
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	a2 83       	std	Z+2, r26	; 0x02
    22ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22cc:	fe 01       	movw	r30, r28
    22ce:	ff 96       	adiw	r30, 0x3f	; 63
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e8       	ldi	r20, 0x80	; 128
    22de:	5f e3       	ldi	r21, 0x3F	; 63
    22e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <main+0x1730>
		__ticks = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9e af       	std	Y+62, r25	; 0x3e
    22ee:	8d af       	std	Y+61, r24	; 0x3d
    22f0:	46 c0       	rjmp	.+140    	; 0x237e <main+0x17bc>
	else if (__tmp > 65535)
    22f2:	fe 01       	movw	r30, r28
    22f4:	ff 96       	adiw	r30, 0x3f	; 63
    22f6:	60 81       	ld	r22, Z
    22f8:	71 81       	ldd	r23, Z+1	; 0x01
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	93 81       	ldd	r25, Z+3	; 0x03
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	64 f5       	brge	.+88     	; 0x2366 <main+0x17a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	fe 01       	movw	r30, r28
    2310:	ed 5b       	subi	r30, 0xBD	; 189
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e af       	std	Y+62, r25	; 0x3e
    233a:	8d af       	std	Y+61, r24	; 0x3d
    233c:	0f c0       	rjmp	.+30     	; 0x235c <main+0x179a>
    233e:	88 ec       	ldi	r24, 0xC8	; 200
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9c af       	std	Y+60, r25	; 0x3c
    2344:	8b af       	std	Y+59, r24	; 0x3b
    2346:	8b ad       	ldd	r24, Y+59	; 0x3b
    2348:	9c ad       	ldd	r25, Y+60	; 0x3c
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <main+0x1788>
    234e:	9c af       	std	Y+60, r25	; 0x3c
    2350:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8d ad       	ldd	r24, Y+61	; 0x3d
    2354:	9e ad       	ldd	r25, Y+62	; 0x3e
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9e af       	std	Y+62, r25	; 0x3e
    235a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8d ad       	ldd	r24, Y+61	; 0x3d
    235e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <main+0x177c>
    2364:	16 c0       	rjmp	.+44     	; 0x2392 <main+0x17d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	fe 01       	movw	r30, r28
    2368:	ff 96       	adiw	r30, 0x3f	; 63
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e af       	std	Y+62, r25	; 0x3e
    237c:	8d af       	std	Y+61, r24	; 0x3d
    237e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2380:	9e ad       	ldd	r25, Y+62	; 0x3e
    2382:	9a af       	std	Y+58, r25	; 0x3a
    2384:	89 af       	std	Y+57, r24	; 0x39
    2386:	89 ad       	ldd	r24, Y+57	; 0x39
    2388:	9a ad       	ldd	r25, Y+58	; 0x3a
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <main+0x17c8>
    238e:	9a af       	std	Y+58, r25	; 0x3a
    2390:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(300);
		MTIMER0_voidSetOCR0Value(200);
    2392:	88 ec       	ldi	r24, 0xC8	; 200
    2394:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a6 e9       	ldi	r26, 0x96	; 150
    239e:	b3 e4       	ldi	r27, 0x43	; 67
    23a0:	8d ab       	std	Y+53, r24	; 0x35
    23a2:	9e ab       	std	Y+54, r25	; 0x36
    23a4:	af ab       	std	Y+55, r26	; 0x37
    23a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a8:	6d a9       	ldd	r22, Y+53	; 0x35
    23aa:	7e a9       	ldd	r23, Y+54	; 0x36
    23ac:	8f a9       	ldd	r24, Y+55	; 0x37
    23ae:	98 ad       	ldd	r25, Y+56	; 0x38
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4a ef       	ldi	r20, 0xFA	; 250
    23b6:	54 e4       	ldi	r21, 0x44	; 68
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	89 ab       	std	Y+49, r24	; 0x31
    23c2:	9a ab       	std	Y+50, r25	; 0x32
    23c4:	ab ab       	std	Y+51, r26	; 0x33
    23c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23c8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ca:	7a a9       	ldd	r23, Y+50	; 0x32
    23cc:	8b a9       	ldd	r24, Y+51	; 0x33
    23ce:	9c a9       	ldd	r25, Y+52	; 0x34
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e8       	ldi	r20, 0x80	; 128
    23d6:	5f e3       	ldi	r21, 0x3F	; 63
    23d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23dc:	88 23       	and	r24, r24
    23de:	2c f4       	brge	.+10     	; 0x23ea <main+0x1828>
		__ticks = 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	98 ab       	std	Y+48, r25	; 0x30
    23e6:	8f a7       	std	Y+47, r24	; 0x2f
    23e8:	3f c0       	rjmp	.+126    	; 0x2468 <main+0x18a6>
	else if (__tmp > 65535)
    23ea:	69 a9       	ldd	r22, Y+49	; 0x31
    23ec:	7a a9       	ldd	r23, Y+50	; 0x32
    23ee:	8b a9       	ldd	r24, Y+51	; 0x33
    23f0:	9c a9       	ldd	r25, Y+52	; 0x34
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	4c f5       	brge	.+82     	; 0x2454 <main+0x1892>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	6d a9       	ldd	r22, Y+53	; 0x35
    2404:	7e a9       	ldd	r23, Y+54	; 0x36
    2406:	8f a9       	ldd	r24, Y+55	; 0x37
    2408:	98 ad       	ldd	r25, Y+56	; 0x38
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 e4       	ldi	r21, 0x41	; 65
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	98 ab       	std	Y+48, r25	; 0x30
    2428:	8f a7       	std	Y+47, r24	; 0x2f
    242a:	0f c0       	rjmp	.+30     	; 0x244a <main+0x1888>
    242c:	88 ec       	ldi	r24, 0xC8	; 200
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9e a7       	std	Y+46, r25	; 0x2e
    2432:	8d a7       	std	Y+45, r24	; 0x2d
    2434:	8d a5       	ldd	r24, Y+45	; 0x2d
    2436:	9e a5       	ldd	r25, Y+46	; 0x2e
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <main+0x1876>
    243c:	9e a7       	std	Y+46, r25	; 0x2e
    243e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8f a5       	ldd	r24, Y+47	; 0x2f
    2442:	98 a9       	ldd	r25, Y+48	; 0x30
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8f a5       	ldd	r24, Y+47	; 0x2f
    244c:	98 a9       	ldd	r25, Y+48	; 0x30
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	69 f7       	brne	.-38     	; 0x242c <main+0x186a>
    2452:	14 c0       	rjmp	.+40     	; 0x247c <main+0x18ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	69 a9       	ldd	r22, Y+49	; 0x31
    2456:	7a a9       	ldd	r23, Y+50	; 0x32
    2458:	8b a9       	ldd	r24, Y+51	; 0x33
    245a:	9c a9       	ldd	r25, Y+52	; 0x34
    245c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	98 ab       	std	Y+48, r25	; 0x30
    2466:	8f a7       	std	Y+47, r24	; 0x2f
    2468:	8f a5       	ldd	r24, Y+47	; 0x2f
    246a:	98 a9       	ldd	r25, Y+48	; 0x30
    246c:	9c a7       	std	Y+44, r25	; 0x2c
    246e:	8b a7       	std	Y+43, r24	; 0x2b
    2470:	8b a5       	ldd	r24, Y+43	; 0x2b
    2472:	9c a5       	ldd	r25, Y+44	; 0x2c
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <main+0x18b2>
    2478:	9c a7       	std	Y+44, r25	; 0x2c
    247a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);
		MTIMER0_voidSetOCR0Value(0);
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a6 e9       	ldi	r26, 0x96	; 150
    2488:	b3 e4       	ldi	r27, 0x43	; 67
    248a:	8f a3       	std	Y+39, r24	; 0x27
    248c:	98 a7       	std	Y+40, r25	; 0x28
    248e:	a9 a7       	std	Y+41, r26	; 0x29
    2490:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6f a1       	ldd	r22, Y+39	; 0x27
    2494:	78 a5       	ldd	r23, Y+40	; 0x28
    2496:	89 a5       	ldd	r24, Y+41	; 0x29
    2498:	9a a5       	ldd	r25, Y+42	; 0x2a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8b a3       	std	Y+35, r24	; 0x23
    24ac:	9c a3       	std	Y+36, r25	; 0x24
    24ae:	ad a3       	std	Y+37, r26	; 0x25
    24b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b2:	6b a1       	ldd	r22, Y+35	; 0x23
    24b4:	7c a1       	ldd	r23, Y+36	; 0x24
    24b6:	8d a1       	ldd	r24, Y+37	; 0x25
    24b8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <main+0x1912>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a a3       	std	Y+34, r25	; 0x22
    24d0:	89 a3       	std	Y+33, r24	; 0x21
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <main+0x1990>
	else if (__tmp > 65535)
    24d4:	6b a1       	ldd	r22, Y+35	; 0x23
    24d6:	7c a1       	ldd	r23, Y+36	; 0x24
    24d8:	8d a1       	ldd	r24, Y+37	; 0x25
    24da:	9e a1       	ldd	r25, Y+38	; 0x26
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <main+0x197c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6f a1       	ldd	r22, Y+39	; 0x27
    24ee:	78 a5       	ldd	r23, Y+40	; 0x28
    24f0:	89 a5       	ldd	r24, Y+41	; 0x29
    24f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <main+0x1972>
    2516:	88 ec       	ldi	r24, 0xC8	; 200
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	98 a3       	std	Y+32, r25	; 0x20
    251c:	8f 8f       	std	Y+31, r24	; 0x1f
    251e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2520:	98 a1       	ldd	r25, Y+32	; 0x20
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <main+0x1960>
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9a a3       	std	Y+34, r25	; 0x22
    2532:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <main+0x1954>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <main+0x19a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9a a3       	std	Y+34, r25	; 0x22
    2550:	89 a3       	std	Y+33, r24	; 0x21
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	9a a1       	ldd	r25, Y+34	; 0x22
    2556:	9e 8f       	std	Y+30, r25	; 0x1e
    2558:	8d 8f       	std	Y+29, r24	; 0x1d
    255a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <main+0x199c>
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		MTIMER0_voidSetOCR0Value(200);
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a6 e9       	ldi	r26, 0x96	; 150
    2572:	b3 e4       	ldi	r27, 0x43	; 67
    2574:	89 8f       	std	Y+25, r24	; 0x19
    2576:	9a 8f       	std	Y+26, r25	; 0x1a
    2578:	ab 8f       	std	Y+27, r26	; 0x1b
    257a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	69 8d       	ldd	r22, Y+25	; 0x19
    257e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2580:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2582:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a ef       	ldi	r20, 0xFA	; 250
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8d 8b       	std	Y+21, r24	; 0x15
    2596:	9e 8b       	std	Y+22, r25	; 0x16
    2598:	af 8b       	std	Y+23, r26	; 0x17
    259a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    259c:	6d 89       	ldd	r22, Y+21	; 0x15
    259e:	7e 89       	ldd	r23, Y+22	; 0x16
    25a0:	8f 89       	ldd	r24, Y+23	; 0x17
    25a2:	98 8d       	ldd	r25, Y+24	; 0x18
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <main+0x19fc>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9c 8b       	std	Y+20, r25	; 0x14
    25ba:	8b 8b       	std	Y+19, r24	; 0x13
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <main+0x1a7a>
	else if (__tmp > 65535)
    25be:	6d 89       	ldd	r22, Y+21	; 0x15
    25c0:	7e 89       	ldd	r23, Y+22	; 0x16
    25c2:	8f 89       	ldd	r24, Y+23	; 0x17
    25c4:	98 8d       	ldd	r25, Y+24	; 0x18
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <main+0x1a66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	69 8d       	ldd	r22, Y+25	; 0x19
    25d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9c 8b       	std	Y+20, r25	; 0x14
    25fc:	8b 8b       	std	Y+19, r24	; 0x13
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <main+0x1a5c>
    2600:	88 ec       	ldi	r24, 0xC8	; 200
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
    2608:	89 89       	ldd	r24, Y+17	; 0x11
    260a:	9a 89       	ldd	r25, Y+18	; 0x12
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <main+0x1a4a>
    2610:	9a 8b       	std	Y+18, r25	; 0x12
    2612:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8b 89       	ldd	r24, Y+19	; 0x13
    2616:	9c 89       	ldd	r25, Y+20	; 0x14
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8b 89       	ldd	r24, Y+19	; 0x13
    2620:	9c 89       	ldd	r25, Y+20	; 0x14
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <main+0x1a3e>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <main+0x1a8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9c 8b       	std	Y+20, r25	; 0x14
    263a:	8b 8b       	std	Y+19, r24	; 0x13
    263c:	8b 89       	ldd	r24, Y+19	; 0x13
    263e:	9c 89       	ldd	r25, Y+20	; 0x14
    2640:	98 8b       	std	Y+16, r25	; 0x10
    2642:	8f 87       	std	Y+15, r24	; 0x0f
    2644:	8f 85       	ldd	r24, Y+15	; 0x0f
    2646:	98 89       	ldd	r25, Y+16	; 0x10
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <main+0x1a86>
    264c:	98 8b       	std	Y+16, r25	; 0x10
    264e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		MTIMER0_voidSetOCR0Value(0);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <MTIMER0_voidSetOCR0Value>
		 MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_INPUT);
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	63 e0       	ldi	r22, 0x03	; 3
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	0e 94 c0 13 	call	0x2780	; 0x2780 <MDIO_voidSetPinDirection>
		attempts=3;
    2660:	fe 01       	movw	r30, r28
    2662:	eb 59       	subi	r30, 0x9B	; 155
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	9a ca       	rjmp	.-2764   	; 0x1ba4 <main+0xfe2>

	MUART_voidSendStringSyncNonBlocking("\r\nEnter password: ");
	MUART_voidReceiveStringSync(enteredPassword);

	// Check if the entered credentials are correct
	for (int i = 0; i < MAX_USERS; ++i) {
    2670:	de 01       	movw	r26, r28
    2672:	ad 59       	subi	r26, 0x9D	; 157
    2674:	bf 4f       	sbci	r27, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	ed 59       	subi	r30, 0x9D	; 157
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	11 96       	adiw	r26, 0x01	; 1
    2684:	9c 93       	st	X, r25
    2686:	8e 93       	st	-X, r24
    2688:	fe 01       	movw	r30, r28
    268a:	ed 59       	subi	r30, 0x9D	; 157
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	8a 30       	cpi	r24, 0x0A	; 10
    2694:	91 05       	cpc	r25, r1
    2696:	0c f4       	brge	.+2      	; 0x269a <main+0x1ad8>
    2698:	5d ca       	rjmp	.-2886   	; 0x1b54 <main+0xf92>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	aa e7       	ldi	r26, 0x7A	; 122
    26a0:	b4 e4       	ldi	r27, 0x44	; 68
    26a2:	8b 87       	std	Y+11, r24	; 0x0b
    26a4:	9c 87       	std	Y+12, r25	; 0x0c
    26a6:	ad 87       	std	Y+13, r26	; 0x0d
    26a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4a ef       	ldi	r20, 0xFA	; 250
    26b8:	54 e4       	ldi	r21, 0x44	; 68
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	8f 83       	std	Y+7, r24	; 0x07
    26c4:	98 87       	std	Y+8, r25	; 0x08
    26c6:	a9 87       	std	Y+9, r26	; 0x09
    26c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ca:	6f 81       	ldd	r22, Y+7	; 0x07
    26cc:	78 85       	ldd	r23, Y+8	; 0x08
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26de:	88 23       	and	r24, r24
    26e0:	2c f4       	brge	.+10     	; 0x26ec <main+0x1b2a>
		__ticks = 1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	3f c0       	rjmp	.+126    	; 0x276a <main+0x1ba8>
	else if (__tmp > 65535)
    26ec:	6f 81       	ldd	r22, Y+7	; 0x07
    26ee:	78 85       	ldd	r23, Y+8	; 0x08
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	57 e4       	ldi	r21, 0x47	; 71
    26fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	4c f5       	brge	.+82     	; 0x2756 <main+0x1b94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e2       	ldi	r20, 0x20	; 32
    2712:	51 e4       	ldi	r21, 0x41	; 65
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	0f c0       	rjmp	.+30     	; 0x274c <main+0x1b8a>
    272e:	88 ec       	ldi	r24, 0xC8	; 200
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9c 83       	std	Y+4, r25	; 0x04
    2734:	8b 83       	std	Y+3, r24	; 0x03
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <main+0x1b78>
    273e:	9c 83       	std	Y+4, r25	; 0x04
    2740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274c:	8d 81       	ldd	r24, Y+5	; 0x05
    274e:	9e 81       	ldd	r25, Y+6	; 0x06
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	69 f7       	brne	.-38     	; 0x272e <main+0x1b6c>
    2754:	14 c0       	rjmp	.+40     	; 0x277e <main+0x1bbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0x1bb4>
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	ff cf       	rjmp	.-2      	; 0x277e <main+0x1bbc>

00002780 <MDIO_voidSetPinDirection>:


// MDIO_voidSetPinDirection(DIO_PORTA, PIN0, DIO_OUTPUT);

void MDIO_voidSetPinDirection(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	2d 97       	sbiw	r28, 0x0d	; 13
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	6a 83       	std	Y+2, r22	; 0x02
    2798:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	84 30       	cpi	r24, 0x04	; 4
    279e:	08 f0       	brcs	.+2      	; 0x27a2 <MDIO_voidSetPinDirection+0x22>
    27a0:	09 c1       	rjmp	.+530    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	88 30       	cpi	r24, 0x08	; 8
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <MDIO_voidSetPinDirection+0x2a>
    27a8:	05 c1       	rjmp	.+522    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <MDIO_voidSetPinDirection+0x32>
    27b0:	01 c1       	rjmp	.+514    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_portID)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	3d 87       	std	Y+13, r19	; 0x0d
    27ba:	2c 87       	std	Y+12, r18	; 0x0c
    27bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    27be:	9d 85       	ldd	r25, Y+13	; 0x0d
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <MDIO_voidSetPinDirection+0x48>
    27c6:	4f c0       	rjmp	.+158    	; 0x2866 <MDIO_voidSetPinDirection+0xe6>
    27c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    27ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f4       	brge	.+10     	; 0x27dc <MDIO_voidSetPinDirection+0x5c>
    27d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    27d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	71 f0       	breq	.+28     	; 0x27f6 <MDIO_voidSetPinDirection+0x76>
    27da:	ec c0       	rjmp	.+472    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
    27dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    27de:	3d 85       	ldd	r19, Y+13	; 0x0d
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <MDIO_voidSetPinDirection+0x68>
    27e6:	77 c0       	rjmp	.+238    	; 0x28d6 <MDIO_voidSetPinDirection+0x156>
    27e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    27ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    27ec:	83 30       	cpi	r24, 0x03	; 3
    27ee:	91 05       	cpc	r25, r1
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <MDIO_voidSetPinDirection+0x74>
    27f2:	a9 c0       	rjmp	.+338    	; 0x2946 <MDIO_voidSetPinDirection+0x1c6>
    27f4:	df c0       	rjmp	.+446    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	3b 87       	std	Y+11, r19	; 0x0b
    27fe:	2a 87       	std	Y+10, r18	; 0x0a
    2800:	8a 85       	ldd	r24, Y+10	; 0x0a
    2802:	9b 85       	ldd	r25, Y+11	; 0x0b
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	31 f0       	breq	.+12     	; 0x2814 <MDIO_voidSetPinDirection+0x94>
    2808:	2a 85       	ldd	r18, Y+10	; 0x0a
    280a:	3b 85       	ldd	r19, Y+11	; 0x0b
    280c:	21 30       	cpi	r18, 0x01	; 1
    280e:	31 05       	cpc	r19, r1
    2810:	b1 f0       	breq	.+44     	; 0x283e <MDIO_voidSetPinDirection+0xbe>
    2812:	d0 c0       	rjmp	.+416    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    2814:	aa e3       	ldi	r26, 0x3A	; 58
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ea e3       	ldi	r30, 0x3A	; 58
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	48 2f       	mov	r20, r24
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <MDIO_voidSetPinDirection+0xb2>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <MDIO_voidSetPinDirection+0xae>
    2836:	80 95       	com	r24
    2838:	84 23       	and	r24, r20
    283a:	8c 93       	st	X, r24
    283c:	bb c0       	rjmp	.+374    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    283e:	aa e3       	ldi	r26, 0x3A	; 58
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	ea e3       	ldi	r30, 0x3A	; 58
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	48 2f       	mov	r20, r24
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	02 2e       	mov	r0, r18
    2856:	02 c0       	rjmp	.+4      	; 0x285c <MDIO_voidSetPinDirection+0xdc>
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	0a 94       	dec	r0
    285e:	e2 f7       	brpl	.-8      	; 0x2858 <MDIO_voidSetPinDirection+0xd8>
    2860:	84 2b       	or	r24, r20
    2862:	8c 93       	st	X, r24
    2864:	a7 c0       	rjmp	.+334    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	39 87       	std	Y+9, r19	; 0x09
    286e:	28 87       	std	Y+8, r18	; 0x08
    2870:	88 85       	ldd	r24, Y+8	; 0x08
    2872:	99 85       	ldd	r25, Y+9	; 0x09
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	31 f0       	breq	.+12     	; 0x2884 <MDIO_voidSetPinDirection+0x104>
    2878:	28 85       	ldd	r18, Y+8	; 0x08
    287a:	39 85       	ldd	r19, Y+9	; 0x09
    287c:	21 30       	cpi	r18, 0x01	; 1
    287e:	31 05       	cpc	r19, r1
    2880:	b1 f0       	breq	.+44     	; 0x28ae <MDIO_voidSetPinDirection+0x12e>
    2882:	98 c0       	rjmp	.+304    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    2884:	a7 e3       	ldi	r26, 0x37	; 55
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e7 e3       	ldi	r30, 0x37	; 55
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	48 2f       	mov	r20, r24
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	02 2e       	mov	r0, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <MDIO_voidSetPinDirection+0x122>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <MDIO_voidSetPinDirection+0x11e>
    28a6:	80 95       	com	r24
    28a8:	84 23       	and	r24, r20
    28aa:	8c 93       	st	X, r24
    28ac:	83 c0       	rjmp	.+262    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    28ae:	a7 e3       	ldi	r26, 0x37	; 55
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e7 e3       	ldi	r30, 0x37	; 55
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	48 2f       	mov	r20, r24
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	02 2e       	mov	r0, r18
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <MDIO_voidSetPinDirection+0x14c>
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <MDIO_voidSetPinDirection+0x148>
    28d0:	84 2b       	or	r24, r20
    28d2:	8c 93       	st	X, r24
    28d4:	6f c0       	rjmp	.+222    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3f 83       	std	Y+7, r19	; 0x07
    28de:	2e 83       	std	Y+6, r18	; 0x06
    28e0:	8e 81       	ldd	r24, Y+6	; 0x06
    28e2:	9f 81       	ldd	r25, Y+7	; 0x07
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	31 f0       	breq	.+12     	; 0x28f4 <MDIO_voidSetPinDirection+0x174>
    28e8:	2e 81       	ldd	r18, Y+6	; 0x06
    28ea:	3f 81       	ldd	r19, Y+7	; 0x07
    28ec:	21 30       	cpi	r18, 0x01	; 1
    28ee:	31 05       	cpc	r19, r1
    28f0:	b1 f0       	breq	.+44     	; 0x291e <MDIO_voidSetPinDirection+0x19e>
    28f2:	60 c0       	rjmp	.+192    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    28f4:	a4 e3       	ldi	r26, 0x34	; 52
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e4 e3       	ldi	r30, 0x34	; 52
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	48 2f       	mov	r20, r24
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	02 2e       	mov	r0, r18
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <MDIO_voidSetPinDirection+0x192>
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	0a 94       	dec	r0
    2914:	e2 f7       	brpl	.-8      	; 0x290e <MDIO_voidSetPinDirection+0x18e>
    2916:	80 95       	com	r24
    2918:	84 23       	and	r24, r20
    291a:	8c 93       	st	X, r24
    291c:	4b c0       	rjmp	.+150    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    291e:	a4 e3       	ldi	r26, 0x34	; 52
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e4 e3       	ldi	r30, 0x34	; 52
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	48 2f       	mov	r20, r24
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	02 2e       	mov	r0, r18
    2936:	02 c0       	rjmp	.+4      	; 0x293c <MDIO_voidSetPinDirection+0x1bc>
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	0a 94       	dec	r0
    293e:	e2 f7       	brpl	.-8      	; 0x2938 <MDIO_voidSetPinDirection+0x1b8>
    2940:	84 2b       	or	r24, r20
    2942:	8c 93       	st	X, r24
    2944:	37 c0       	rjmp	.+110    	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	3d 83       	std	Y+5, r19	; 0x05
    294e:	2c 83       	std	Y+4, r18	; 0x04
    2950:	8c 81       	ldd	r24, Y+4	; 0x04
    2952:	9d 81       	ldd	r25, Y+5	; 0x05
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	31 f0       	breq	.+12     	; 0x2964 <MDIO_voidSetPinDirection+0x1e4>
    2958:	2c 81       	ldd	r18, Y+4	; 0x04
    295a:	3d 81       	ldd	r19, Y+5	; 0x05
    295c:	21 30       	cpi	r18, 0x01	; 1
    295e:	31 05       	cpc	r19, r1
    2960:	b1 f0       	breq	.+44     	; 0x298e <MDIO_voidSetPinDirection+0x20e>
    2962:	28 c0       	rjmp	.+80     	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    2964:	a1 e3       	ldi	r26, 0x31	; 49
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e1 e3       	ldi	r30, 0x31	; 49
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	48 2f       	mov	r20, r24
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	02 2e       	mov	r0, r18
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <MDIO_voidSetPinDirection+0x202>
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	0a 94       	dec	r0
    2984:	e2 f7       	brpl	.-8      	; 0x297e <MDIO_voidSetPinDirection+0x1fe>
    2986:	80 95       	com	r24
    2988:	84 23       	and	r24, r20
    298a:	8c 93       	st	X, r24
    298c:	13 c0       	rjmp	.+38     	; 0x29b4 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    298e:	a1 e3       	ldi	r26, 0x31	; 49
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e1 e3       	ldi	r30, 0x31	; 49
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	48 2f       	mov	r20, r24
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	02 2e       	mov	r0, r18
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <MDIO_voidSetPinDirection+0x22c>
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	0a 94       	dec	r0
    29ae:	e2 f7       	brpl	.-8      	; 0x29a8 <MDIO_voidSetPinDirection+0x228>
    29b0:	84 2b       	or	r24, r20
    29b2:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    29b4:	2d 96       	adiw	r28, 0x0d	; 13
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	2d 97       	sbiw	r28, 0x0d	; 13
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	6a 83       	std	Y+2, r22	; 0x02
    29de:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET) )
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	84 30       	cpi	r24, 0x04	; 4
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <MDIO_voidSetPinValue+0x22>
    29e6:	09 c1       	rjmp	.+530    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	88 30       	cpi	r24, 0x08	; 8
    29ec:	08 f0       	brcs	.+2      	; 0x29f0 <MDIO_voidSetPinValue+0x2a>
    29ee:	05 c1       	rjmp	.+522    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	82 30       	cpi	r24, 0x02	; 2
    29f4:	08 f0       	brcs	.+2      	; 0x29f8 <MDIO_voidSetPinValue+0x32>
    29f6:	01 c1       	rjmp	.+514    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
	{
		switch (A_portID)
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	3d 87       	std	Y+13, r19	; 0x0d
    2a00:	2c 87       	std	Y+12, r18	; 0x0c
    2a02:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a04:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	91 05       	cpc	r25, r1
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <MDIO_voidSetPinValue+0x48>
    2a0c:	4f c0       	rjmp	.+158    	; 0x2aac <MDIO_voidSetPinValue+0xe6>
    2a0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a10:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a12:	22 30       	cpi	r18, 0x02	; 2
    2a14:	31 05       	cpc	r19, r1
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <MDIO_voidSetPinValue+0x5c>
    2a18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	71 f0       	breq	.+28     	; 0x2a3c <MDIO_voidSetPinValue+0x76>
    2a20:	ec c0       	rjmp	.+472    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
    2a22:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a24:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a26:	22 30       	cpi	r18, 0x02	; 2
    2a28:	31 05       	cpc	r19, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <MDIO_voidSetPinValue+0x68>
    2a2c:	77 c0       	rjmp	.+238    	; 0x2b1c <MDIO_voidSetPinValue+0x156>
    2a2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a30:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	91 05       	cpc	r25, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <MDIO_voidSetPinValue+0x74>
    2a38:	a9 c0       	rjmp	.+338    	; 0x2b8c <MDIO_voidSetPinValue+0x1c6>
    2a3a:	df c0       	rjmp	.+446    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	3b 87       	std	Y+11, r19	; 0x0b
    2a44:	2a 87       	std	Y+10, r18	; 0x0a
    2a46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a48:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	31 f0       	breq	.+12     	; 0x2a5a <MDIO_voidSetPinValue+0x94>
    2a4e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a50:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a52:	21 30       	cpi	r18, 0x01	; 1
    2a54:	31 05       	cpc	r19, r1
    2a56:	b1 f0       	breq	.+44     	; 0x2a84 <MDIO_voidSetPinValue+0xbe>
    2a58:	d0 c0       	rjmp	.+416    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
    2a5a:	ab e3       	ldi	r26, 0x3B	; 59
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	eb e3       	ldi	r30, 0x3B	; 59
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	48 2f       	mov	r20, r24
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 2e       	mov	r0, r18
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <MDIO_voidSetPinValue+0xb2>
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	0a 94       	dec	r0
    2a7a:	e2 f7       	brpl	.-8      	; 0x2a74 <MDIO_voidSetPinValue+0xae>
    2a7c:	80 95       	com	r24
    2a7e:	84 23       	and	r24, r20
    2a80:	8c 93       	st	X, r24
    2a82:	bb c0       	rjmp	.+374    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
    2a84:	ab e3       	ldi	r26, 0x3B	; 59
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	eb e3       	ldi	r30, 0x3B	; 59
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <MDIO_voidSetPinValue+0xdc>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <MDIO_voidSetPinValue+0xd8>
    2aa6:	84 2b       	or	r24, r20
    2aa8:	8c 93       	st	X, r24
    2aaa:	a7 c0       	rjmp	.+334    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	39 87       	std	Y+9, r19	; 0x09
    2ab4:	28 87       	std	Y+8, r18	; 0x08
    2ab6:	88 85       	ldd	r24, Y+8	; 0x08
    2ab8:	99 85       	ldd	r25, Y+9	; 0x09
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	31 f0       	breq	.+12     	; 0x2aca <MDIO_voidSetPinValue+0x104>
    2abe:	28 85       	ldd	r18, Y+8	; 0x08
    2ac0:	39 85       	ldd	r19, Y+9	; 0x09
    2ac2:	21 30       	cpi	r18, 0x01	; 1
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	b1 f0       	breq	.+44     	; 0x2af4 <MDIO_voidSetPinValue+0x12e>
    2ac8:	98 c0       	rjmp	.+304    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_pinID);
    2aca:	a8 e3       	ldi	r26, 0x38	; 56
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e8 e3       	ldi	r30, 0x38	; 56
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	48 2f       	mov	r20, r24
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	28 2f       	mov	r18, r24
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	02 2e       	mov	r0, r18
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <MDIO_voidSetPinValue+0x122>
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	0a 94       	dec	r0
    2aea:	e2 f7       	brpl	.-8      	; 0x2ae4 <MDIO_voidSetPinValue+0x11e>
    2aec:	80 95       	com	r24
    2aee:	84 23       	and	r24, r20
    2af0:	8c 93       	st	X, r24
    2af2:	83 c0       	rjmp	.+262    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_pinID);
    2af4:	a8 e3       	ldi	r26, 0x38	; 56
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e8 e3       	ldi	r30, 0x38	; 56
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	48 2f       	mov	r20, r24
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	02 2e       	mov	r0, r18
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <MDIO_voidSetPinValue+0x14c>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	0a 94       	dec	r0
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <MDIO_voidSetPinValue+0x148>
    2b16:	84 2b       	or	r24, r20
    2b18:	8c 93       	st	X, r24
    2b1a:	6f c0       	rjmp	.+222    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	3f 83       	std	Y+7, r19	; 0x07
    2b24:	2e 83       	std	Y+6, r18	; 0x06
    2b26:	8e 81       	ldd	r24, Y+6	; 0x06
    2b28:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	31 f0       	breq	.+12     	; 0x2b3a <MDIO_voidSetPinValue+0x174>
    2b2e:	2e 81       	ldd	r18, Y+6	; 0x06
    2b30:	3f 81       	ldd	r19, Y+7	; 0x07
    2b32:	21 30       	cpi	r18, 0x01	; 1
    2b34:	31 05       	cpc	r19, r1
    2b36:	b1 f0       	breq	.+44     	; 0x2b64 <MDIO_voidSetPinValue+0x19e>
    2b38:	60 c0       	rjmp	.+192    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_pinID);
    2b3a:	a5 e3       	ldi	r26, 0x35	; 53
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e5 e3       	ldi	r30, 0x35	; 53
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	48 2f       	mov	r20, r24
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	02 2e       	mov	r0, r18
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <MDIO_voidSetPinValue+0x192>
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	0a 94       	dec	r0
    2b5a:	e2 f7       	brpl	.-8      	; 0x2b54 <MDIO_voidSetPinValue+0x18e>
    2b5c:	80 95       	com	r24
    2b5e:	84 23       	and	r24, r20
    2b60:	8c 93       	st	X, r24
    2b62:	4b c0       	rjmp	.+150    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_pinID);
    2b64:	a5 e3       	ldi	r26, 0x35	; 53
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e5 e3       	ldi	r30, 0x35	; 53
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	48 2f       	mov	r20, r24
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	02 2e       	mov	r0, r18
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <MDIO_voidSetPinValue+0x1bc>
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	0a 94       	dec	r0
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <MDIO_voidSetPinValue+0x1b8>
    2b86:	84 2b       	or	r24, r20
    2b88:	8c 93       	st	X, r24
    2b8a:	37 c0       	rjmp	.+110    	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	3d 83       	std	Y+5, r19	; 0x05
    2b94:	2c 83       	std	Y+4, r18	; 0x04
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	31 f0       	breq	.+12     	; 0x2baa <MDIO_voidSetPinValue+0x1e4>
    2b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba2:	21 30       	cpi	r18, 0x01	; 1
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	b1 f0       	breq	.+44     	; 0x2bd4 <MDIO_voidSetPinValue+0x20e>
    2ba8:	28 c0       	rjmp	.+80     	; 0x2bfa <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_pinID);
    2baa:	a2 e3       	ldi	r26, 0x32	; 50
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e2 e3       	ldi	r30, 0x32	; 50
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	48 2f       	mov	r20, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	02 2e       	mov	r0, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <MDIO_voidSetPinValue+0x202>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	0a 94       	dec	r0
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <MDIO_voidSetPinValue+0x1fe>
    2bcc:	80 95       	com	r24
    2bce:	84 23       	and	r24, r20
    2bd0:	8c 93       	st	X, r24
    2bd2:	13 c0       	rjmp	.+38     	; 0x2bfa <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_pinID);
    2bd4:	a2 e3       	ldi	r26, 0x32	; 50
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e2 e3       	ldi	r30, 0x32	; 50
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	48 2f       	mov	r20, r24
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	02 2e       	mov	r0, r18
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <MDIO_voidSetPinValue+0x22c>
    2bee:	88 0f       	add	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	0a 94       	dec	r0
    2bf4:	e2 f7       	brpl	.-8      	; 0x2bee <MDIO_voidSetPinValue+0x228>
    2bf6:	84 2b       	or	r24, r20
    2bf8:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    2bfa:	2d 96       	adiw	r28, 0x0d	; 13
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <MDIO_getPinValue>:


DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <MDIO_getPinValue+0x6>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <MDIO_getPinValue+0x8>
    2c14:	0f 92       	push	r0
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	84 30       	cpi	r24, 0x04	; 4
    2c22:	08 f0       	brcs	.+2      	; 0x2c26 <MDIO_getPinValue+0x1a>
    2c24:	6b c0       	rjmp	.+214    	; 0x2cfc <MDIO_getPinValue+0xf0>
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	88 30       	cpi	r24, 0x08	; 8
    2c2a:	08 f0       	brcs	.+2      	; 0x2c2e <MDIO_getPinValue+0x22>
    2c2c:	67 c0       	rjmp	.+206    	; 0x2cfc <MDIO_getPinValue+0xf0>
	{
		switch (A_portID)
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	3d 83       	std	Y+5, r19	; 0x05
    2c36:	2c 83       	std	Y+4, r18	; 0x04
    2c38:	4c 81       	ldd	r20, Y+4	; 0x04
    2c3a:	5d 81       	ldd	r21, Y+5	; 0x05
    2c3c:	41 30       	cpi	r20, 0x01	; 1
    2c3e:	51 05       	cpc	r21, r1
    2c40:	41 f1       	breq	.+80     	; 0x2c92 <MDIO_getPinValue+0x86>
    2c42:	8c 81       	ldd	r24, Y+4	; 0x04
    2c44:	9d 81       	ldd	r25, Y+5	; 0x05
    2c46:	82 30       	cpi	r24, 0x02	; 2
    2c48:	91 05       	cpc	r25, r1
    2c4a:	34 f4       	brge	.+12     	; 0x2c58 <MDIO_getPinValue+0x4c>
    2c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c50:	21 15       	cp	r18, r1
    2c52:	31 05       	cpc	r19, r1
    2c54:	61 f0       	breq	.+24     	; 0x2c6e <MDIO_getPinValue+0x62>
    2c56:	52 c0       	rjmp	.+164    	; 0x2cfc <MDIO_getPinValue+0xf0>
    2c58:	4c 81       	ldd	r20, Y+4	; 0x04
    2c5a:	5d 81       	ldd	r21, Y+5	; 0x05
    2c5c:	42 30       	cpi	r20, 0x02	; 2
    2c5e:	51 05       	cpc	r21, r1
    2c60:	51 f1       	breq	.+84     	; 0x2cb6 <MDIO_getPinValue+0xaa>
    2c62:	8c 81       	ldd	r24, Y+4	; 0x04
    2c64:	9d 81       	ldd	r25, Y+5	; 0x05
    2c66:	83 30       	cpi	r24, 0x03	; 3
    2c68:	91 05       	cpc	r25, r1
    2c6a:	b9 f1       	breq	.+110    	; 0x2cda <MDIO_getPinValue+0xce>
    2c6c:	47 c0       	rjmp	.+142    	; 0x2cfc <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    2c6e:	e9 e3       	ldi	r30, 0x39	; 57
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	88 2f       	mov	r24, r24
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	a9 01       	movw	r20, r18
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <MDIO_getPinValue+0x7a>
    2c82:	55 95       	asr	r21
    2c84:	47 95       	ror	r20
    2c86:	8a 95       	dec	r24
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <MDIO_getPinValue+0x76>
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	81 70       	andi	r24, 0x01	; 1
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	35 c0       	rjmp	.+106    	; 0x2cfc <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    2c92:	e6 e3       	ldi	r30, 0x36	; 54
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a9 01       	movw	r20, r18
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <MDIO_getPinValue+0x9e>
    2ca6:	55 95       	asr	r21
    2ca8:	47 95       	ror	r20
    2caa:	8a 95       	dec	r24
    2cac:	e2 f7       	brpl	.-8      	; 0x2ca6 <MDIO_getPinValue+0x9a>
    2cae:	ca 01       	movw	r24, r20
    2cb0:	81 70       	andi	r24, 0x01	; 1
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	23 c0       	rjmp	.+70     	; 0x2cfc <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    2cb6:	e3 e3       	ldi	r30, 0x33	; 51
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a9 01       	movw	r20, r18
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <MDIO_getPinValue+0xc2>
    2cca:	55 95       	asr	r21
    2ccc:	47 95       	ror	r20
    2cce:	8a 95       	dec	r24
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <MDIO_getPinValue+0xbe>
    2cd2:	ca 01       	movw	r24, r20
    2cd4:	81 70       	andi	r24, 0x01	; 1
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	11 c0       	rjmp	.+34     	; 0x2cfc <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    2cda:	e0 e3       	ldi	r30, 0x30	; 48
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a9 01       	movw	r20, r18
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <MDIO_getPinValue+0xe6>
    2cee:	55 95       	asr	r21
    2cf0:	47 95       	ror	r20
    2cf2:	8a 95       	dec	r24
    2cf4:	e2 f7       	brpl	.-8      	; 0x2cee <MDIO_getPinValue+0xe2>
    2cf6:	ca 01       	movw	r24, r20
    2cf8:	81 70       	andi	r24, 0x01	; 1
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <MDIO_voidTogglePinValue+0x6>
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <MDIO_voidTogglePinValue+0x8>
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	84 30       	cpi	r24, 0x04	; 4
    2d22:	08 f0       	brcs	.+2      	; 0x2d26 <MDIO_voidTogglePinValue+0x18>
    2d24:	72 c0       	rjmp	.+228    	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	88 30       	cpi	r24, 0x08	; 8
    2d2a:	08 f0       	brcs	.+2      	; 0x2d2e <MDIO_voidTogglePinValue+0x20>
    2d2c:	6e c0       	rjmp	.+220    	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_portID)
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	3c 83       	std	Y+4, r19	; 0x04
    2d36:	2b 83       	std	Y+3, r18	; 0x03
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	91 05       	cpc	r25, r1
    2d40:	49 f1       	breq	.+82     	; 0x2d94 <MDIO_voidTogglePinValue+0x86>
    2d42:	2b 81       	ldd	r18, Y+3	; 0x03
    2d44:	3c 81       	ldd	r19, Y+4	; 0x04
    2d46:	22 30       	cpi	r18, 0x02	; 2
    2d48:	31 05       	cpc	r19, r1
    2d4a:	2c f4       	brge	.+10     	; 0x2d56 <MDIO_voidTogglePinValue+0x48>
    2d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	61 f0       	breq	.+24     	; 0x2d6c <MDIO_voidTogglePinValue+0x5e>
    2d54:	5a c0       	rjmp	.+180    	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
    2d56:	2b 81       	ldd	r18, Y+3	; 0x03
    2d58:	3c 81       	ldd	r19, Y+4	; 0x04
    2d5a:	22 30       	cpi	r18, 0x02	; 2
    2d5c:	31 05       	cpc	r19, r1
    2d5e:	71 f1       	breq	.+92     	; 0x2dbc <MDIO_voidTogglePinValue+0xae>
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	83 30       	cpi	r24, 0x03	; 3
    2d66:	91 05       	cpc	r25, r1
    2d68:	e9 f1       	breq	.+122    	; 0x2de4 <MDIO_voidTogglePinValue+0xd6>
    2d6a:	4f c0       	rjmp	.+158    	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    2d6c:	ab e3       	ldi	r26, 0x3B	; 59
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	eb e3       	ldi	r30, 0x3B	; 59
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	48 2f       	mov	r20, r24
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	02 2e       	mov	r0, r18
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <MDIO_voidTogglePinValue+0x7c>
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	0a 94       	dec	r0
    2d8c:	e2 f7       	brpl	.-8      	; 0x2d86 <MDIO_voidTogglePinValue+0x78>
    2d8e:	84 27       	eor	r24, r20
    2d90:	8c 93       	st	X, r24
    2d92:	3b c0       	rjmp	.+118    	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    2d94:	a8 e3       	ldi	r26, 0x38	; 56
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e8 e3       	ldi	r30, 0x38	; 56
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	48 2f       	mov	r20, r24
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	28 2f       	mov	r18, r24
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	02 2e       	mov	r0, r18
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <MDIO_voidTogglePinValue+0xa4>
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	0a 94       	dec	r0
    2db4:	e2 f7       	brpl	.-8      	; 0x2dae <MDIO_voidTogglePinValue+0xa0>
    2db6:	84 27       	eor	r24, r20
    2db8:	8c 93       	st	X, r24
    2dba:	27 c0       	rjmp	.+78     	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    2dbc:	a5 e3       	ldi	r26, 0x35	; 53
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e5 e3       	ldi	r30, 0x35	; 53
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <MDIO_voidTogglePinValue+0xcc>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <MDIO_voidTogglePinValue+0xc8>
    2dde:	84 27       	eor	r24, r20
    2de0:	8c 93       	st	X, r24
    2de2:	13 c0       	rjmp	.+38     	; 0x2e0a <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    2de4:	a2 e3       	ldi	r26, 0x32	; 50
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e2 e3       	ldi	r30, 0x32	; 50
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	48 2f       	mov	r20, r24
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	02 2e       	mov	r0, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <MDIO_voidTogglePinValue+0xf4>
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	0a 94       	dec	r0
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <MDIO_voidTogglePinValue+0xf0>
    2e06:	84 27       	eor	r24, r20
    2e08:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <MDIO_voidSetPortDirection+0x6>
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <MDIO_voidSetPortDirection+0x8>
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	84 30       	cpi	r24, 0x04	; 4
    2e2c:	90 f5       	brcc	.+100    	; 0x2e92 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_portID)
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	28 2f       	mov	r18, r24
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	3c 83       	std	Y+4, r19	; 0x04
    2e36:	2b 83       	std	Y+3, r18	; 0x03
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	81 30       	cpi	r24, 0x01	; 1
    2e3e:	91 05       	cpc	r25, r1
    2e40:	d1 f0       	breq	.+52     	; 0x2e76 <MDIO_voidSetPortDirection+0x5e>
    2e42:	2b 81       	ldd	r18, Y+3	; 0x03
    2e44:	3c 81       	ldd	r19, Y+4	; 0x04
    2e46:	22 30       	cpi	r18, 0x02	; 2
    2e48:	31 05       	cpc	r19, r1
    2e4a:	2c f4       	brge	.+10     	; 0x2e56 <MDIO_voidSetPortDirection+0x3e>
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	61 f0       	breq	.+24     	; 0x2e6c <MDIO_voidSetPortDirection+0x54>
    2e54:	1e c0       	rjmp	.+60     	; 0x2e92 <MDIO_voidSetPortDirection+0x7a>
    2e56:	2b 81       	ldd	r18, Y+3	; 0x03
    2e58:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5a:	22 30       	cpi	r18, 0x02	; 2
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	81 f0       	breq	.+32     	; 0x2e80 <MDIO_voidSetPortDirection+0x68>
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	83 30       	cpi	r24, 0x03	; 3
    2e66:	91 05       	cpc	r25, r1
    2e68:	81 f0       	breq	.+32     	; 0x2e8a <MDIO_voidSetPortDirection+0x72>
    2e6a:	13 c0       	rjmp	.+38     	; 0x2e92 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    2e6c:	ea e3       	ldi	r30, 0x3A	; 58
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	80 83       	st	Z, r24
    2e74:	0e c0       	rjmp	.+28     	; 0x2e92 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    2e76:	e7 e3       	ldi	r30, 0x37	; 55
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	80 83       	st	Z, r24
    2e7e:	09 c0       	rjmp	.+18     	; 0x2e92 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    2e80:	e4 e3       	ldi	r30, 0x34	; 52
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	80 83       	st	Z, r24
    2e88:	04 c0       	rjmp	.+8      	; 0x2e92 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    2e8a:	e1 e3       	ldi	r30, 0x31	; 49
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <MDIO_voidSetPortValue+0x6>
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <MDIO_voidSetPortValue+0x8>
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	84 30       	cpi	r24, 0x04	; 4
    2eb4:	90 f5       	brcc	.+100    	; 0x2f1a <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_portID)
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	3c 83       	std	Y+4, r19	; 0x04
    2ebe:	2b 83       	std	Y+3, r18	; 0x03
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	91 05       	cpc	r25, r1
    2ec8:	d1 f0       	breq	.+52     	; 0x2efe <MDIO_voidSetPortValue+0x5e>
    2eca:	2b 81       	ldd	r18, Y+3	; 0x03
    2ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ece:	22 30       	cpi	r18, 0x02	; 2
    2ed0:	31 05       	cpc	r19, r1
    2ed2:	2c f4       	brge	.+10     	; 0x2ede <MDIO_voidSetPortValue+0x3e>
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	61 f0       	breq	.+24     	; 0x2ef4 <MDIO_voidSetPortValue+0x54>
    2edc:	1e c0       	rjmp	.+60     	; 0x2f1a <MDIO_voidSetPortValue+0x7a>
    2ede:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee2:	22 30       	cpi	r18, 0x02	; 2
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	81 f0       	breq	.+32     	; 0x2f08 <MDIO_voidSetPortValue+0x68>
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	9c 81       	ldd	r25, Y+4	; 0x04
    2eec:	83 30       	cpi	r24, 0x03	; 3
    2eee:	91 05       	cpc	r25, r1
    2ef0:	81 f0       	breq	.+32     	; 0x2f12 <MDIO_voidSetPortValue+0x72>
    2ef2:	13 c0       	rjmp	.+38     	; 0x2f1a <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    2ef4:	eb e3       	ldi	r30, 0x3B	; 59
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	80 83       	st	Z, r24
    2efc:	0e c0       	rjmp	.+28     	; 0x2f1a <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    2efe:	e8 e3       	ldi	r30, 0x38	; 56
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	80 83       	st	Z, r24
    2f06:	09 c0       	rjmp	.+18     	; 0x2f1a <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    2f08:	e5 e3       	ldi	r30, 0x35	; 53
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	80 83       	st	Z, r24
    2f10:	04 c0       	rjmp	.+8      	; 0x2f1a <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    2f12:	e2 e3       	ldi	r30, 0x32	; 50
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	8a 81       	ldd	r24, Y+2	; 0x02
    2f18:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <MDIO_voidInit>:


void MDIO_voidInit (void)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    2f30:	ea e3       	ldi	r30, 0x3A	; 58
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	8f e0       	ldi	r24, 0x0F	; 15
    2f36:	80 83       	st	Z, r24
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    2f38:	e7 e3       	ldi	r30, 0x37	; 55
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	87 e0       	ldi	r24, 0x07	; 7
    2f3e:	80 83       	st	Z, r24
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    2f40:	e4 e3       	ldi	r30, 0x34	; 52
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	8f ef       	ldi	r24, 0xFF	; 255
    2f46:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    2f48:	e1 e3       	ldi	r30, 0x31	; 49
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	10 82       	st	Z, r1
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    2f4e:	eb e3       	ldi	r30, 0x3B	; 59
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    2f54:	e8 e3       	ldi	r30, 0x38	; 56
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	10 82       	st	Z, r1
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    2f5a:	e5 e3       	ldi	r30, 0x35	; 53
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    2f60:	e2 e3       	ldi	r30, 0x32	; 50
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <EEPROM_voidSendDataByte>:
#define M24C08_A0_CONNECTION 0

#define EEPROM_FIXED_ADDRESS 0b1010000  // 1010 (fixed) + A2A1A0 (configurable)

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	62 97       	sbiw	r28, 0x12	; 18
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	99 8b       	std	Y+17, r25	; 0x11
    2f82:	88 8b       	std	Y+16, r24	; 0x10
    2f84:	6a 8b       	std	Y+18, r22	; 0x12
    u8 Local_u8AddressPacket;

    Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (M24C08_A2_CONNECTION << 2) | (M24C08_A1_CONNECTION << 1) | (M24C08_A0_CONNECTION);
    2f86:	80 e5       	ldi	r24, 0x50	; 80
    2f88:	8f 87       	std	Y+15, r24	; 0x0f

    /*Send start condition*/
    TWI_ErrorStatusSendStartConditionWithACK();
    2f8a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_ErrorStatusSendStartConditionWithACK>

    /*Send the address packet*/
    TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    2f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f90:	0e 94 af 21 	call	0x435e	; 0x435e <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

    /*Send the rest 8bits of the location address*/
    TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    2f94:	88 89       	ldd	r24, Y+16	; 0x10
    2f96:	0e 94 1f 22 	call	0x443e	; 0x443e <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send the data byte to the memory location*/
    TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    2f9a:	8a 89       	ldd	r24, Y+18	; 0x12
    2f9c:	0e 94 1f 22 	call	0x443e	; 0x443e <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send stop condition*/
    TWI_voidSendStopCondition();
    2fa0:	0e 94 77 22 	call	0x44ee	; 0x44ee <TWI_voidSendStopCondition>
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e2       	ldi	r26, 0x20	; 32
    2faa:	b1 e4       	ldi	r27, 0x41	; 65
    2fac:	8b 87       	std	Y+11, r24	; 0x0b
    2fae:	9c 87       	std	Y+12, r25	; 0x0c
    2fb0:	ad 87       	std	Y+13, r26	; 0x0d
    2fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a ef       	ldi	r20, 0xFA	; 250
    2fc2:	54 e4       	ldi	r21, 0x44	; 68
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	8f 83       	std	Y+7, r24	; 0x07
    2fce:	98 87       	std	Y+8, r25	; 0x08
    2fd0:	a9 87       	std	Y+9, r26	; 0x09
    2fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd6:	78 85       	ldd	r23, Y+8	; 0x08
    2fd8:	89 85       	ldd	r24, Y+9	; 0x09
    2fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <EEPROM_voidSendDataByte+0x8a>
		__ticks = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <EEPROM_voidSendDataByte+0x108>
	else if (__tmp > 65535)
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	4c f5       	brge	.+82     	; 0x3060 <EEPROM_voidSendDataByte+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3010:	7c 85       	ldd	r23, Y+12	; 0x0c
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e2       	ldi	r20, 0x20	; 32
    301c:	51 e4       	ldi	r21, 0x41	; 65
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <EEPROM_voidSendDataByte+0xea>
    3038:	88 ec       	ldi	r24, 0xC8	; 200
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <EEPROM_voidSendDataByte+0xd8>
    3048:	9c 83       	std	Y+4, r25	; 0x04
    304a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	9e 83       	std	Y+6, r25	; 0x06
    3054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f7       	brne	.-38     	; 0x3038 <EEPROM_voidSendDataByte+0xcc>
    305e:	14 c0       	rjmp	.+40     	; 0x3088 <EEPROM_voidSendDataByte+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9e 83       	std	Y+6, r25	; 0x06
    3072:	8d 83       	std	Y+5, r24	; 0x05
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <EEPROM_voidSendDataByte+0x114>
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01

    /*Delay until the write cycle is finished*/
    _delay_ms(10);
}
    3088:	62 96       	adiw	r28, 0x12	; 18
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <EEPROM_u8ReadDataByte+0x6>
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <EEPROM_u8ReadDataByte+0x8>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8AddressPacket, Local_u8Data;

    Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (M24C08_A2_CONNECTION << 2) | (M24C08_A1_CONNECTION << 1) | (M24C08_A0_CONNECTION);
    30aa:	80 e5       	ldi	r24, 0x50	; 80
    30ac:	89 83       	std	Y+1, r24	; 0x01

    /*Send start condition*/
    TWI_ErrorStatusSendStartConditionWithACK();
    30ae:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_ErrorStatusSendStartConditionWithACK>

    /*Send the address packet with write request*/
    TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	0e 94 af 21 	call	0x435e	; 0x435e <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

    /*Send the rest 8bits of the location address*/
    TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	0e 94 1f 22 	call	0x443e	; 0x443e <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send repeated start to change write request into read request*/
    TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    30be:	0e 94 8c 21 	call	0x4318	; 0x4318 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

    /*Send the address packet with read request*/
    TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	0e 94 e7 21 	call	0x43ce	; 0x43ce <TWI_ErrorStatusSendSlaveAddressWithReadACK>

    /*Get the data from memory*/
    TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    30c8:	ce 01       	movw	r24, r28
    30ca:	02 96       	adiw	r24, 0x02	; 2
    30cc:	0e 94 48 22 	call	0x4490	; 0x4490 <TWI_ErrorStatusMasterReadDataByteWithACK>

    /*send the stop condition*/
    TWI_voidSendStopCondition();
    30d0:	0e 94 77 22 	call	0x44ee	; 0x44ee <TWI_voidSendStopCondition>

    return Local_u8Data;
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <MEXTI_voidConfig>:
void (*EXTI0_Callback) (void) = NULL;
void (*EXTI1_Callback) (void) = NULL;
void (*EXTI2_Callback) (void) = NULL;

void MEXTI_voidConfig (EXTI_ID A_EXTI_ID, EXTI_SENSE_MODE A_EXTISenseMode)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <MEXTI_voidConfig+0x6>
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <MEXTI_voidConfig+0x8>
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <MEXTI_voidConfig+0xa>
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_EXTI_ID <= EXTI2) && (A_EXTISenseMode <= RISING_EDGE))
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	83 30       	cpi	r24, 0x03	; 3
    30fa:	08 f0       	brcs	.+2      	; 0x30fe <MEXTI_voidConfig+0x1a>
    30fc:	54 c0       	rjmp	.+168    	; 0x31a6 <MEXTI_voidConfig+0xc2>
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	84 30       	cpi	r24, 0x04	; 4
    3102:	08 f0       	brcs	.+2      	; 0x3106 <MEXTI_voidConfig+0x22>
    3104:	50 c0       	rjmp	.+160    	; 0x31a6 <MEXTI_voidConfig+0xc2>
	{
		switch (A_EXTI_ID)
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	3e 83       	std	Y+6, r19	; 0x06
    310e:	2d 83       	std	Y+5, r18	; 0x05
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	9e 81       	ldd	r25, Y+6	; 0x06
    3114:	81 30       	cpi	r24, 0x01	; 1
    3116:	91 05       	cpc	r25, r1
    3118:	c1 f0       	breq	.+48     	; 0x314a <MEXTI_voidConfig+0x66>
    311a:	2d 81       	ldd	r18, Y+5	; 0x05
    311c:	3e 81       	ldd	r19, Y+6	; 0x06
    311e:	22 30       	cpi	r18, 0x02	; 2
    3120:	31 05       	cpc	r19, r1
    3122:	11 f1       	breq	.+68     	; 0x3168 <MEXTI_voidConfig+0x84>
    3124:	8d 81       	ldd	r24, Y+5	; 0x05
    3126:	9e 81       	ldd	r25, Y+6	; 0x06
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	e9 f5       	brne	.+122    	; 0x31a6 <MEXTI_voidConfig+0xc2>
		{
		case EXTI0:
			MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    312c:	a5 e5       	ldi	r26, 0x55	; 85
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e5 e5       	ldi	r30, 0x55	; 85
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8c 7f       	andi	r24, 0xFC	; 252
    3138:	8c 93       	st	X, r24
			MCUCR |= (SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    313a:	a5 e5       	ldi	r26, 0x55	; 85
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e5 e5       	ldi	r30, 0x55	; 85
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	83 60       	ori	r24, 0x03	; 3
    3146:	8c 93       	st	X, r24
    3148:	2e c0       	rjmp	.+92     	; 0x31a6 <MEXTI_voidConfig+0xc2>
			break;
		case EXTI1:
			MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    314a:	a5 e5       	ldi	r26, 0x55	; 85
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e5 e5       	ldi	r30, 0x55	; 85
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	83 7f       	andi	r24, 0xF3	; 243
    3156:	8c 93       	st	X, r24
			MCUCR |= (SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    3158:	a5 e5       	ldi	r26, 0x55	; 85
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e5 e5       	ldi	r30, 0x55	; 85
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8c 60       	ori	r24, 0x0C	; 12
    3164:	8c 93       	st	X, r24
    3166:	1f c0       	rjmp	.+62     	; 0x31a6 <MEXTI_voidConfig+0xc2>
			break;
		case EXTI2:
			switch(A_EXTISenseMode)
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	28 2f       	mov	r18, r24
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	3c 83       	std	Y+4, r19	; 0x04
    3170:	2b 83       	std	Y+3, r18	; 0x03
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	91 05       	cpc	r25, r1
    317a:	31 f0       	breq	.+12     	; 0x3188 <MEXTI_voidConfig+0xa4>
    317c:	2b 81       	ldd	r18, Y+3	; 0x03
    317e:	3c 81       	ldd	r19, Y+4	; 0x04
    3180:	23 30       	cpi	r18, 0x03	; 3
    3182:	31 05       	cpc	r19, r1
    3184:	49 f0       	breq	.+18     	; 0x3198 <MEXTI_voidConfig+0xb4>
    3186:	0f c0       	rjmp	.+30     	; 0x31a6 <MEXTI_voidConfig+0xc2>
			{
			case FALLING_EDGE:
				CLR_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    3188:	a4 e5       	ldi	r26, 0x54	; 84
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	e4 e5       	ldi	r30, 0x54	; 84
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	8f 7b       	andi	r24, 0xBF	; 191
    3194:	8c 93       	st	X, r24
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <MEXTI_voidConfig+0xc2>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    3198:	a4 e5       	ldi	r26, 0x54	; 84
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e4 e5       	ldi	r30, 0x54	; 84
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	80 64       	ori	r24, 0x40	; 64
    31a4:	8c 93       	st	X, r24
			break;
			default:
				break;
		}
	}
}
    31a6:	26 96       	adiw	r28, 0x06	; 6
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <MEXTI_voidEnable>:
void MEXTI_voidEnable (EXTI_ID A_EXTI_ID)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <MEXTI_voidEnable+0x6>
    31be:	0f 92       	push	r0
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	83 30       	cpi	r24, 0x03	; 3
    31ca:	50 f5       	brcc	.+84     	; 0x3220 <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	3b 83       	std	Y+3, r19	; 0x03
    31d4:	2a 83       	std	Y+2, r18	; 0x02
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	9b 81       	ldd	r25, Y+3	; 0x03
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	91 05       	cpc	r25, r1
    31de:	89 f0       	breq	.+34     	; 0x3202 <MEXTI_voidEnable+0x4a>
    31e0:	2a 81       	ldd	r18, Y+2	; 0x02
    31e2:	3b 81       	ldd	r19, Y+3	; 0x03
    31e4:	22 30       	cpi	r18, 0x02	; 2
    31e6:	31 05       	cpc	r19, r1
    31e8:	a1 f0       	breq	.+40     	; 0x3212 <MEXTI_voidEnable+0x5a>
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	9b 81       	ldd	r25, Y+3	; 0x03
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	b9 f4       	brne	.+46     	; 0x3220 <MEXTI_voidEnable+0x68>
		{
		case EXTI0:
			SET_BIT(GICR,EXTI0_ENABLE_BIT);
    31f2:	ab e5       	ldi	r26, 0x5B	; 91
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	eb e5       	ldi	r30, 0x5B	; 91
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	80 64       	ori	r24, 0x40	; 64
    31fe:	8c 93       	st	X, r24
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <MEXTI_voidEnable+0x68>
			break;
		case EXTI1:
			SET_BIT(GICR,EXTI1_ENABLE_BIT);
    3202:	ab e5       	ldi	r26, 0x5B	; 91
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	eb e5       	ldi	r30, 0x5B	; 91
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	80 68       	ori	r24, 0x80	; 128
    320e:	8c 93       	st	X, r24
    3210:	07 c0       	rjmp	.+14     	; 0x3220 <MEXTI_voidEnable+0x68>
			break;
		case EXTI2:
			SET_BIT(GICR,EXTI2_ENABLE_BIT);
    3212:	ab e5       	ldi	r26, 0x5B	; 91
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	eb e5       	ldi	r30, 0x5B	; 91
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	80 62       	ori	r24, 0x20	; 32
    321e:	8c 93       	st	X, r24
			break;
		}
	}
}
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <MEXTI_voidDisable>:
void MEXTI_voidDisable (EXTI_ID A_EXTI_ID)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	00 d0       	rcall	.+0      	; 0x3232 <MEXTI_voidDisable+0x6>
    3232:	0f 92       	push	r0
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	83 30       	cpi	r24, 0x03	; 3
    323e:	50 f5       	brcc	.+84     	; 0x3294 <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	3b 83       	std	Y+3, r19	; 0x03
    3248:	2a 83       	std	Y+2, r18	; 0x02
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	91 05       	cpc	r25, r1
    3252:	89 f0       	breq	.+34     	; 0x3276 <MEXTI_voidDisable+0x4a>
    3254:	2a 81       	ldd	r18, Y+2	; 0x02
    3256:	3b 81       	ldd	r19, Y+3	; 0x03
    3258:	22 30       	cpi	r18, 0x02	; 2
    325a:	31 05       	cpc	r19, r1
    325c:	a1 f0       	breq	.+40     	; 0x3286 <MEXTI_voidDisable+0x5a>
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	b9 f4       	brne	.+46     	; 0x3294 <MEXTI_voidDisable+0x68>
		{
		case EXTI0:
			CLR_BIT(GICR,EXTI0_ENABLE_BIT);
    3266:	ab e5       	ldi	r26, 0x5B	; 91
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	eb e5       	ldi	r30, 0x5B	; 91
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	8f 7b       	andi	r24, 0xBF	; 191
    3272:	8c 93       	st	X, r24
    3274:	0f c0       	rjmp	.+30     	; 0x3294 <MEXTI_voidDisable+0x68>
			break;
		case EXTI1:
			CLR_BIT(GICR,EXTI1_ENABLE_BIT);
    3276:	ab e5       	ldi	r26, 0x5B	; 91
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	eb e5       	ldi	r30, 0x5B	; 91
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	8f 77       	andi	r24, 0x7F	; 127
    3282:	8c 93       	st	X, r24
    3284:	07 c0       	rjmp	.+14     	; 0x3294 <MEXTI_voidDisable+0x68>
			break;
		case EXTI2:
			CLR_BIT(GICR,EXTI2_ENABLE_BIT);
    3286:	ab e5       	ldi	r26, 0x5B	; 91
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	eb e5       	ldi	r30, 0x5B	; 91
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	8f 7d       	andi	r24, 0xDF	; 223
    3292:	8c 93       	st	X, r24
			break;
		}
	}
}
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <MEXTI_voidClearFlag>:
void MEXTI_voidClearFlag (EXTI_ID A_EXTI_ID)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <MEXTI_voidClearFlag+0x6>
    32a6:	0f 92       	push	r0
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	83 30       	cpi	r24, 0x03	; 3
    32b2:	50 f5       	brcc	.+84     	; 0x3308 <MEXTI_voidClearFlag+0x68>
	{
		switch (A_EXTI_ID)
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	28 2f       	mov	r18, r24
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	3b 83       	std	Y+3, r19	; 0x03
    32bc:	2a 83       	std	Y+2, r18	; 0x02
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	9b 81       	ldd	r25, Y+3	; 0x03
    32c2:	81 30       	cpi	r24, 0x01	; 1
    32c4:	91 05       	cpc	r25, r1
    32c6:	89 f0       	breq	.+34     	; 0x32ea <MEXTI_voidClearFlag+0x4a>
    32c8:	2a 81       	ldd	r18, Y+2	; 0x02
    32ca:	3b 81       	ldd	r19, Y+3	; 0x03
    32cc:	22 30       	cpi	r18, 0x02	; 2
    32ce:	31 05       	cpc	r19, r1
    32d0:	a1 f0       	breq	.+40     	; 0x32fa <MEXTI_voidClearFlag+0x5a>
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	9b 81       	ldd	r25, Y+3	; 0x03
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	b9 f4       	brne	.+46     	; 0x3308 <MEXTI_voidClearFlag+0x68>
		{
		case EXTI0:
			SET_BIT(GIFR,EXTI0_ENABLE_BIT);
    32da:	aa e5       	ldi	r26, 0x5A	; 90
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	ea e5       	ldi	r30, 0x5A	; 90
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	80 64       	ori	r24, 0x40	; 64
    32e6:	8c 93       	st	X, r24
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <MEXTI_voidClearFlag+0x68>
			break;
		case EXTI1:
			SET_BIT(GIFR,EXTI1_ENABLE_BIT);
    32ea:	aa e5       	ldi	r26, 0x5A	; 90
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	ea e5       	ldi	r30, 0x5A	; 90
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	80 68       	ori	r24, 0x80	; 128
    32f6:	8c 93       	st	X, r24
    32f8:	07 c0       	rjmp	.+14     	; 0x3308 <MEXTI_voidClearFlag+0x68>
			break;
		case EXTI2:
			SET_BIT(GIFR,EXTI2_ENABLE_BIT);
    32fa:	aa e5       	ldi	r26, 0x5A	; 90
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	ea e5       	ldi	r30, 0x5A	; 90
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	80 62       	ori	r24, 0x20	; 32
    3306:	8c 93       	st	X, r24
			break;
		}
	}
}
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	08 95       	ret

00003314 <MEXTI_voidSetCallBack>:
void MEXTI_voidSetCallBack (EXTI_ID A_EXTI_ID, void(*A_ptrToFunc)(void))
{
    3314:	df 93       	push	r29
    3316:	cf 93       	push	r28
    3318:	00 d0       	rcall	.+0      	; 0x331a <MEXTI_voidSetCallBack+0x6>
    331a:	00 d0       	rcall	.+0      	; 0x331c <MEXTI_voidSetCallBack+0x8>
    331c:	0f 92       	push	r0
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	7b 83       	std	Y+3, r23	; 0x03
    3326:	6a 83       	std	Y+2, r22	; 0x02
	if((A_EXTI_ID <= EXTI2) && (A_ptrToFunc != NULL))
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	83 30       	cpi	r24, 0x03	; 3
    332c:	58 f5       	brcc	.+86     	; 0x3384 <MEXTI_voidSetCallBack+0x70>
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	9b 81       	ldd	r25, Y+3	; 0x03
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	39 f1       	breq	.+78     	; 0x3384 <MEXTI_voidSetCallBack+0x70>
	{
		switch (A_EXTI_ID)
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	3d 83       	std	Y+5, r19	; 0x05
    333e:	2c 83       	std	Y+4, r18	; 0x04
    3340:	8c 81       	ldd	r24, Y+4	; 0x04
    3342:	9d 81       	ldd	r25, Y+5	; 0x05
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	91 05       	cpc	r25, r1
    3348:	81 f0       	breq	.+32     	; 0x336a <MEXTI_voidSetCallBack+0x56>
    334a:	2c 81       	ldd	r18, Y+4	; 0x04
    334c:	3d 81       	ldd	r19, Y+5	; 0x05
    334e:	22 30       	cpi	r18, 0x02	; 2
    3350:	31 05       	cpc	r19, r1
    3352:	91 f0       	breq	.+36     	; 0x3378 <MEXTI_voidSetCallBack+0x64>
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	9d 81       	ldd	r25, Y+5	; 0x05
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	a1 f4       	brne	.+40     	; 0x3384 <MEXTI_voidSetCallBack+0x70>
		{
		case EXTI0:
			EXTI0_Callback = A_ptrToFunc;
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	90 93 7d 04 	sts	0x047D, r25
    3364:	80 93 7c 04 	sts	0x047C, r24
    3368:	0d c0       	rjmp	.+26     	; 0x3384 <MEXTI_voidSetCallBack+0x70>
			break;
		case EXTI1:
			EXTI1_Callback = A_ptrToFunc;
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	90 93 7f 04 	sts	0x047F, r25
    3372:	80 93 7e 04 	sts	0x047E, r24
    3376:	06 c0       	rjmp	.+12     	; 0x3384 <MEXTI_voidSetCallBack+0x70>
			break;
		case EXTI2:
			EXTI2_Callback = A_ptrToFunc;
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	9b 81       	ldd	r25, Y+3	; 0x03
    337c:	90 93 81 04 	sts	0x0481, r25
    3380:	80 93 80 04 	sts	0x0480, r24
			break;
		}
	}

}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <void__vector_1>:
voi__vector_1(void)__attribute__((signal));
void__vector_1(void)
{
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	00 d0       	rcall	.+0      	; 0x339a <void__vector_1+0x6>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    339e:	80 91 7c 04 	lds	r24, 0x047C
    33a2:	90 91 7d 04 	lds	r25, 0x047D
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	29 f0       	breq	.+10     	; 0x33b4 <void__vector_1+0x20>
	{
		EXTI0_Callback ();
    33aa:	e0 91 7c 04 	lds	r30, 0x047C
    33ae:	f0 91 7d 04 	lds	r31, 0x047D
    33b2:	09 95       	icall
	}
}
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <void__vector_2>:

voi__vector_2(void)__attribute__((signal));
void__vector_2(void)
{
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <void__vector_2+0x6>
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    33c8:	80 91 7c 04 	lds	r24, 0x047C
    33cc:	90 91 7d 04 	lds	r25, 0x047D
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	29 f0       	breq	.+10     	; 0x33de <void__vector_2+0x20>
	{
		EXTI0_Callback ();
    33d4:	e0 91 7c 04 	lds	r30, 0x047C
    33d8:	f0 91 7d 04 	lds	r31, 0x047D
    33dc:	09 95       	icall
	}
}
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <void__vector_3>:

voi__vector_3(void)__attribute__((signal));
void__vector_3(void)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <void__vector_3+0x6>
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    33f2:	80 91 7c 04 	lds	r24, 0x047C
    33f6:	90 91 7d 04 	lds	r25, 0x047D
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	29 f0       	breq	.+10     	; 0x3408 <void__vector_3+0x20>
	{
		EXTI0_Callback ();
    33fe:	e0 91 7c 04 	lds	r30, 0x047C
    3402:	f0 91 7d 04 	lds	r31, 0x047D
    3406:	09 95       	icall
	}
}
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    341a:	af e5       	ldi	r26, 0x5F	; 95
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	ef e5       	ldi	r30, 0x5F	; 95
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	80 68       	ori	r24, 0x80	; 128
    3426:	8c 93       	st	X, r24
}
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    3436:	af e5       	ldi	r26, 0x5F	; 95
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	ef e5       	ldi	r30, 0x5F	; 95
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	8f 77       	andi	r24, 0x7F	; 127
    3442:	8c 93       	st	X, r24
}
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <HLCD_voidSendCommand>:
#include "../Include/HAL/LCD/LCD_Cfg.h"

#define F_CPU 8000000UL

void HLCD_voidSendCommand (u8 A_u8Command)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	2f 97       	sbiw	r28, 0x0f	; 15
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Command --> (RS-->0) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_RESET);
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	40 e0       	ldi	r20, 0x00	; 0
    3466:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	61 e0       	ldi	r22, 0x01	; 1
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>

	// Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	6f 85       	ldd	r22, Y+15	; 0x0f
    3478:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	62 e0       	ldi	r22, 0x02	; 2
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	a0 e0       	ldi	r26, 0x00	; 0
    348c:	b0 e4       	ldi	r27, 0x40	; 64
    348e:	8b 87       	std	Y+11, r24	; 0x0b
    3490:	9c 87       	std	Y+12, r25	; 0x0c
    3492:	ad 87       	std	Y+13, r26	; 0x0d
    3494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3496:	6b 85       	ldd	r22, Y+11	; 0x0b
    3498:	7c 85       	ldd	r23, Y+12	; 0x0c
    349a:	8d 85       	ldd	r24, Y+13	; 0x0d
    349c:	9e 85       	ldd	r25, Y+14	; 0x0e
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	4a ef       	ldi	r20, 0xFA	; 250
    34a4:	54 e4       	ldi	r21, 0x44	; 68
    34a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	8f 83       	std	Y+7, r24	; 0x07
    34b0:	98 87       	std	Y+8, r25	; 0x08
    34b2:	a9 87       	std	Y+9, r26	; 0x09
    34b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b6:	6f 81       	ldd	r22, Y+7	; 0x07
    34b8:	78 85       	ldd	r23, Y+8	; 0x08
    34ba:	89 85       	ldd	r24, Y+9	; 0x09
    34bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e8       	ldi	r20, 0x80	; 128
    34c4:	5f e3       	ldi	r21, 0x3F	; 63
    34c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ca:	88 23       	and	r24, r24
    34cc:	2c f4       	brge	.+10     	; 0x34d8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	9e 83       	std	Y+6, r25	; 0x06
    34d4:	8d 83       	std	Y+5, r24	; 0x05
    34d6:	3f c0       	rjmp	.+126    	; 0x3556 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    34d8:	6f 81       	ldd	r22, Y+7	; 0x07
    34da:	78 85       	ldd	r23, Y+8	; 0x08
    34dc:	89 85       	ldd	r24, Y+9	; 0x09
    34de:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	3f ef       	ldi	r19, 0xFF	; 255
    34e4:	4f e7       	ldi	r20, 0x7F	; 127
    34e6:	57 e4       	ldi	r21, 0x47	; 71
    34e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34ec:	18 16       	cp	r1, r24
    34ee:	4c f5       	brge	.+82     	; 0x3542 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e2       	ldi	r20, 0x20	; 32
    34fe:	51 e4       	ldi	r21, 0x41	; 65
    3500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	bc 01       	movw	r22, r24
    350a:	cd 01       	movw	r24, r26
    350c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	9e 83       	std	Y+6, r25	; 0x06
    3516:	8d 83       	std	Y+5, r24	; 0x05
    3518:	0f c0       	rjmp	.+30     	; 0x3538 <HLCD_voidSendCommand+0xee>
    351a:	88 ec       	ldi	r24, 0xC8	; 200
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	9c 83       	std	Y+4, r25	; 0x04
    3520:	8b 83       	std	Y+3, r24	; 0x03
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	9c 81       	ldd	r25, Y+4	; 0x04
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <HLCD_voidSendCommand+0xdc>
    352a:	9c 83       	std	Y+4, r25	; 0x04
    352c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	9e 83       	std	Y+6, r25	; 0x06
    3536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3538:	8d 81       	ldd	r24, Y+5	; 0x05
    353a:	9e 81       	ldd	r25, Y+6	; 0x06
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	69 f7       	brne	.-38     	; 0x351a <HLCD_voidSendCommand+0xd0>
    3540:	14 c0       	rjmp	.+40     	; 0x356a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3542:	6f 81       	ldd	r22, Y+7	; 0x07
    3544:	78 85       	ldd	r23, Y+8	; 0x08
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	9a 85       	ldd	r25, Y+10	; 0x0a
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9e 83       	std	Y+6, r25	; 0x06
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	9a 83       	std	Y+2, r25	; 0x02
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <HLCD_voidSendCommand+0x118>
    3566:	9a 83       	std	Y+2, r25	; 0x02
    3568:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	62 e0       	ldi	r22, 0x02	; 2
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
}
    3574:	2f 96       	adiw	r28, 0x0f	; 15
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <HLCD_voidSendData>:

void HLCD_voidSendData (u8 A_u8Data)
{
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	2f 97       	sbiw	r28, 0x0f	; 15
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Data --> (RS-->1) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_SET);
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	41 e0       	ldi	r20, 0x01	; 1
    35a2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    35b4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	62 e0       	ldi	r22, 0x02	; 2
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	a0 e0       	ldi	r26, 0x00	; 0
    35c8:	b0 e4       	ldi	r27, 0x40	; 64
    35ca:	8b 87       	std	Y+11, r24	; 0x0b
    35cc:	9c 87       	std	Y+12, r25	; 0x0c
    35ce:	ad 87       	std	Y+13, r26	; 0x0d
    35d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4a ef       	ldi	r20, 0xFA	; 250
    35e0:	54 e4       	ldi	r21, 0x44	; 68
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8f 83       	std	Y+7, r24	; 0x07
    35ec:	98 87       	std	Y+8, r25	; 0x08
    35ee:	a9 87       	std	Y+9, r26	; 0x09
    35f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35f2:	6f 81       	ldd	r22, Y+7	; 0x07
    35f4:	78 85       	ldd	r23, Y+8	; 0x08
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5f e3       	ldi	r21, 0x3F	; 63
    3602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3606:	88 23       	and	r24, r24
    3608:	2c f4       	brge	.+10     	; 0x3614 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	9e 83       	std	Y+6, r25	; 0x06
    3610:	8d 83       	std	Y+5, r24	; 0x05
    3612:	3f c0       	rjmp	.+126    	; 0x3692 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    3614:	6f 81       	ldd	r22, Y+7	; 0x07
    3616:	78 85       	ldd	r23, Y+8	; 0x08
    3618:	89 85       	ldd	r24, Y+9	; 0x09
    361a:	9a 85       	ldd	r25, Y+10	; 0x0a
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	3f ef       	ldi	r19, 0xFF	; 255
    3620:	4f e7       	ldi	r20, 0x7F	; 127
    3622:	57 e4       	ldi	r21, 0x47	; 71
    3624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3628:	18 16       	cp	r1, r24
    362a:	4c f5       	brge	.+82     	; 0x367e <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362c:	6b 85       	ldd	r22, Y+11	; 0x0b
    362e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3630:	8d 85       	ldd	r24, Y+13	; 0x0d
    3632:	9e 85       	ldd	r25, Y+14	; 0x0e
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e2       	ldi	r20, 0x20	; 32
    363a:	51 e4       	ldi	r21, 0x41	; 65
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	bc 01       	movw	r22, r24
    3646:	cd 01       	movw	r24, r26
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9e 83       	std	Y+6, r25	; 0x06
    3652:	8d 83       	std	Y+5, r24	; 0x05
    3654:	0f c0       	rjmp	.+30     	; 0x3674 <HLCD_voidSendData+0xee>
    3656:	88 ec       	ldi	r24, 0xC8	; 200
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	9c 83       	std	Y+4, r25	; 0x04
    365c:	8b 83       	std	Y+3, r24	; 0x03
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	9c 81       	ldd	r25, Y+4	; 0x04
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <HLCD_voidSendData+0xdc>
    3666:	9c 83       	std	Y+4, r25	; 0x04
    3668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	9e 83       	std	Y+6, r25	; 0x06
    3672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	69 f7       	brne	.-38     	; 0x3656 <HLCD_voidSendData+0xd0>
    367c:	14 c0       	rjmp	.+40     	; 0x36a6 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367e:	6f 81       	ldd	r22, Y+7	; 0x07
    3680:	78 85       	ldd	r23, Y+8	; 0x08
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9e 83       	std	Y+6, r25	; 0x06
    3690:	8d 83       	std	Y+5, r24	; 0x05
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	9e 81       	ldd	r25, Y+6	; 0x06
    3696:	9a 83       	std	Y+2, r25	; 0x02
    3698:	89 83       	std	Y+1, r24	; 0x01
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <HLCD_voidSendData+0x118>
    36a2:	9a 83       	std	Y+2, r25	; 0x02
    36a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	62 e0       	ldi	r22, 0x02	; 2
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
}
    36b0:	2f 96       	adiw	r28, 0x0f	; 15
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	cf 91       	pop	r28
    36be:	df 91       	pop	r29
    36c0:	08 95       	ret

000036c2 <HLCD_voidInit>:


void HLCD_voidInit(void)
{
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	c6 54       	subi	r28, 0x46	; 70
    36d0:	d0 40       	sbci	r29, 0x00	; 0
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	fe 01       	movw	r30, r28
    36de:	ed 5b       	subi	r30, 0xBD	; 189
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	a0 ef       	ldi	r26, 0xF0	; 240
    36e8:	b1 e4       	ldi	r27, 0x41	; 65
    36ea:	80 83       	st	Z, r24
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	a2 83       	std	Z+2, r26	; 0x02
    36f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f2:	8e 01       	movw	r16, r28
    36f4:	01 5c       	subi	r16, 0xC1	; 193
    36f6:	1f 4f       	sbci	r17, 0xFF	; 255
    36f8:	fe 01       	movw	r30, r28
    36fa:	ed 5b       	subi	r30, 0xBD	; 189
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	4a ef       	ldi	r20, 0xFA	; 250
    370c:	54 e4       	ldi	r21, 0x44	; 68
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	f8 01       	movw	r30, r16
    3718:	80 83       	st	Z, r24
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	a2 83       	std	Z+2, r26	; 0x02
    371e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3720:	fe 01       	movw	r30, r28
    3722:	ff 96       	adiw	r30, 0x3f	; 63
    3724:	60 81       	ld	r22, Z
    3726:	71 81       	ldd	r23, Z+1	; 0x01
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e8       	ldi	r20, 0x80	; 128
    3732:	5f e3       	ldi	r21, 0x3F	; 63
    3734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3738:	88 23       	and	r24, r24
    373a:	2c f4       	brge	.+10     	; 0x3746 <HLCD_voidInit+0x84>
		__ticks = 1;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	9e af       	std	Y+62, r25	; 0x3e
    3742:	8d af       	std	Y+61, r24	; 0x3d
    3744:	46 c0       	rjmp	.+140    	; 0x37d2 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    3746:	fe 01       	movw	r30, r28
    3748:	ff 96       	adiw	r30, 0x3f	; 63
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	3f ef       	ldi	r19, 0xFF	; 255
    3756:	4f e7       	ldi	r20, 0x7F	; 127
    3758:	57 e4       	ldi	r21, 0x47	; 71
    375a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    375e:	18 16       	cp	r1, r24
    3760:	64 f5       	brge	.+88     	; 0x37ba <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3762:	fe 01       	movw	r30, r28
    3764:	ed 5b       	subi	r30, 0xBD	; 189
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	60 81       	ld	r22, Z
    376a:	71 81       	ldd	r23, Z+1	; 0x01
    376c:	82 81       	ldd	r24, Z+2	; 0x02
    376e:	93 81       	ldd	r25, Z+3	; 0x03
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 e2       	ldi	r20, 0x20	; 32
    3776:	51 e4       	ldi	r21, 0x41	; 65
    3778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9e af       	std	Y+62, r25	; 0x3e
    378e:	8d af       	std	Y+61, r24	; 0x3d
    3790:	0f c0       	rjmp	.+30     	; 0x37b0 <HLCD_voidInit+0xee>
    3792:	88 ec       	ldi	r24, 0xC8	; 200
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9c af       	std	Y+60, r25	; 0x3c
    3798:	8b af       	std	Y+59, r24	; 0x3b
    379a:	8b ad       	ldd	r24, Y+59	; 0x3b
    379c:	9c ad       	ldd	r25, Y+60	; 0x3c
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <HLCD_voidInit+0xdc>
    37a2:	9c af       	std	Y+60, r25	; 0x3c
    37a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    37a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	9e af       	std	Y+62, r25	; 0x3e
    37ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	69 f7       	brne	.-38     	; 0x3792 <HLCD_voidInit+0xd0>
    37b8:	16 c0       	rjmp	.+44     	; 0x37e6 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ba:	fe 01       	movw	r30, r28
    37bc:	ff 96       	adiw	r30, 0x3f	; 63
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	9e af       	std	Y+62, r25	; 0x3e
    37d0:	8d af       	std	Y+61, r24	; 0x3d
    37d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    37d6:	9a af       	std	Y+58, r25	; 0x3a
    37d8:	89 af       	std	Y+57, r24	; 0x39
    37da:	89 ad       	ldd	r24, Y+57	; 0x39
    37dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <HLCD_voidInit+0x11c>
    37e2:	9a af       	std	Y+58, r25	; 0x3a
    37e4:	89 af       	std	Y+57, r24	; 0x39
	// Wait for more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	// Function Set Command then wait for more than 39us
	HLCD_voidSendCommand(FUNCTION_SET);
    37e6:	88 e3       	ldi	r24, 0x38	; 56
    37e8:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	a0 e8       	ldi	r26, 0x80	; 128
    37f2:	bf e3       	ldi	r27, 0x3F	; 63
    37f4:	8d ab       	std	Y+53, r24	; 0x35
    37f6:	9e ab       	std	Y+54, r25	; 0x36
    37f8:	af ab       	std	Y+55, r26	; 0x37
    37fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fc:	6d a9       	ldd	r22, Y+53	; 0x35
    37fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3800:	8f a9       	ldd	r24, Y+55	; 0x37
    3802:	98 ad       	ldd	r25, Y+56	; 0x38
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	4a ef       	ldi	r20, 0xFA	; 250
    380a:	54 e4       	ldi	r21, 0x44	; 68
    380c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	89 ab       	std	Y+49, r24	; 0x31
    3816:	9a ab       	std	Y+50, r25	; 0x32
    3818:	ab ab       	std	Y+51, r26	; 0x33
    381a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    381c:	69 a9       	ldd	r22, Y+49	; 0x31
    381e:	7a a9       	ldd	r23, Y+50	; 0x32
    3820:	8b a9       	ldd	r24, Y+51	; 0x33
    3822:	9c a9       	ldd	r25, Y+52	; 0x34
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e8       	ldi	r20, 0x80	; 128
    382a:	5f e3       	ldi	r21, 0x3F	; 63
    382c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3830:	88 23       	and	r24, r24
    3832:	2c f4       	brge	.+10     	; 0x383e <HLCD_voidInit+0x17c>
		__ticks = 1;
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	98 ab       	std	Y+48, r25	; 0x30
    383a:	8f a7       	std	Y+47, r24	; 0x2f
    383c:	3f c0       	rjmp	.+126    	; 0x38bc <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    383e:	69 a9       	ldd	r22, Y+49	; 0x31
    3840:	7a a9       	ldd	r23, Y+50	; 0x32
    3842:	8b a9       	ldd	r24, Y+51	; 0x33
    3844:	9c a9       	ldd	r25, Y+52	; 0x34
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	3f ef       	ldi	r19, 0xFF	; 255
    384a:	4f e7       	ldi	r20, 0x7F	; 127
    384c:	57 e4       	ldi	r21, 0x47	; 71
    384e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3852:	18 16       	cp	r1, r24
    3854:	4c f5       	brge	.+82     	; 0x38a8 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3856:	6d a9       	ldd	r22, Y+53	; 0x35
    3858:	7e a9       	ldd	r23, Y+54	; 0x36
    385a:	8f a9       	ldd	r24, Y+55	; 0x37
    385c:	98 ad       	ldd	r25, Y+56	; 0x38
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e2       	ldi	r20, 0x20	; 32
    3864:	51 e4       	ldi	r21, 0x41	; 65
    3866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	bc 01       	movw	r22, r24
    3870:	cd 01       	movw	r24, r26
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	98 ab       	std	Y+48, r25	; 0x30
    387c:	8f a7       	std	Y+47, r24	; 0x2f
    387e:	0f c0       	rjmp	.+30     	; 0x389e <HLCD_voidInit+0x1dc>
    3880:	88 ec       	ldi	r24, 0xC8	; 200
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9e a7       	std	Y+46, r25	; 0x2e
    3886:	8d a7       	std	Y+45, r24	; 0x2d
    3888:	8d a5       	ldd	r24, Y+45	; 0x2d
    388a:	9e a5       	ldd	r25, Y+46	; 0x2e
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	f1 f7       	brne	.-4      	; 0x388c <HLCD_voidInit+0x1ca>
    3890:	9e a7       	std	Y+46, r25	; 0x2e
    3892:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3894:	8f a5       	ldd	r24, Y+47	; 0x2f
    3896:	98 a9       	ldd	r25, Y+48	; 0x30
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	98 ab       	std	Y+48, r25	; 0x30
    389c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389e:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a0:	98 a9       	ldd	r25, Y+48	; 0x30
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	69 f7       	brne	.-38     	; 0x3880 <HLCD_voidInit+0x1be>
    38a6:	14 c0       	rjmp	.+40     	; 0x38d0 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a8:	69 a9       	ldd	r22, Y+49	; 0x31
    38aa:	7a a9       	ldd	r23, Y+50	; 0x32
    38ac:	8b a9       	ldd	r24, Y+51	; 0x33
    38ae:	9c a9       	ldd	r25, Y+52	; 0x34
    38b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	98 ab       	std	Y+48, r25	; 0x30
    38ba:	8f a7       	std	Y+47, r24	; 0x2f
    38bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    38be:	98 a9       	ldd	r25, Y+48	; 0x30
    38c0:	9c a7       	std	Y+44, r25	; 0x2c
    38c2:	8b a7       	std	Y+43, r24	; 0x2b
    38c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    38c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	f1 f7       	brne	.-4      	; 0x38c8 <HLCD_voidInit+0x206>
    38cc:	9c a7       	std	Y+44, r25	; 0x2c
    38ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Display ON/OFF Control Command then wait for more than 39us
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    38d0:	8f e0       	ldi	r24, 0x0F	; 15
    38d2:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	a0 e8       	ldi	r26, 0x80	; 128
    38dc:	bf e3       	ldi	r27, 0x3F	; 63
    38de:	8f a3       	std	Y+39, r24	; 0x27
    38e0:	98 a7       	std	Y+40, r25	; 0x28
    38e2:	a9 a7       	std	Y+41, r26	; 0x29
    38e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e6:	6f a1       	ldd	r22, Y+39	; 0x27
    38e8:	78 a5       	ldd	r23, Y+40	; 0x28
    38ea:	89 a5       	ldd	r24, Y+41	; 0x29
    38ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a ef       	ldi	r20, 0xFA	; 250
    38f4:	54 e4       	ldi	r21, 0x44	; 68
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8b a3       	std	Y+35, r24	; 0x23
    3900:	9c a3       	std	Y+36, r25	; 0x24
    3902:	ad a3       	std	Y+37, r26	; 0x25
    3904:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3906:	6b a1       	ldd	r22, Y+35	; 0x23
    3908:	7c a1       	ldd	r23, Y+36	; 0x24
    390a:	8d a1       	ldd	r24, Y+37	; 0x25
    390c:	9e a1       	ldd	r25, Y+38	; 0x26
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	2c f4       	brge	.+10     	; 0x3928 <HLCD_voidInit+0x266>
		__ticks = 1;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9a a3       	std	Y+34, r25	; 0x22
    3924:	89 a3       	std	Y+33, r24	; 0x21
    3926:	3f c0       	rjmp	.+126    	; 0x39a6 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    3928:	6b a1       	ldd	r22, Y+35	; 0x23
    392a:	7c a1       	ldd	r23, Y+36	; 0x24
    392c:	8d a1       	ldd	r24, Y+37	; 0x25
    392e:	9e a1       	ldd	r25, Y+38	; 0x26
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	3f ef       	ldi	r19, 0xFF	; 255
    3934:	4f e7       	ldi	r20, 0x7F	; 127
    3936:	57 e4       	ldi	r21, 0x47	; 71
    3938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    393c:	18 16       	cp	r1, r24
    393e:	4c f5       	brge	.+82     	; 0x3992 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3940:	6f a1       	ldd	r22, Y+39	; 0x27
    3942:	78 a5       	ldd	r23, Y+40	; 0x28
    3944:	89 a5       	ldd	r24, Y+41	; 0x29
    3946:	9a a5       	ldd	r25, Y+42	; 0x2a
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e2       	ldi	r20, 0x20	; 32
    394e:	51 e4       	ldi	r21, 0x41	; 65
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	bc 01       	movw	r22, r24
    395a:	cd 01       	movw	r24, r26
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9a a3       	std	Y+34, r25	; 0x22
    3966:	89 a3       	std	Y+33, r24	; 0x21
    3968:	0f c0       	rjmp	.+30     	; 0x3988 <HLCD_voidInit+0x2c6>
    396a:	88 ec       	ldi	r24, 0xC8	; 200
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	98 a3       	std	Y+32, r25	; 0x20
    3970:	8f 8f       	std	Y+31, r24	; 0x1f
    3972:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3974:	98 a1       	ldd	r25, Y+32	; 0x20
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <HLCD_voidInit+0x2b4>
    397a:	98 a3       	std	Y+32, r25	; 0x20
    397c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397e:	89 a1       	ldd	r24, Y+33	; 0x21
    3980:	9a a1       	ldd	r25, Y+34	; 0x22
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	9a a3       	std	Y+34, r25	; 0x22
    3986:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3988:	89 a1       	ldd	r24, Y+33	; 0x21
    398a:	9a a1       	ldd	r25, Y+34	; 0x22
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	69 f7       	brne	.-38     	; 0x396a <HLCD_voidInit+0x2a8>
    3990:	14 c0       	rjmp	.+40     	; 0x39ba <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3992:	6b a1       	ldd	r22, Y+35	; 0x23
    3994:	7c a1       	ldd	r23, Y+36	; 0x24
    3996:	8d a1       	ldd	r24, Y+37	; 0x25
    3998:	9e a1       	ldd	r25, Y+38	; 0x26
    399a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	9a a3       	std	Y+34, r25	; 0x22
    39a4:	89 a3       	std	Y+33, r24	; 0x21
    39a6:	89 a1       	ldd	r24, Y+33	; 0x21
    39a8:	9a a1       	ldd	r25, Y+34	; 0x22
    39aa:	9e 8f       	std	Y+30, r25	; 0x1e
    39ac:	8d 8f       	std	Y+29, r24	; 0x1d
    39ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <HLCD_voidInit+0x2f0>
    39b6:	9e 8f       	std	Y+30, r25	; 0x1e
    39b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	a0 e0       	ldi	r26, 0x00	; 0
    39c6:	b0 e4       	ldi	r27, 0x40	; 64
    39c8:	89 8f       	std	Y+25, r24	; 0x19
    39ca:	9a 8f       	std	Y+26, r25	; 0x1a
    39cc:	ab 8f       	std	Y+27, r26	; 0x1b
    39ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d0:	69 8d       	ldd	r22, Y+25	; 0x19
    39d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a ef       	ldi	r20, 0xFA	; 250
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8d 8b       	std	Y+21, r24	; 0x15
    39ea:	9e 8b       	std	Y+22, r25	; 0x16
    39ec:	af 8b       	std	Y+23, r26	; 0x17
    39ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39f0:	6d 89       	ldd	r22, Y+21	; 0x15
    39f2:	7e 89       	ldd	r23, Y+22	; 0x16
    39f4:	8f 89       	ldd	r24, Y+23	; 0x17
    39f6:	98 8d       	ldd	r25, Y+24	; 0x18
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e8       	ldi	r20, 0x80	; 128
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a04:	88 23       	and	r24, r24
    3a06:	2c f4       	brge	.+10     	; 0x3a12 <HLCD_voidInit+0x350>
		__ticks = 1;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9c 8b       	std	Y+20, r25	; 0x14
    3a0e:	8b 8b       	std	Y+19, r24	; 0x13
    3a10:	3f c0       	rjmp	.+126    	; 0x3a90 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    3a12:	6d 89       	ldd	r22, Y+21	; 0x15
    3a14:	7e 89       	ldd	r23, Y+22	; 0x16
    3a16:	8f 89       	ldd	r24, Y+23	; 0x17
    3a18:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	3f ef       	ldi	r19, 0xFF	; 255
    3a1e:	4f e7       	ldi	r20, 0x7F	; 127
    3a20:	57 e4       	ldi	r21, 0x47	; 71
    3a22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a26:	18 16       	cp	r1, r24
    3a28:	4c f5       	brge	.+82     	; 0x3a7c <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9c 8b       	std	Y+20, r25	; 0x14
    3a50:	8b 8b       	std	Y+19, r24	; 0x13
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <HLCD_voidInit+0x3b0>
    3a54:	88 ec       	ldi	r24, 0xC8	; 200
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9a 8b       	std	Y+18, r25	; 0x12
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
    3a5c:	89 89       	ldd	r24, Y+17	; 0x11
    3a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <HLCD_voidInit+0x39e>
    3a64:	9a 8b       	std	Y+18, r25	; 0x12
    3a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	9c 8b       	std	Y+20, r25	; 0x14
    3a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	8b 89       	ldd	r24, Y+19	; 0x13
    3a74:	9c 89       	ldd	r25, Y+20	; 0x14
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <HLCD_voidInit+0x392>
    3a7a:	14 c0       	rjmp	.+40     	; 0x3aa4 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a80:	8f 89       	ldd	r24, Y+23	; 0x17
    3a82:	98 8d       	ldd	r25, Y+24	; 0x18
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	8b 89       	ldd	r24, Y+19	; 0x13
    3a92:	9c 89       	ldd	r25, Y+20	; 0x14
    3a94:	98 8b       	std	Y+16, r25	; 0x10
    3a96:	8f 87       	std	Y+15, r24	; 0x0f
    3a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9a:	98 89       	ldd	r25, Y+16	; 0x10
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <HLCD_voidInit+0x3da>
    3aa0:	98 8b       	std	Y+16, r25	; 0x10
    3aa2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Entry Mode Set Command then wait for more than 39us
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    3aa4:	86 e0       	ldi	r24, 0x06	; 6
    3aa6:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a0 e8       	ldi	r26, 0x80	; 128
    3ab0:	bf e3       	ldi	r27, 0x3F	; 63
    3ab2:	8b 87       	std	Y+11, r24	; 0x0b
    3ab4:	9c 87       	std	Y+12, r25	; 0x0c
    3ab6:	ad 87       	std	Y+13, r26	; 0x0d
    3ab8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	4a ef       	ldi	r20, 0xFA	; 250
    3ac8:	54 e4       	ldi	r21, 0x44	; 68
    3aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	8f 83       	std	Y+7, r24	; 0x07
    3ad4:	98 87       	std	Y+8, r25	; 0x08
    3ad6:	a9 87       	std	Y+9, r26	; 0x09
    3ad8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ada:	6f 81       	ldd	r22, Y+7	; 0x07
    3adc:	78 85       	ldd	r23, Y+8	; 0x08
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e8       	ldi	r20, 0x80	; 128
    3ae8:	5f e3       	ldi	r21, 0x3F	; 63
    3aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aee:	88 23       	and	r24, r24
    3af0:	2c f4       	brge	.+10     	; 0x3afc <HLCD_voidInit+0x43a>
		__ticks = 1;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	9e 83       	std	Y+6, r25	; 0x06
    3af8:	8d 83       	std	Y+5, r24	; 0x05
    3afa:	3f c0       	rjmp	.+126    	; 0x3b7a <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	89 85       	ldd	r24, Y+9	; 0x09
    3b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	3f ef       	ldi	r19, 0xFF	; 255
    3b08:	4f e7       	ldi	r20, 0x7F	; 127
    3b0a:	57 e4       	ldi	r21, 0x47	; 71
    3b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b10:	18 16       	cp	r1, r24
    3b12:	4c f5       	brge	.+82     	; 0x3b66 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e2       	ldi	r20, 0x20	; 32
    3b22:	51 e4       	ldi	r21, 0x41	; 65
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	9e 83       	std	Y+6, r25	; 0x06
    3b3a:	8d 83       	std	Y+5, r24	; 0x05
    3b3c:	0f c0       	rjmp	.+30     	; 0x3b5c <HLCD_voidInit+0x49a>
    3b3e:	88 ec       	ldi	r24, 0xC8	; 200
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	9c 83       	std	Y+4, r25	; 0x04
    3b44:	8b 83       	std	Y+3, r24	; 0x03
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <HLCD_voidInit+0x488>
    3b4e:	9c 83       	std	Y+4, r25	; 0x04
    3b50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
    3b54:	9e 81       	ldd	r25, Y+6	; 0x06
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	69 f7       	brne	.-38     	; 0x3b3e <HLCD_voidInit+0x47c>
    3b64:	14 c0       	rjmp	.+40     	; 0x3b8e <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b66:	6f 81       	ldd	r22, Y+7	; 0x07
    3b68:	78 85       	ldd	r23, Y+8	; 0x08
    3b6a:	89 85       	ldd	r24, Y+9	; 0x09
    3b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	9e 83       	std	Y+6, r25	; 0x06
    3b78:	8d 83       	std	Y+5, r24	; 0x05
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	9a 83       	std	Y+2, r25	; 0x02
    3b80:	89 83       	std	Y+1, r24	; 0x01
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	9a 81       	ldd	r25, Y+2	; 0x02
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	f1 f7       	brne	.-4      	; 0x3b86 <HLCD_voidInit+0x4c4>
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3b8e:	ca 5b       	subi	r28, 0xBA	; 186
    3b90:	df 4f       	sbci	r29, 0xFF	; 255
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	08 95       	ret

00003ba6 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	2e 97       	sbiw	r28, 0x0e	; 14
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	a0 e0       	ldi	r26, 0x00	; 0
    3bc6:	b0 e4       	ldi	r27, 0x40	; 64
    3bc8:	8b 87       	std	Y+11, r24	; 0x0b
    3bca:	9c 87       	std	Y+12, r25	; 0x0c
    3bcc:	ad 87       	std	Y+13, r26	; 0x0d
    3bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	4a ef       	ldi	r20, 0xFA	; 250
    3bde:	54 e4       	ldi	r21, 0x44	; 68
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	8f 83       	std	Y+7, r24	; 0x07
    3bea:	98 87       	std	Y+8, r25	; 0x08
    3bec:	a9 87       	std	Y+9, r26	; 0x09
    3bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf2:	78 85       	ldd	r23, Y+8	; 0x08
    3bf4:	89 85       	ldd	r24, Y+9	; 0x09
    3bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e8       	ldi	r20, 0x80	; 128
    3bfe:	5f e3       	ldi	r21, 0x3F	; 63
    3c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c04:	88 23       	and	r24, r24
    3c06:	2c f4       	brge	.+10     	; 0x3c12 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	9e 83       	std	Y+6, r25	; 0x06
    3c0e:	8d 83       	std	Y+5, r24	; 0x05
    3c10:	3f c0       	rjmp	.+126    	; 0x3c90 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    3c12:	6f 81       	ldd	r22, Y+7	; 0x07
    3c14:	78 85       	ldd	r23, Y+8	; 0x08
    3c16:	89 85       	ldd	r24, Y+9	; 0x09
    3c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	4f e7       	ldi	r20, 0x7F	; 127
    3c20:	57 e4       	ldi	r21, 0x47	; 71
    3c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c26:	18 16       	cp	r1, r24
    3c28:	4c f5       	brge	.+82     	; 0x3c7c <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e2       	ldi	r20, 0x20	; 32
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	9e 83       	std	Y+6, r25	; 0x06
    3c50:	8d 83       	std	Y+5, r24	; 0x05
    3c52:	0f c0       	rjmp	.+30     	; 0x3c72 <HLCD_voidClearDisplay+0xcc>
    3c54:	88 ec       	ldi	r24, 0xC8	; 200
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	9c 83       	std	Y+4, r25	; 0x04
    3c5a:	8b 83       	std	Y+3, r24	; 0x03
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <HLCD_voidClearDisplay+0xba>
    3c64:	9c 83       	std	Y+4, r25	; 0x04
    3c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c68:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	9e 83       	std	Y+6, r25	; 0x06
    3c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c72:	8d 81       	ldd	r24, Y+5	; 0x05
    3c74:	9e 81       	ldd	r25, Y+6	; 0x06
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	69 f7       	brne	.-38     	; 0x3c54 <HLCD_voidClearDisplay+0xae>
    3c7a:	14 c0       	rjmp	.+40     	; 0x3ca4 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c7e:	78 85       	ldd	r23, Y+8	; 0x08
    3c80:	89 85       	ldd	r24, Y+9	; 0x09
    3c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	9e 83       	std	Y+6, r25	; 0x06
    3c8e:	8d 83       	std	Y+5, r24	; 0x05
    3c90:	8d 81       	ldd	r24, Y+5	; 0x05
    3c92:	9e 81       	ldd	r25, Y+6	; 0x06
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <HLCD_voidClearDisplay+0xf6>
    3ca0:	9a 83       	std	Y+2, r25	; 0x02
    3ca2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3ca4:	2e 96       	adiw	r28, 0x0e	; 14
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <HLCD_voidDisplayString>:

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <HLCD_voidDisplayString+0x6>
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	9a 83       	std	Y+2, r25	; 0x02
    3cc2:	89 83       	std	Y+1, r24	; 0x01
    3cc4:	0b c0       	rjmp	.+22     	; 0x3cdc <HLCD_voidDisplayString+0x26>
	while (*A_8uPtrToString > 0)
	{
		HLCD_voidSendData(*A_8uPtrToString++);
    3cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cca:	20 81       	ld	r18, Z
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	01 96       	adiw	r24, 0x01	; 1
    3cd2:	9a 83       	std	Y+2, r25	; 0x02
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	82 2f       	mov	r24, r18
    3cd8:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
	while (*A_8uPtrToString > 0)
    3cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cde:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce0:	80 81       	ld	r24, Z
    3ce2:	88 23       	and	r24, r24
    3ce4:	81 f7       	brne	.-32     	; 0x3cc6 <HLCD_voidDisplayString+0x10>
	{
		HLCD_voidSendData(*A_8uPtrToString++);
	}
}
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	08 95       	ret

00003cf0 <HLCD_voidGoToPos>:


void HLCD_voidGoToPos (LCD_ROW_e A_LCDRow, LCD_COL_e A_LCDCol)
{
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <HLCD_voidGoToPos+0x6>
    3cf6:	00 d0       	rcall	.+0      	; 0x3cf8 <HLCD_voidGoToPos+0x8>
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_LCDRow)
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	28 2f       	mov	r18, r24
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	3c 83       	std	Y+4, r19	; 0x04
    3d08:	2b 83       	std	Y+3, r18	; 0x03
    3d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0e:	81 30       	cpi	r24, 0x01	; 1
    3d10:	91 05       	cpc	r25, r1
    3d12:	31 f0       	breq	.+12     	; 0x3d20 <HLCD_voidGoToPos+0x30>
    3d14:	2b 81       	ldd	r18, Y+3	; 0x03
    3d16:	3c 81       	ldd	r19, Y+4	; 0x04
    3d18:	22 30       	cpi	r18, 0x02	; 2
    3d1a:	31 05       	cpc	r19, r1
    3d1c:	31 f0       	breq	.+12     	; 0x3d2a <HLCD_voidGoToPos+0x3a>
    3d1e:	09 c0       	rjmp	.+18     	; 0x3d32 <HLCD_voidGoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	81 58       	subi	r24, 0x81	; 129
    3d24:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
    3d28:	04 c0       	rjmp	.+8      	; 0x3d32 <HLCD_voidGoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	81 54       	subi	r24, 0x41	; 65
    3d2e:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>
		break;
	default:
		break;
	}
}
    3d32:	0f 90       	pop	r0
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber (u32 A_u32Number)
{
    3d40:	ef 92       	push	r14
    3d42:	ff 92       	push	r15
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	df 93       	push	r29
    3d4a:	cf 93       	push	r28
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	28 97       	sbiw	r28, 0x08	; 8
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	6d 83       	std	Y+5, r22	; 0x05
    3d5e:	7e 83       	std	Y+6, r23	; 0x06
    3d60:	8f 83       	std	Y+7, r24	; 0x07
    3d62:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	a0 e0       	ldi	r26, 0x00	; 0
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	89 83       	std	Y+1, r24	; 0x01
    3d6e:	9a 83       	std	Y+2, r25	; 0x02
    3d70:	ab 83       	std	Y+3, r26	; 0x03
    3d72:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    3d74:	8d 81       	ldd	r24, Y+5	; 0x05
    3d76:	9e 81       	ldd	r25, Y+6	; 0x06
    3d78:	af 81       	ldd	r26, Y+7	; 0x07
    3d7a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d7c:	00 97       	sbiw	r24, 0x00	; 0
    3d7e:	a1 05       	cpc	r26, r1
    3d80:	b1 05       	cpc	r27, r1
    3d82:	d1 f5       	brne	.+116    	; 0x3df8 <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    3d84:	80 e3       	ldi	r24, 0x30	; 48
    3d86:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HLCD_voidSendData>
    3d8a:	36 c0       	rjmp	.+108    	; 0x3df8 <HLCD_voidDisplayNumber+0xb8>
	}

	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	ab 81       	ldd	r26, Y+3	; 0x03
    3d92:	bc 81       	ldd	r27, Y+4	; 0x04
    3d94:	2a e0       	ldi	r18, 0x0A	; 10
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__mulsi3>
    3da4:	7b 01       	movw	r14, r22
    3da6:	8c 01       	movw	r16, r24
    3da8:	8d 81       	ldd	r24, Y+5	; 0x05
    3daa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dac:	af 81       	ldd	r26, Y+7	; 0x07
    3dae:	b8 85       	ldd	r27, Y+8	; 0x08
    3db0:	2a e0       	ldi	r18, 0x0A	; 10
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	bc 01       	movw	r22, r24
    3dba:	cd 01       	movw	r24, r26
    3dbc:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	8e 0d       	add	r24, r14
    3dc6:	9f 1d       	adc	r25, r15
    3dc8:	a0 1f       	adc	r26, r16
    3dca:	b1 1f       	adc	r27, r17
    3dcc:	89 83       	std	Y+1, r24	; 0x01
    3dce:	9a 83       	std	Y+2, r25	; 0x02
    3dd0:	ab 83       	std	Y+3, r26	; 0x03
    3dd2:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd8:	af 81       	ldd	r26, Y+7	; 0x07
    3dda:	b8 85       	ldd	r27, Y+8	; 0x08
    3ddc:	2a e0       	ldi	r18, 0x0A	; 10
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e0       	ldi	r20, 0x00	; 0
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    3dec:	da 01       	movw	r26, r20
    3dee:	c9 01       	movw	r24, r18
    3df0:	8d 83       	std	Y+5, r24	; 0x05
    3df2:	9e 83       	std	Y+6, r25	; 0x06
    3df4:	af 83       	std	Y+7, r26	; 0x07
    3df6:	b8 87       	std	Y+8, r27	; 0x08
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}

	while (A_u32Number != 0)
    3df8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfc:	af 81       	ldd	r26, Y+7	; 0x07
    3dfe:	b8 85       	ldd	r27, Y+8	; 0x08
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	a1 05       	cpc	r26, r1
    3e04:	b1 05       	cpc	r27, r1
    3e06:	11 f6       	brne	.-124    	; 0x3d8c <HLCD_voidDisplayNumber+0x4c>
    3e08:	23 c0       	rjmp	.+70     	; 0x3e50 <HLCD_voidDisplayNumber+0x110>
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3e10:	bc 81       	ldd	r27, Y+4	; 0x04
    3e12:	2a e0       	ldi	r18, 0x0A	; 10
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	50 e0       	ldi	r21, 0x00	; 0
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	80 5d       	subi	r24, 0xD0	; 208
    3e28:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e30:	ab 81       	ldd	r26, Y+3	; 0x03
    3e32:	bc 81       	ldd	r27, Y+4	; 0x04
    3e34:	2a e0       	ldi	r18, 0x0A	; 10
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    3e44:	da 01       	movw	r26, r20
    3e46:	c9 01       	movw	r24, r18
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	ab 83       	std	Y+3, r26	; 0x03
    3e4e:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	9a 81       	ldd	r25, Y+2	; 0x02
    3e54:	ab 81       	ldd	r26, Y+3	; 0x03
    3e56:	bc 81       	ldd	r27, Y+4	; 0x04
    3e58:	81 30       	cpi	r24, 0x01	; 1
    3e5a:	91 05       	cpc	r25, r1
    3e5c:	a1 05       	cpc	r26, r1
    3e5e:	b1 05       	cpc	r27, r1
    3e60:	a1 f6       	brne	.-88     	; 0x3e0a <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    3e62:	28 96       	adiw	r28, 0x08	; 8
    3e64:	0f b6       	in	r0, 0x3f	; 63
    3e66:	f8 94       	cli
    3e68:	de bf       	out	0x3e, r29	; 62
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	cf 91       	pop	r28
    3e70:	df 91       	pop	r29
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	ff 90       	pop	r15
    3e78:	ef 90       	pop	r14
    3e7a:	08 95       	ret

00003e7c <HLCD_voidSendSpecialSymbol>:


void HLCD_voidSendSpecialSymbol (u8 *A_pu8SymbolArray, LCD_PATTERNS_e A_PatternNum,LCD_ROW_e A_RowNo, LCD_COL_e A_ColNo)
{
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	27 97       	sbiw	r28, 0x07	; 7
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	de bf       	out	0x3e, r29	; 62
    3e8c:	0f be       	out	0x3f, r0	; 63
    3e8e:	cd bf       	out	0x3d, r28	; 61
    3e90:	9c 83       	std	Y+4, r25	; 0x04
    3e92:	8b 83       	std	Y+3, r24	; 0x03
    3e94:	6d 83       	std	Y+5, r22	; 0x05
    3e96:	4e 83       	std	Y+6, r20	; 0x06
    3e98:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress;

	// Calculate CGRAM Address
	local_u8CGRAMAddress = A_PatternNum * 8;
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	88 2f       	mov	r24, r24
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    3eae:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb0:	80 64       	ori	r24, 0x40	; 64
    3eb2:	8a 83       	std	Y+2, r24	; 0x02
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	0e 94 25 1a 	call	0x344a	; 0x344a <HLCD_voidSendCommand>

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    3eba:	19 82       	std	Y+1, r1	; 0x01
    3ebc:	0e c0       	rjmp	.+28     	; 0x3eda <HLCD_voidSendSpecialSymbol+0x5e>
	{
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec8:	fc 01       	movw	r30, r24
    3eca:	e2 0f       	add	r30, r18
    3ecc:	f3 1f       	adc	r31, r19
    3ece:	80 81       	ld	r24, Z
    3ed0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HLCD_voidSendData>
	local_u8CGRAMAddress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	8f 5f       	subi	r24, 0xFF	; 255
    3ed8:	89 83       	std	Y+1, r24	; 0x01
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	88 30       	cpi	r24, 0x08	; 8
    3ede:	78 f3       	brcs	.-34     	; 0x3ebe <HLCD_voidSendSpecialSymbol+0x42>
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
	}

	// Send Command to Set DDRAM Address
	HLCD_voidGoToPos(A_RowNo, A_ColNo);
    3ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee4:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <HLCD_voidGoToPos>
	// Display Pattern
	HLCD_voidSendData(A_PatternNum);
    3ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eea:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HLCD_voidSendData>
}
    3eee:	27 96       	adiw	r28, 0x07	; 7
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	cf 91       	pop	r28
    3efc:	df 91       	pop	r29
    3efe:	08 95       	ret

00003f00 <HLED_voidTurnOn>:
 * HAL
 */


void HLED_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    3f00:	df 93       	push	r29
    3f02:	cf 93       	push	r28
    3f04:	00 d0       	rcall	.+0      	; 0x3f06 <HLED_voidTurnOn+0x6>
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    3f0c:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	6a 81       	ldd	r22, Y+2	; 0x02
    3f12:	41 e0       	ldi	r20, 0x01	; 1
    3f14:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
}
    3f18:	0f 90       	pop	r0
    3f1a:	0f 90       	pop	r0
    3f1c:	cf 91       	pop	r28
    3f1e:	df 91       	pop	r29
    3f20:	08 95       	ret

00003f22 <HLED_voidTurnOff>:
void HLED_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	00 d0       	rcall	.+0      	; 0x3f28 <HLED_voidTurnOff+0x6>
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	89 83       	std	Y+1, r24	; 0x01
    3f2e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	6a 81       	ldd	r22, Y+2	; 0x02
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <MDIO_voidSetPinValue>
}
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	cf 91       	pop	r28
    3f40:	df 91       	pop	r29
    3f42:	08 95       	ret

00003f44 <HLED_voidToggleLED>:
void HLED_voidToggleLED (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	00 d0       	rcall	.+0      	; 0x3f4a <HLED_voidToggleLED+0x6>
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	89 83       	std	Y+1, r24	; 0x01
    3f50:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_PINID);
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	48 2f       	mov	r20, r24
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	28 2f       	mov	r18, r24
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	ca 01       	movw	r24, r20
    3f60:	b9 01       	movw	r22, r18
    3f62:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <MDIO_voidTogglePinValue>
}
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	08 95       	ret

00003f70 <MTIMER0_voidInit>:
#define NULL 0
void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void)
{
    3f70:	df 93       	push	r29
    3f72:	cf 93       	push	r28
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (TIMER0_CLK | (OC0_MODE << 4));

#elif TIMER0_MODE == FAST_PWM_MODE

	// Set Wave Generation Form to 	FAST-PWM
	SET_BIT(TCCR0,3);
    3f78:	a3 e5       	ldi	r26, 0x53	; 83
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	e3 e5       	ldi	r30, 0x53	; 83
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	88 60       	ori	r24, 0x08	; 8
    3f84:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    3f86:	a3 e5       	ldi	r26, 0x53	; 83
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	e3 e5       	ldi	r30, 0x53	; 83
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	80 64       	ori	r24, 0x40	; 64
    3f92:	8c 93       	st	X, r24

	// Disable All Timer0 Interrupts
	CLR_BIT(TIMSK,1);
    3f94:	a9 e5       	ldi	r26, 0x59	; 89
    3f96:	b0 e0       	ldi	r27, 0x00	; 0
    3f98:	e9 e5       	ldi	r30, 0x59	; 89
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	80 81       	ld	r24, Z
    3f9e:	8d 7f       	andi	r24, 0xFD	; 253
    3fa0:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,0);
    3fa2:	a9 e5       	ldi	r26, 0x59	; 89
    3fa4:	b0 e0       	ldi	r27, 0x00	; 0
    3fa6:	e9 e5       	ldi	r30, 0x59	; 89
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	80 81       	ld	r24, Z
    3fac:	8e 7f       	andi	r24, 0xFE	; 254
    3fae:	8c 93       	st	X, r24

	// set OCR0 value
	OCR0 = OCR0_VALUE;
    3fb0:	ec e5       	ldi	r30, 0x5C	; 92
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	87 ec       	ldi	r24, 0xC7	; 199
    3fb6:	80 83       	st	Z, r24

	// set oc0 configuration
	//start Timer by setting its CLK
	TCCR0 &= TIMER0_CLK_OCR_MASK;
    3fb8:	a3 e5       	ldi	r26, 0x53	; 83
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	e3 e5       	ldi	r30, 0x53	; 83
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	88 7c       	andi	r24, 0xC8	; 200
    3fc4:	8c 93       	st	X, r24
	TCCR0 |= (TIMER0_CLK | (OC0_MODE << 4));
    3fc6:	a3 e5       	ldi	r26, 0x53	; 83
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	e3 e5       	ldi	r30, 0x53	; 83
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	80 81       	ld	r24, Z
    3fd0:	82 63       	ori	r24, 0x32	; 50
    3fd2:	8c 93       	st	X, r24

#endif
}
    3fd4:	cf 91       	pop	r28
    3fd6:	df 91       	pop	r29
    3fd8:	08 95       	ret

00003fda <MTIMER0_voidSetPreloadValue>:
void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks)
{
    3fda:	df 93       	push	r29
    3fdc:	cf 93       	push	r28
    3fde:	0f 92       	push	r0
    3fe0:	cd b7       	in	r28, 0x3d	; 61
    3fe2:	de b7       	in	r29, 0x3e	; 62
    3fe4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
    3fe6:	e2 e5       	ldi	r30, 0x52	; 82
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	80 83       	st	Z, r24
}
    3fee:	0f 90       	pop	r0
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <MTIMER0_voidSetOVFCallback>:
void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void))
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <MTIMER0_voidSetOVFCallback+0x6>
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	9a 83       	std	Y+2, r25	; 0x02
    4002:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    4004:	89 81       	ldd	r24, Y+1	; 0x01
    4006:	9a 81       	ldd	r25, Y+2	; 0x02
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	31 f0       	breq	.+12     	; 0x4018 <MTIMER0_voidSetOVFCallback+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	9a 81       	ldd	r25, Y+2	; 0x02
    4010:	90 93 83 04 	sts	0x0483, r25
    4014:	80 93 82 04 	sts	0x0482, r24
	}
}
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	cf 91       	pop	r28
    401e:	df 91       	pop	r29
    4020:	08 95       	ret

00004022 <__vector_11>:


void __vector_11(void)__attribute__((signal));
void __vector_11(void){
    4022:	1f 92       	push	r1
    4024:	0f 92       	push	r0
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	0f 92       	push	r0
    402a:	11 24       	eor	r1, r1
    402c:	2f 93       	push	r18
    402e:	3f 93       	push	r19
    4030:	4f 93       	push	r20
    4032:	5f 93       	push	r21
    4034:	6f 93       	push	r22
    4036:	7f 93       	push	r23
    4038:	8f 93       	push	r24
    403a:	9f 93       	push	r25
    403c:	af 93       	push	r26
    403e:	bf 93       	push	r27
    4040:	ef 93       	push	r30
    4042:	ff 93       	push	r31
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    404c:	80 91 82 04 	lds	r24, 0x0482
    4050:	90 91 83 04 	lds	r25, 0x0483
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	29 f0       	breq	.+10     	; 0x4062 <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    4058:	e0 91 82 04 	lds	r30, 0x0482
    405c:	f0 91 83 04 	lds	r31, 0x0483
    4060:	09 95       	icall
	}
}
    4062:	cf 91       	pop	r28
    4064:	df 91       	pop	r29
    4066:	ff 91       	pop	r31
    4068:	ef 91       	pop	r30
    406a:	bf 91       	pop	r27
    406c:	af 91       	pop	r26
    406e:	9f 91       	pop	r25
    4070:	8f 91       	pop	r24
    4072:	7f 91       	pop	r23
    4074:	6f 91       	pop	r22
    4076:	5f 91       	pop	r21
    4078:	4f 91       	pop	r20
    407a:	3f 91       	pop	r19
    407c:	2f 91       	pop	r18
    407e:	0f 90       	pop	r0
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	0f 90       	pop	r0
    4084:	1f 90       	pop	r1
    4086:	18 95       	reti

00004088 <MTIMER0_voidSetCTCCallback>:
void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	00 d0       	rcall	.+0      	; 0x408e <MTIMER0_voidSetCTCCallback+0x6>
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	9a 83       	std	Y+2, r25	; 0x02
    4094:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	9a 81       	ldd	r25, Y+2	; 0x02
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	31 f0       	breq	.+12     	; 0x40aa <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	90 93 85 04 	sts	0x0485, r25
    40a6:	80 93 84 04 	sts	0x0484, r24
	}
}
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <MTIMER0_voidSetOCR0Value>:
void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	0f 92       	push	r0
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    40c0:	ec e5       	ldi	r30, 0x5C	; 92
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	80 83       	st	Z, r24
}
    40c8:	0f 90       	pop	r0
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <MTIMER0_voidStopTimer>:
void MTIMER0_voidStopTimer (void)
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_MASK;
    40d8:	a3 e5       	ldi	r26, 0x53	; 83
    40da:	b0 e0       	ldi	r27, 0x00	; 0
    40dc:	e3 e5       	ldi	r30, 0x53	; 83
    40de:	f0 e0       	ldi	r31, 0x00	; 0
    40e0:	80 81       	ld	r24, Z
    40e2:	88 7f       	andi	r24, 0xF8	; 248
    40e4:	8c 93       	st	X, r24
}
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	08 95       	ret

000040ec <MTIMER1_voidInit>:
void MTIMER1_voidInit()
{
    40ec:	df 93       	push	r29
    40ee:	cf 93       	push	r28
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
	//delect timer mode -->14
	CLR_BIT(TCCR1A,0);
    40f4:	af e4       	ldi	r26, 0x4F	; 79
    40f6:	b0 e0       	ldi	r27, 0x00	; 0
    40f8:	ef e4       	ldi	r30, 0x4F	; 79
    40fa:	f0 e0       	ldi	r31, 0x00	; 0
    40fc:	80 81       	ld	r24, Z
    40fe:	8e 7f       	andi	r24, 0xFE	; 254
    4100:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    4102:	af e4       	ldi	r26, 0x4F	; 79
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	ef e4       	ldi	r30, 0x4F	; 79
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	82 60       	ori	r24, 0x02	; 2
    410e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    4110:	ae e4       	ldi	r26, 0x4E	; 78
    4112:	b0 e0       	ldi	r27, 0x00	; 0
    4114:	ee e4       	ldi	r30, 0x4E	; 78
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	80 81       	ld	r24, Z
    411a:	88 60       	ori	r24, 0x08	; 8
    411c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    411e:	ae e4       	ldi	r26, 0x4E	; 78
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	ee e4       	ldi	r30, 0x4E	; 78
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	80 81       	ld	r24, Z
    4128:	80 61       	ori	r24, 0x10	; 16
    412a:	8c 93       	st	X, r24

	//Non-Tnverting mode for OC1A
	CLR_BIT(TCCR1A,6);
    412c:	af e4       	ldi	r26, 0x4F	; 79
    412e:	b0 e0       	ldi	r27, 0x00	; 0
    4130:	ef e4       	ldi	r30, 0x4F	; 79
    4132:	f0 e0       	ldi	r31, 0x00	; 0
    4134:	80 81       	ld	r24, Z
    4136:	8f 7b       	andi	r24, 0xBF	; 191
    4138:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    413a:	af e4       	ldi	r26, 0x4F	; 79
    413c:	b0 e0       	ldi	r27, 0x00	; 0
    413e:	ef e4       	ldi	r30, 0x4F	; 79
    4140:	f0 e0       	ldi	r31, 0x00	; 0
    4142:	80 81       	ld	r24, Z
    4144:	80 68       	ori	r24, 0x80	; 128
    4146:	8c 93       	st	X, r24

	//ICR1 <-- 19999
	ICR1 = 19999;
    4148:	e6 e4       	ldi	r30, 0x46	; 70
    414a:	f0 e0       	ldi	r31, 0x00	; 0
    414c:	8f e1       	ldi	r24, 0x1F	; 31
    414e:	9e e4       	ldi	r25, 0x4E	; 78
    4150:	91 83       	std	Z+1, r25	; 0x01
    4152:	80 83       	st	Z, r24
	/*OCR1A <-- 1000
	 * 1000 --> 0 	degree
	 * 1500 --> 90 	degree
	 * 2000 --> 180 degree
	 */
	OCR1A = 1000;
    4154:	ea e4       	ldi	r30, 0x4A	; 74
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	88 ee       	ldi	r24, 0xE8	; 232
    415a:	93 e0       	ldi	r25, 0x03	; 3
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	80 83       	st	Z, r24

	//Start timer by setting its clock
	CLR_BIT(TCCR1B,0);
    4160:	ae e4       	ldi	r26, 0x4E	; 78
    4162:	b0 e0       	ldi	r27, 0x00	; 0
    4164:	ee e4       	ldi	r30, 0x4E	; 78
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	80 81       	ld	r24, Z
    416a:	8e 7f       	andi	r24, 0xFE	; 254
    416c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    416e:	ae e4       	ldi	r26, 0x4E	; 78
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	ee e4       	ldi	r30, 0x4E	; 78
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	80 81       	ld	r24, Z
    4178:	82 60       	ori	r24, 0x02	; 2
    417a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    417c:	ae e4       	ldi	r26, 0x4E	; 78
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	ee e4       	ldi	r30, 0x4E	; 78
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	80 81       	ld	r24, Z
    4186:	8b 7f       	andi	r24, 0xFB	; 251
    4188:	8c 93       	st	X, r24

}
    418a:	cf 91       	pop	r28
    418c:	df 91       	pop	r29
    418e:	08 95       	ret

00004190 <MTIMER1_voidSetOCR1AValue>:
void MTIMER1_voidSetOCR1AValue(u16 A_u16value)
{
    4190:	df 93       	push	r29
    4192:	cf 93       	push	r28
    4194:	00 d0       	rcall	.+0      	; 0x4196 <MTIMER1_voidSetOCR1AValue+0x6>
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	9a 83       	std	Y+2, r25	; 0x02
    419c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16value;
    419e:	ea e4       	ldi	r30, 0x4A	; 74
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	9a 81       	ldd	r25, Y+2	; 0x02
    41a6:	91 83       	std	Z+1, r25	; 0x01
    41a8:	80 83       	st	Z, r24
}
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	cf 91       	pop	r28
    41b0:	df 91       	pop	r29
    41b2:	08 95       	ret

000041b4 <MTIMER1_voidICUSWInit>:
void MTIMER1_voidICUSWInit()
{
    41b4:	df 93       	push	r29
    41b6:	cf 93       	push	r28
    41b8:	cd b7       	in	r28, 0x3d	; 61
    41ba:	de b7       	in	r29, 0x3e	; 62
	//Start timer by setting its clock
	CLR_BIT(TCCR1B,0);
    41bc:	ae e4       	ldi	r26, 0x4E	; 78
    41be:	b0 e0       	ldi	r27, 0x00	; 0
    41c0:	ee e4       	ldi	r30, 0x4E	; 78
    41c2:	f0 e0       	ldi	r31, 0x00	; 0
    41c4:	80 81       	ld	r24, Z
    41c6:	8e 7f       	andi	r24, 0xFE	; 254
    41c8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    41ca:	ae e4       	ldi	r26, 0x4E	; 78
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	ee e4       	ldi	r30, 0x4E	; 78
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	80 81       	ld	r24, Z
    41d4:	82 60       	ori	r24, 0x02	; 2
    41d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    41d8:	ae e4       	ldi	r26, 0x4E	; 78
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	ee e4       	ldi	r30, 0x4E	; 78
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	8b 7f       	andi	r24, 0xFB	; 251
    41e4:	8c 93       	st	X, r24
}
    41e6:	cf 91       	pop	r28
    41e8:	df 91       	pop	r29
    41ea:	08 95       	ret

000041ec <MTIMER1_voidSetTimer1Value>:
void MTIMER1_voidSetTimer1Value(u16 A_u16Value)
{
    41ec:	df 93       	push	r29
    41ee:	cf 93       	push	r28
    41f0:	00 d0       	rcall	.+0      	; 0x41f2 <MTIMER1_voidSetTimer1Value+0x6>
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
    41f6:	9a 83       	std	Y+2, r25	; 0x02
    41f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1= A_u16Value;
    41fa:	ec e4       	ldi	r30, 0x4C	; 76
    41fc:	f0 e0       	ldi	r31, 0x00	; 0
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	9a 81       	ldd	r25, Y+2	; 0x02
    4202:	91 83       	std	Z+1, r25	; 0x01
    4204:	80 83       	st	Z, r24
}
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	cf 91       	pop	r28
    420c:	df 91       	pop	r29
    420e:	08 95       	ret

00004210 <MTIMER1_u16ReadTimer1Value>:
u16 MTIMER1_u16ReadTimer1Value(void)
{
    4210:	df 93       	push	r29
    4212:	cf 93       	push	r28
    4214:	cd b7       	in	r28, 0x3d	; 61
    4216:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    4218:	ec e4       	ldi	r30, 0x4C	; 76
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	80 81       	ld	r24, Z
    421e:	91 81       	ldd	r25, Z+1	; 0x01
}
    4220:	cf 91       	pop	r28
    4222:	df 91       	pop	r29
    4224:	08 95       	ret

00004226 <TWI_voidInitMaster>:
#include "../include/MCAL/TWI/TWI_private.h"
#include "../include/MCAL/TWI/TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    4226:	df 93       	push	r29
    4228:	cf 93       	push	r28
    422a:	0f 92       	push	r0
    422c:	cd b7       	in	r28, 0x3d	; 61
    422e:	de b7       	in	r29, 0x3e	; 62
    4230:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    4232:	a6 e5       	ldi	r26, 0x56	; 86
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	e6 e5       	ldi	r30, 0x56	; 86
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	80 64       	ori	r24, 0x40	; 64
    423e:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
    4240:	e0 e2       	ldi	r30, 0x20	; 32
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    4248:	a1 e2       	ldi	r26, 0x21	; 33
    424a:	b0 e0       	ldi	r27, 0x00	; 0
    424c:	e1 e2       	ldi	r30, 0x21	; 33
    424e:	f0 e0       	ldi	r31, 0x00	; 0
    4250:	80 81       	ld	r24, Z
    4252:	8e 7f       	andi	r24, 0xFE	; 254
    4254:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    4256:	a1 e2       	ldi	r26, 0x21	; 33
    4258:	b0 e0       	ldi	r27, 0x00	; 0
    425a:	e1 e2       	ldi	r30, 0x21	; 33
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	80 81       	ld	r24, Z
    4260:	8d 7f       	andi	r24, 0xFD	; 253
    4262:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    4264:	89 81       	ldd	r24, Y+1	; 0x01
    4266:	88 23       	and	r24, r24
    4268:	29 f0       	breq	.+10     	; 0x4274 <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/ //bits from 1 to 7
		TWAR = (Copy_u8Address << 1);
    426a:	e2 e2       	ldi	r30, 0x22	; 34
    426c:	f0 e0       	ldi	r31, 0x00	; 0
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	88 0f       	add	r24, r24
    4272:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    4274:	a6 e5       	ldi	r26, 0x56	; 86
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	e6 e5       	ldi	r30, 0x56	; 86
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	80 81       	ld	r24, Z
    427e:	84 60       	ori	r24, 0x04	; 4
    4280:	8c 93       	st	X, r24
}
    4282:	0f 90       	pop	r0
    4284:	cf 91       	pop	r28
    4286:	df 91       	pop	r29
    4288:	08 95       	ret

0000428a <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    428a:	df 93       	push	r29
    428c:	cf 93       	push	r28
    428e:	0f 92       	push	r0
    4290:	cd b7       	in	r28, 0x3d	; 61
    4292:	de b7       	in	r29, 0x3e	; 62
    4294:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
    4296:	e2 e2       	ldi	r30, 0x22	; 34
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	88 0f       	add	r24, r24
    429e:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    42a0:	a6 e5       	ldi	r26, 0x56	; 86
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	e6 e5       	ldi	r30, 0x56	; 86
    42a6:	f0 e0       	ldi	r31, 0x00	; 0
    42a8:	80 81       	ld	r24, Z
    42aa:	80 64       	ori	r24, 0x40	; 64
    42ac:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    42ae:	a6 e5       	ldi	r26, 0x56	; 86
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	e6 e5       	ldi	r30, 0x56	; 86
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	80 81       	ld	r24, Z
    42b8:	84 60       	ori	r24, 0x04	; 4
    42ba:	8c 93       	st	X, r24
}
    42bc:	0f 90       	pop	r0
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	0f 92       	push	r0
    42ca:	cd b7       	in	r28, 0x3d	; 61
    42cc:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    42ce:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    42d0:	a6 e5       	ldi	r26, 0x56	; 86
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	e6 e5       	ldi	r30, 0x56	; 86
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	80 81       	ld	r24, Z
    42da:	80 62       	ori	r24, 0x20	; 32
    42dc:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    42de:	a6 e5       	ldi	r26, 0x56	; 86
    42e0:	b0 e0       	ldi	r27, 0x00	; 0
    42e2:	e6 e5       	ldi	r30, 0x56	; 86
    42e4:	f0 e0       	ldi	r31, 0x00	; 0
    42e6:	80 81       	ld	r24, Z
    42e8:	80 68       	ori	r24, 0x80	; 128
    42ea:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    42ec:	e6 e5       	ldi	r30, 0x56	; 86
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	80 81       	ld	r24, Z
    42f2:	88 23       	and	r24, r24
    42f4:	dc f7       	brge	.-10     	; 0x42ec <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
    42f6:	e1 e2       	ldi	r30, 0x21	; 33
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	80 81       	ld	r24, Z
    42fc:	88 2f       	mov	r24, r24
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	88 7f       	andi	r24, 0xF8	; 248
    4302:	90 70       	andi	r25, 0x00	; 0
    4304:	88 30       	cpi	r24, 0x08	; 8
    4306:	91 05       	cpc	r25, r1
    4308:	11 f0       	breq	.+4      	; 0x430e <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    430e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4310:	0f 90       	pop	r0
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	0f 92       	push	r0
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    4322:	19 82       	std	Y+1, r1	; 0x01
	// clear INT flag
	// Send Repeated Start Condition
	// Enable TWI
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    4324:	a6 e5       	ldi	r26, 0x56	; 86
    4326:	b0 e0       	ldi	r27, 0x00	; 0
    4328:	e6 e5       	ldi	r30, 0x56	; 86
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	80 81       	ld	r24, Z
    432e:	84 6a       	ori	r24, 0xA4	; 164
    4330:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4332:	e6 e5       	ldi	r30, 0x56	; 86
    4334:	f0 e0       	ldi	r31, 0x00	; 0
    4336:	80 81       	ld	r24, Z
    4338:	88 23       	and	r24, r24
    433a:	dc f7       	brge	.-10     	; 0x4332 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    433c:	e1 e2       	ldi	r30, 0x21	; 33
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	80 81       	ld	r24, Z
    4342:	88 2f       	mov	r24, r24
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	88 7f       	andi	r24, 0xF8	; 248
    4348:	90 70       	andi	r25, 0x00	; 0
    434a:	80 31       	cpi	r24, 0x10	; 16
    434c:	91 05       	cpc	r25, r1
    434e:	11 f0       	breq	.+4      	; 0x4354 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    4350:	82 e0       	ldi	r24, 0x02	; 2
    4352:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    4354:	89 81       	ldd	r24, Y+1	; 0x01
}
    4356:	0f 90       	pop	r0
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	00 d0       	rcall	.+0      	; 0x4364 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    436a:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    436c:	e3 e2       	ldi	r30, 0x23	; 35
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	8a 81       	ldd	r24, Y+2	; 0x02
    4372:	88 0f       	add	r24, r24
    4374:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWDR, TWDR_TWD0);
    4376:	a3 e2       	ldi	r26, 0x23	; 35
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e3 e2       	ldi	r30, 0x23	; 35
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	8e 7f       	andi	r24, 0xFE	; 254
    4382:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    4384:	a6 e5       	ldi	r26, 0x56	; 86
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e6 e5       	ldi	r30, 0x56	; 86
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	8f 7d       	andi	r24, 0xDF	; 223
    4390:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4392:	a6 e5       	ldi	r26, 0x56	; 86
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	e6 e5       	ldi	r30, 0x56	; 86
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	80 68       	ori	r24, 0x80	; 128
    439e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    43a0:	e6 e5       	ldi	r30, 0x56	; 86
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	80 81       	ld	r24, Z
    43a6:	88 23       	and	r24, r24
    43a8:	dc f7       	brge	.-10     	; 0x43a0 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    43aa:	e1 e2       	ldi	r30, 0x21	; 33
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	80 81       	ld	r24, Z
    43b0:	88 2f       	mov	r24, r24
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	88 7f       	andi	r24, 0xF8	; 248
    43b6:	90 70       	andi	r25, 0x00	; 0
    43b8:	88 31       	cpi	r24, 0x18	; 24
    43ba:	91 05       	cpc	r25, r1
    43bc:	11 f0       	breq	.+4      	; 0x43c2 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    43be:	83 e0       	ldi	r24, 0x03	; 3
    43c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	cf 91       	pop	r28
    43ca:	df 91       	pop	r29
    43cc:	08 95       	ret

000043ce <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    43d4:	cd b7       	in	r28, 0x3d	; 61
    43d6:	de b7       	in	r29, 0x3e	; 62
    43d8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    43da:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    43dc:	e3 e2       	ldi	r30, 0x23	; 35
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	8a 81       	ldd	r24, Y+2	; 0x02
    43e2:	88 0f       	add	r24, r24
    43e4:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWDR, TWDR_TWD0);
    43e6:	a3 e2       	ldi	r26, 0x23	; 35
    43e8:	b0 e0       	ldi	r27, 0x00	; 0
    43ea:	e3 e2       	ldi	r30, 0x23	; 35
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	80 81       	ld	r24, Z
    43f0:	81 60       	ori	r24, 0x01	; 1
    43f2:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    43f4:	a6 e5       	ldi	r26, 0x56	; 86
    43f6:	b0 e0       	ldi	r27, 0x00	; 0
    43f8:	e6 e5       	ldi	r30, 0x56	; 86
    43fa:	f0 e0       	ldi	r31, 0x00	; 0
    43fc:	80 81       	ld	r24, Z
    43fe:	8f 7d       	andi	r24, 0xDF	; 223
    4400:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4402:	a6 e5       	ldi	r26, 0x56	; 86
    4404:	b0 e0       	ldi	r27, 0x00	; 0
    4406:	e6 e5       	ldi	r30, 0x56	; 86
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	80 81       	ld	r24, Z
    440c:	80 68       	ori	r24, 0x80	; 128
    440e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4410:	e6 e5       	ldi	r30, 0x56	; 86
    4412:	f0 e0       	ldi	r31, 0x00	; 0
    4414:	80 81       	ld	r24, Z
    4416:	88 23       	and	r24, r24
    4418:	dc f7       	brge	.-10     	; 0x4410 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    441a:	e1 e2       	ldi	r30, 0x21	; 33
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	88 2f       	mov	r24, r24
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	88 7f       	andi	r24, 0xF8	; 248
    4426:	90 70       	andi	r25, 0x00	; 0
    4428:	80 34       	cpi	r24, 0x40	; 64
    442a:	91 05       	cpc	r25, r1
    442c:	11 f0       	breq	.+4      	; 0x4432 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    442e:	84 e0       	ldi	r24, 0x04	; 4
    4430:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    4432:	89 81       	ldd	r24, Y+1	; 0x01
}
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	cf 91       	pop	r28
    443a:	df 91       	pop	r29
    443c:	08 95       	ret

0000443e <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    443e:	df 93       	push	r29
    4440:	cf 93       	push	r28
    4442:	00 d0       	rcall	.+0      	; 0x4444 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    4444:	cd b7       	in	r28, 0x3d	; 61
    4446:	de b7       	in	r29, 0x3e	; 62
    4448:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    444a:	19 82       	std	Y+1, r1	; 0x01

	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
    444c:	e3 e2       	ldi	r30, 0x23	; 35
    444e:	f0 e0       	ldi	r31, 0x00	; 0
    4450:	8a 81       	ldd	r24, Y+2	; 0x02
    4452:	80 83       	st	Z, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4454:	a6 e5       	ldi	r26, 0x56	; 86
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	e6 e5       	ldi	r30, 0x56	; 86
    445a:	f0 e0       	ldi	r31, 0x00	; 0
    445c:	80 81       	ld	r24, Z
    445e:	80 68       	ori	r24, 0x80	; 128
    4460:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4462:	e6 e5       	ldi	r30, 0x56	; 86
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	80 81       	ld	r24, Z
    4468:	88 23       	and	r24, r24
    446a:	dc f7       	brge	.-10     	; 0x4462 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    446c:	e1 e2       	ldi	r30, 0x21	; 33
    446e:	f0 e0       	ldi	r31, 0x00	; 0
    4470:	80 81       	ld	r24, Z
    4472:	88 2f       	mov	r24, r24
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	88 7f       	andi	r24, 0xF8	; 248
    4478:	90 70       	andi	r25, 0x00	; 0
    447a:	88 32       	cpi	r24, 0x28	; 40
    447c:	91 05       	cpc	r25, r1
    447e:	11 f0       	breq	.+4      	; 0x4484 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    4480:	85 e0       	ldi	r24, 0x05	; 5
    4482:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    4484:	89 81       	ldd	r24, Y+1	; 0x01
}
    4486:	0f 90       	pop	r0
    4488:	0f 90       	pop	r0
    448a:	cf 91       	pop	r28
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    4490:	df 93       	push	r29
    4492:	cf 93       	push	r28
    4494:	00 d0       	rcall	.+0      	; 0x4496 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    4496:	0f 92       	push	r0
    4498:	cd b7       	in	r28, 0x3d	; 61
    449a:	de b7       	in	r29, 0x3e	; 62
    449c:	9b 83       	std	Y+3, r25	; 0x03
    449e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    44a0:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    44a2:	a6 e5       	ldi	r26, 0x56	; 86
    44a4:	b0 e0       	ldi	r27, 0x00	; 0
    44a6:	e6 e5       	ldi	r30, 0x56	; 86
    44a8:	f0 e0       	ldi	r31, 0x00	; 0
    44aa:	80 81       	ld	r24, Z
    44ac:	80 68       	ori	r24, 0x80	; 128
    44ae:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    44b0:	e6 e5       	ldi	r30, 0x56	; 86
    44b2:	f0 e0       	ldi	r31, 0x00	; 0
    44b4:	80 81       	ld	r24, Z
    44b6:	88 23       	and	r24, r24
    44b8:	dc f7       	brge	.-10     	; 0x44b0 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    44ba:	e1 e2       	ldi	r30, 0x21	; 33
    44bc:	f0 e0       	ldi	r31, 0x00	; 0
    44be:	80 81       	ld	r24, Z
    44c0:	88 2f       	mov	r24, r24
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	88 7f       	andi	r24, 0xF8	; 248
    44c6:	90 70       	andi	r25, 0x00	; 0
    44c8:	80 35       	cpi	r24, 0x50	; 80
    44ca:	91 05       	cpc	r25, r1
    44cc:	19 f0       	breq	.+6      	; 0x44d4 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    44ce:	86 e0       	ldi	r24, 0x06	; 6
    44d0:	89 83       	std	Y+1, r24	; 0x01
    44d2:	06 c0       	rjmp	.+12     	; 0x44e0 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    44d4:	e3 e2       	ldi	r30, 0x23	; 35
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	80 81       	ld	r24, Z
    44da:	ea 81       	ldd	r30, Y+2	; 0x02
    44dc:	fb 81       	ldd	r31, Y+3	; 0x03
    44de:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    44e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    44e2:	0f 90       	pop	r0
    44e4:	0f 90       	pop	r0
    44e6:	0f 90       	pop	r0
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    44f6:	a6 e5       	ldi	r26, 0x56	; 86
    44f8:	b0 e0       	ldi	r27, 0x00	; 0
    44fa:	e6 e5       	ldi	r30, 0x56	; 86
    44fc:	f0 e0       	ldi	r31, 0x00	; 0
    44fe:	80 81       	ld	r24, Z
    4500:	80 61       	ori	r24, 0x10	; 16
    4502:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4504:	a6 e5       	ldi	r26, 0x56	; 86
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e6 e5       	ldi	r30, 0x56	; 86
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	80 68       	ori	r24, 0x80	; 128
    4510:	8c 93       	st	X, r24
}
    4512:	cf 91       	pop	r28
    4514:	df 91       	pop	r29
    4516:	08 95       	ret

00004518 <MUART_voidInit>:
#define NULL 0

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	00 d0       	rcall	.+0      	; 0x451e <MUART_voidInit+0x6>
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    4522:	83 e3       	ldi	r24, 0x33	; 51
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	9a 83       	std	Y+2, r25	; 0x02
    4528:	89 83       	std	Y+1, r24	; 0x01
	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    452a:	e9 e2       	ldi	r30, 0x29	; 41
    452c:	f0 e0       	ldi	r31, 0x00	; 0
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    4532:	e0 e4       	ldi	r30, 0x40	; 64
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	89 2f       	mov	r24, r25
    453c:	99 27       	eor	r25, r25
    453e:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    4540:	aa e2       	ldi	r26, 0x2A	; 42
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	ea e2       	ldi	r30, 0x2A	; 42
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	80 81       	ld	r24, Z
    454a:	8b 7f       	andi	r24, 0xFB	; 251
    454c:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    454e:	e0 e4       	ldi	r30, 0x40	; 64
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	86 e8       	ldi	r24, 0x86	; 134
    4554:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    4556:	aa e2       	ldi	r26, 0x2A	; 42
    4558:	b0 e0       	ldi	r27, 0x00	; 0
    455a:	ea e2       	ldi	r30, 0x2A	; 42
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	80 81       	ld	r24, Z
    4560:	88 60       	ori	r24, 0x08	; 8
    4562:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    4564:	aa e2       	ldi	r26, 0x2A	; 42
    4566:	b0 e0       	ldi	r27, 0x00	; 0
    4568:	ea e2       	ldi	r30, 0x2A	; 42
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	80 81       	ld	r24, Z
    456e:	80 61       	ori	r24, 0x10	; 16
    4570:	8c 93       	st	X, r24
}
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	cf 91       	pop	r28
    4578:	df 91       	pop	r29
    457a:	08 95       	ret

0000457c <MUART_voidSendByteSyncBlocking>:


void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    457c:	df 93       	push	r29
    457e:	cf 93       	push	r28
    4580:	0f 92       	push	r0
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    4588:	eb e2       	ldi	r30, 0x2B	; 43
    458a:	f0 e0       	ldi	r31, 0x00	; 0
    458c:	80 81       	ld	r24, Z
    458e:	82 95       	swap	r24
    4590:	86 95       	lsr	r24
    4592:	87 70       	andi	r24, 0x07	; 7
    4594:	88 2f       	mov	r24, r24
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	81 70       	andi	r24, 0x01	; 1
    459a:	90 70       	andi	r25, 0x00	; 0
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	a1 f3       	breq	.-24     	; 0x4588 <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    45a0:	ec e2       	ldi	r30, 0x2C	; 44
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	80 83       	st	Z, r24

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    45a8:	eb e2       	ldi	r30, 0x2B	; 43
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	80 81       	ld	r24, Z
    45ae:	82 95       	swap	r24
    45b0:	86 95       	lsr	r24
    45b2:	87 70       	andi	r24, 0x07	; 7
    45b4:	88 2f       	mov	r24, r24
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	81 70       	andi	r24, 0x01	; 1
    45ba:	90 70       	andi	r25, 0x00	; 0
    45bc:	00 97       	sbiw	r24, 0x00	; 0
    45be:	a1 f3       	breq	.-24     	; 0x45a8 <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    45c0:	ab e2       	ldi	r26, 0x2B	; 43
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	eb e2       	ldi	r30, 0x2B	; 43
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	80 81       	ld	r24, Z
    45ca:	80 64       	ori	r24, 0x40	; 64
    45cc:	8c 93       	st	X, r24

}
    45ce:	0f 90       	pop	r0
    45d0:	cf 91       	pop	r28
    45d2:	df 91       	pop	r29
    45d4:	08 95       	ret

000045d6 <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    45d6:	df 93       	push	r29
    45d8:	cf 93       	push	r28
    45da:	00 d0       	rcall	.+0      	; 0x45dc <MUART_voidSendByteSyncNonBlocking+0x6>
    45dc:	00 d0       	rcall	.+0      	; 0x45de <MUART_voidSendByteSyncNonBlocking+0x8>
    45de:	0f 92       	push	r0
    45e0:	cd b7       	in	r28, 0x3d	; 61
    45e2:	de b7       	in	r29, 0x3e	; 62
    45e4:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    45e6:	19 82       	std	Y+1, r1	; 0x01
    45e8:	1a 82       	std	Y+2, r1	; 0x02
    45ea:	1b 82       	std	Y+3, r1	; 0x03
    45ec:	1c 82       	std	Y+4, r1	; 0x04
    45ee:	17 c0       	rjmp	.+46     	; 0x461e <MUART_voidSendByteSyncNonBlocking+0x48>

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
    45f2:	9a 81       	ldd	r25, Y+2	; 0x02
    45f4:	ab 81       	ldd	r26, Y+3	; 0x03
    45f6:	bc 81       	ldd	r27, Y+4	; 0x04
    45f8:	01 96       	adiw	r24, 0x01	; 1
    45fa:	a1 1d       	adc	r26, r1
    45fc:	b1 1d       	adc	r27, r1
    45fe:	89 83       	std	Y+1, r24	; 0x01
    4600:	9a 83       	std	Y+2, r25	; 0x02
    4602:	ab 83       	std	Y+3, r26	; 0x03
    4604:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	9a 81       	ldd	r25, Y+2	; 0x02
    460a:	ab 81       	ldd	r26, Y+3	; 0x03
    460c:	bc 81       	ldd	r27, Y+4	; 0x04
    460e:	88 38       	cpi	r24, 0x88	; 136
    4610:	23 e1       	ldi	r18, 0x13	; 19
    4612:	92 07       	cpc	r25, r18
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	a2 07       	cpc	r26, r18
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	b2 07       	cpc	r27, r18
    461c:	61 f0       	breq	.+24     	; 0x4636 <MUART_voidSendByteSyncNonBlocking+0x60>
void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
    461e:	eb e2       	ldi	r30, 0x2B	; 43
    4620:	f0 e0       	ldi	r31, 0x00	; 0
    4622:	80 81       	ld	r24, Z
    4624:	82 95       	swap	r24
    4626:	86 95       	lsr	r24
    4628:	87 70       	andi	r24, 0x07	; 7
    462a:	88 2f       	mov	r24, r24
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	81 70       	andi	r24, 0x01	; 1
    4630:	90 70       	andi	r25, 0x00	; 0
    4632:	00 97       	sbiw	r24, 0x00	; 0
    4634:	e9 f2       	breq	.-70     	; 0x45f0 <MUART_voidSendByteSyncNonBlocking+0x1a>
		{
			break;
		}
	}

	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	9a 81       	ldd	r25, Y+2	; 0x02
    463a:	ab 81       	ldd	r26, Y+3	; 0x03
    463c:	bc 81       	ldd	r27, Y+4	; 0x04
    463e:	88 38       	cpi	r24, 0x88	; 136
    4640:	23 e1       	ldi	r18, 0x13	; 19
    4642:	92 07       	cpc	r25, r18
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	a2 07       	cpc	r26, r18
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	b2 07       	cpc	r27, r18
    464c:	99 f1       	breq	.+102    	; 0x46b4 <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    464e:	19 82       	std	Y+1, r1	; 0x01
    4650:	1a 82       	std	Y+2, r1	; 0x02
    4652:	1b 82       	std	Y+3, r1	; 0x03
    4654:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    4656:	ec e2       	ldi	r30, 0x2C	; 44
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	8d 81       	ldd	r24, Y+5	; 0x05
    465c:	80 83       	st	Z, r24
    465e:	17 c0       	rjmp	.+46     	; 0x468e <MUART_voidSendByteSyncNonBlocking+0xb8>
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    4660:	89 81       	ldd	r24, Y+1	; 0x01
    4662:	9a 81       	ldd	r25, Y+2	; 0x02
    4664:	ab 81       	ldd	r26, Y+3	; 0x03
    4666:	bc 81       	ldd	r27, Y+4	; 0x04
    4668:	01 96       	adiw	r24, 0x01	; 1
    466a:	a1 1d       	adc	r26, r1
    466c:	b1 1d       	adc	r27, r1
    466e:	89 83       	std	Y+1, r24	; 0x01
    4670:	9a 83       	std	Y+2, r25	; 0x02
    4672:	ab 83       	std	Y+3, r26	; 0x03
    4674:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	9a 81       	ldd	r25, Y+2	; 0x02
    467a:	ab 81       	ldd	r26, Y+3	; 0x03
    467c:	bc 81       	ldd	r27, Y+4	; 0x04
    467e:	88 38       	cpi	r24, 0x88	; 136
    4680:	23 e1       	ldi	r18, 0x13	; 19
    4682:	92 07       	cpc	r25, r18
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	a2 07       	cpc	r26, r18
    4688:	20 e0       	ldi	r18, 0x00	; 0
    468a:	b2 07       	cpc	r27, r18
    468c:	61 f0       	breq	.+24     	; 0x46a6 <MUART_voidSendByteSyncNonBlocking+0xd0>
	{
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
    468e:	eb e2       	ldi	r30, 0x2B	; 43
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	82 95       	swap	r24
    4696:	86 95       	lsr	r24
    4698:	87 70       	andi	r24, 0x07	; 7
    469a:	88 2f       	mov	r24, r24
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	81 70       	andi	r24, 0x01	; 1
    46a0:	90 70       	andi	r25, 0x00	; 0
    46a2:	00 97       	sbiw	r24, 0x00	; 0
    46a4:	e9 f2       	breq	.-70     	; 0x4660 <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    46a6:	ab e2       	ldi	r26, 0x2B	; 43
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	eb e2       	ldi	r30, 0x2B	; 43
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	80 64       	ori	r24, 0x40	; 64
    46b2:	8c 93       	st	X, r24
	}

}
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
    46bc:	0f 90       	pop	r0
    46be:	cf 91       	pop	r28
    46c0:	df 91       	pop	r29
    46c2:	08 95       	ret

000046c4 <MUART_voidSendStringSyncNonBlocking>:


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    46c4:	df 93       	push	r29
    46c6:	cf 93       	push	r28
    46c8:	00 d0       	rcall	.+0      	; 0x46ca <MUART_voidSendStringSyncNonBlocking+0x6>
    46ca:	cd b7       	in	r28, 0x3d	; 61
    46cc:	de b7       	in	r29, 0x3e	; 62
    46ce:	9a 83       	std	Y+2, r25	; 0x02
    46d0:	89 83       	std	Y+1, r24	; 0x01
    46d2:	0b c0       	rjmp	.+22     	; 0x46ea <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    46d4:	e9 81       	ldd	r30, Y+1	; 0x01
    46d6:	fa 81       	ldd	r31, Y+2	; 0x02
    46d8:	20 81       	ld	r18, Z
    46da:	89 81       	ldd	r24, Y+1	; 0x01
    46dc:	9a 81       	ldd	r25, Y+2	; 0x02
    46de:	01 96       	adiw	r24, 0x01	; 1
    46e0:	9a 83       	std	Y+2, r25	; 0x02
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	82 2f       	mov	r24, r18
    46e6:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <MUART_voidSendByteSyncNonBlocking>
}


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while(*A_pu8String > 0)
    46ea:	e9 81       	ldd	r30, Y+1	; 0x01
    46ec:	fa 81       	ldd	r31, Y+2	; 0x02
    46ee:	80 81       	ld	r24, Z
    46f0:	88 23       	and	r24, r24
    46f2:	81 f7       	brne	.-32     	; 0x46d4 <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    46f4:	0f 90       	pop	r0
    46f6:	0f 90       	pop	r0
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	0f 92       	push	r0
    4704:	cd b7       	in	r28, 0x3d	; 61
    4706:	de b7       	in	r29, 0x3e	; 62
    4708:	89 83       	std	Y+1, r24	; 0x01
	// Check if Data Register is empty
	if (GET_BIT(UCSRA,5)==1)
    470a:	eb e2       	ldi	r30, 0x2B	; 43
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	80 81       	ld	r24, Z
    4710:	82 95       	swap	r24
    4712:	86 95       	lsr	r24
    4714:	87 70       	andi	r24, 0x07	; 7
    4716:	88 2f       	mov	r24, r24
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	81 70       	andi	r24, 0x01	; 1
    471c:	90 70       	andi	r25, 0x00	; 0
    471e:	88 23       	and	r24, r24
    4720:	21 f0       	breq	.+8      	; 0x472a <MUART_voidSendByteAsync+0x2c>
	{
		// Send Data
		UDR = A_u8DataByte;
    4722:	ec e2       	ldi	r30, 0x2C	; 44
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	89 81       	ldd	r24, Y+1	; 0x01
    4728:	80 83       	st	Z, r24
	}
}
    472a:	0f 90       	pop	r0
    472c:	cf 91       	pop	r28
    472e:	df 91       	pop	r29
    4730:	08 95       	ret

00004732 <MUART_voidReceiveStringSync>:
void MUART_voidReceiveStringSync(u8 * Copy_u8ReceiveData){
    4732:	df 93       	push	r29
    4734:	cf 93       	push	r28
    4736:	00 d0       	rcall	.+0      	; 0x4738 <MUART_voidReceiveStringSync+0x6>
    4738:	00 d0       	rcall	.+0      	; 0x473a <MUART_voidReceiveStringSync+0x8>
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	9c 83       	std	Y+4, r25	; 0x04
    4740:	8b 83       	std	Y+3, r24	; 0x03
	u8 counter =0;
    4742:	19 82       	std	Y+1, r1	; 0x01
	volatile u8 recChar;
	recChar =  MUART_u8ReadByteSyncBlocking();
    4744:	0e 94 c7 23 	call	0x478e	; 0x478e <MUART_u8ReadByteSyncBlocking>
    4748:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8ReceiveData != NULL){
    474a:	8b 81       	ldd	r24, Y+3	; 0x03
    474c:	9c 81       	ldd	r25, Y+4	; 0x04
    474e:	00 97       	sbiw	r24, 0x00	; 0
    4750:	b9 f0       	breq	.+46     	; 0x4780 <MUART_voidReceiveStringSync+0x4e>
    4752:	13 c0       	rjmp	.+38     	; 0x477a <MUART_voidReceiveStringSync+0x48>
		while(recChar !=13){
			MUART_voidSendByteAsync(recChar);
    4754:	8a 81       	ldd	r24, Y+2	; 0x02
    4756:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MUART_voidSendByteAsync>
			//read data
			Copy_u8ReceiveData[counter]= recChar;
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	28 2f       	mov	r18, r24
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	8b 81       	ldd	r24, Y+3	; 0x03
    4762:	9c 81       	ldd	r25, Y+4	; 0x04
    4764:	fc 01       	movw	r30, r24
    4766:	e2 0f       	add	r30, r18
    4768:	f3 1f       	adc	r31, r19
    476a:	8a 81       	ldd	r24, Y+2	; 0x02
    476c:	80 83       	st	Z, r24
			counter ++ ;
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	8f 5f       	subi	r24, 0xFF	; 255
    4772:	89 83       	std	Y+1, r24	; 0x01
			recChar =  MUART_u8ReadByteSyncBlocking();
    4774:	0e 94 c7 23 	call	0x478e	; 0x478e <MUART_u8ReadByteSyncBlocking>
    4778:	8a 83       	std	Y+2, r24	; 0x02
void MUART_voidReceiveStringSync(u8 * Copy_u8ReceiveData){
	u8 counter =0;
	volatile u8 recChar;
	recChar =  MUART_u8ReadByteSyncBlocking();
	if(Copy_u8ReceiveData != NULL){
		while(recChar !=13){
    477a:	8a 81       	ldd	r24, Y+2	; 0x02
    477c:	8d 30       	cpi	r24, 0x0D	; 13
    477e:	51 f7       	brne	.-44     	; 0x4754 <MUART_voidReceiveStringSync+0x22>
			counter ++ ;
			recChar =  MUART_u8ReadByteSyncBlocking();

		}
	}
}
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	cf 91       	pop	r28
    478a:	df 91       	pop	r29
    478c:	08 95       	ret

0000478e <MUART_u8ReadByteSyncBlocking>:

u8 MUART_u8ReadByteSyncBlocking (void)
{
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62

	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0);
    4796:	eb e2       	ldi	r30, 0x2B	; 43
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	80 81       	ld	r24, Z
    479c:	88 23       	and	r24, r24
    479e:	dc f7       	brge	.-10     	; 0x4796 <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    47a0:	ec e2       	ldi	r30, 0x2C	; 44
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	80 81       	ld	r24, Z
}
    47a6:	cf 91       	pop	r28
    47a8:	df 91       	pop	r29
    47aa:	08 95       	ret

000047ac <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    47ac:	df 93       	push	r29
    47ae:	cf 93       	push	r28
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    47b4:	ec e2       	ldi	r30, 0x2C	; 44
    47b6:	f0 e0       	ldi	r31, 0x00	; 0
    47b8:	80 81       	ld	r24, Z
}
    47ba:	cf 91       	pop	r28
    47bc:	df 91       	pop	r29
    47be:	08 95       	ret

000047c0 <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    47c0:	df 93       	push	r29
    47c2:	cf 93       	push	r28
    47c4:	00 d0       	rcall	.+0      	; 0x47c6 <MUART_u8ReadByteSyncNonBlocking+0x6>
    47c6:	0f 92       	push	r0
    47c8:	cd b7       	in	r28, 0x3d	; 61
    47ca:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    47cc:	8f ef       	ldi	r24, 0xFF	; 255
    47ce:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16Timeout = 0;
    47d0:	1a 82       	std	Y+2, r1	; 0x02
    47d2:	19 82       	std	Y+1, r1	; 0x01
    47d4:	0b c0       	rjmp	.+22     	; 0x47ec <MUART_u8ReadByteSyncNonBlocking+0x2c>
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
	{
		local_u16Timeout++;
    47d6:	89 81       	ldd	r24, Y+1	; 0x01
    47d8:	9a 81       	ldd	r25, Y+2	; 0x02
    47da:	01 96       	adiw	r24, 0x01	; 1
    47dc:	9a 83       	std	Y+2, r25	; 0x02
    47de:	89 83       	std	Y+1, r24	; 0x01
		if (local_u16Timeout == NON_BLOCKING_TIME_OUT)
    47e0:	89 81       	ldd	r24, Y+1	; 0x01
    47e2:	9a 81       	ldd	r25, Y+2	; 0x02
    47e4:	23 e1       	ldi	r18, 0x13	; 19
    47e6:	88 38       	cpi	r24, 0x88	; 136
    47e8:	92 07       	cpc	r25, r18
    47ea:	29 f0       	breq	.+10     	; 0x47f6 <MUART_u8ReadByteSyncNonBlocking+0x36>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u16 local_u16Timeout = 0;
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
    47ec:	eb e2       	ldi	r30, 0x2B	; 43
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	80 81       	ld	r24, Z
    47f2:	88 23       	and	r24, r24
    47f4:	84 f7       	brge	.-32     	; 0x47d6 <MUART_u8ReadByteSyncNonBlocking+0x16>
		{
			break;
		}
	}

	if (local_u16Timeout != NON_BLOCKING_TIME_OUT)
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	9a 81       	ldd	r25, Y+2	; 0x02
    47fa:	23 e1       	ldi	r18, 0x13	; 19
    47fc:	88 38       	cpi	r24, 0x88	; 136
    47fe:	92 07       	cpc	r25, r18
    4800:	21 f0       	breq	.+8      	; 0x480a <MUART_u8ReadByteSyncNonBlocking+0x4a>
	{
		// Read Received Data from the UDR
		local_u8ReceivedData = UDR;
    4802:	ec e2       	ldi	r30, 0x2C	; 44
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_u8ReceivedData;
    480a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    480c:	0f 90       	pop	r0
    480e:	0f 90       	pop	r0
    4810:	0f 90       	pop	r0
    4812:	cf 91       	pop	r28
    4814:	df 91       	pop	r29
    4816:	08 95       	ret

00004818 <MUART_VoidSendNumber>:


void MUART_VoidSendNumber(u32 Copy_u32Data)
{
    4818:	df 93       	push	r29
    481a:	cf 93       	push	r28
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	2b 97       	sbiw	r28, 0x0b	; 11
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	68 87       	std	Y+8, r22	; 0x08
    482e:	79 87       	std	Y+9, r23	; 0x09
    4830:	8a 87       	std	Y+10, r24	; 0x0a
    4832:	9b 87       	std	Y+11, r25	; 0x0b
	/*Loop counter for the two Loops*/
	u8 Local_u8LoopCounter = 0;
    4834:	1f 82       	std	Y+7, r1	; 0x07
	/*Extract single number in that variable*/
	u8 Local_u8SingleNumber = 0;
    4836:	1e 82       	std	Y+6, r1	; 0x06
	/*Store number of Zeros at the end */
	u8 Local_Copy_u8DigitNumbers = 0;
    4838:	1d 82       	std	Y+5, r1	; 0x05
	/*Store the reversed number*/
	u32 Local_Copy_u32DataReversed = 1;
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	a0 e0       	ldi	r26, 0x00	; 0
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	89 83       	std	Y+1, r24	; 0x01
    4844:	9a 83       	std	Y+2, r25	; 0x02
    4846:	ab 83       	std	Y+3, r26	; 0x03
    4848:	bc 83       	std	Y+4, r27	; 0x04

	if(Copy_u32Data != 0)
    484a:	88 85       	ldd	r24, Y+8	; 0x08
    484c:	99 85       	ldd	r25, Y+9	; 0x09
    484e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4850:	bb 85       	ldd	r27, Y+11	; 0x0b
    4852:	00 97       	sbiw	r24, 0x00	; 0
    4854:	a1 05       	cpc	r26, r1
    4856:	b1 05       	cpc	r27, r1
    4858:	09 f4       	brne	.+2      	; 0x485c <MUART_VoidSendNumber+0x44>
    485a:	7b c0       	rjmp	.+246    	; 0x4952 <MUART_VoidSendNumber+0x13a>
    485c:	42 c0       	rjmp	.+132    	; 0x48e2 <MUART_VoidSendNumber+0xca>
	{
		while(Copy_u32Data != 0)
		{
			/*Extract Last single number from the whole number*/
			Local_u8SingleNumber = Copy_u32Data % 10;
    485e:	88 85       	ldd	r24, Y+8	; 0x08
    4860:	99 85       	ldd	r25, Y+9	; 0x09
    4862:	aa 85       	ldd	r26, Y+10	; 0x0a
    4864:	bb 85       	ldd	r27, Y+11	; 0x0b
    4866:	2a e0       	ldi	r18, 0x0A	; 10
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	40 e0       	ldi	r20, 0x00	; 0
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	bc 01       	movw	r22, r24
    4870:	cd 01       	movw	r24, r26
    4872:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    4876:	dc 01       	movw	r26, r24
    4878:	cb 01       	movw	r24, r22
    487a:	8e 83       	std	Y+6, r24	; 0x06
			/*storing the number reversed*/
			Local_Copy_u32DataReversed = (Local_Copy_u32DataReversed*10) + (Local_u8SingleNumber);
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	9a 81       	ldd	r25, Y+2	; 0x02
    4880:	ab 81       	ldd	r26, Y+3	; 0x03
    4882:	bc 81       	ldd	r27, Y+4	; 0x04
    4884:	2a e0       	ldi	r18, 0x0A	; 10
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e0       	ldi	r20, 0x00	; 0
    488a:	50 e0       	ldi	r21, 0x00	; 0
    488c:	bc 01       	movw	r22, r24
    488e:	cd 01       	movw	r24, r26
    4890:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__mulsi3>
    4894:	9b 01       	movw	r18, r22
    4896:	ac 01       	movw	r20, r24
    4898:	8e 81       	ldd	r24, Y+6	; 0x06
    489a:	88 2f       	mov	r24, r24
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	a0 e0       	ldi	r26, 0x00	; 0
    48a0:	b0 e0       	ldi	r27, 0x00	; 0
    48a2:	82 0f       	add	r24, r18
    48a4:	93 1f       	adc	r25, r19
    48a6:	a4 1f       	adc	r26, r20
    48a8:	b5 1f       	adc	r27, r21
    48aa:	89 83       	std	Y+1, r24	; 0x01
    48ac:	9a 83       	std	Y+2, r25	; 0x02
    48ae:	ab 83       	std	Y+3, r26	; 0x03
    48b0:	bc 83       	std	Y+4, r27	; 0x04
			/*Delete the extracted number from the whole number*/
			Copy_u32Data /= 10;
    48b2:	88 85       	ldd	r24, Y+8	; 0x08
    48b4:	99 85       	ldd	r25, Y+9	; 0x09
    48b6:	aa 85       	ldd	r26, Y+10	; 0x0a
    48b8:	bb 85       	ldd	r27, Y+11	; 0x0b
    48ba:	2a e0       	ldi	r18, 0x0A	; 10
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	40 e0       	ldi	r20, 0x00	; 0
    48c0:	50 e0       	ldi	r21, 0x00	; 0
    48c2:	bc 01       	movw	r22, r24
    48c4:	cd 01       	movw	r24, r26
    48c6:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    48ca:	da 01       	movw	r26, r20
    48cc:	c9 01       	movw	r24, r18
    48ce:	88 87       	std	Y+8, r24	; 0x08
    48d0:	99 87       	std	Y+9, r25	; 0x09
    48d2:	aa 87       	std	Y+10, r26	; 0x0a
    48d4:	bb 87       	std	Y+11, r27	; 0x0b
			/*Increment the Loop counter*/
			Local_u8LoopCounter++;
    48d6:	8f 81       	ldd	r24, Y+7	; 0x07
    48d8:	8f 5f       	subi	r24, 0xFF	; 255
    48da:	8f 83       	std	Y+7, r24	; 0x07
			/*Counting the digit numbers*/
			Local_Copy_u8DigitNumbers++;
    48dc:	8d 81       	ldd	r24, Y+5	; 0x05
    48de:	8f 5f       	subi	r24, 0xFF	; 255
    48e0:	8d 83       	std	Y+5, r24	; 0x05
	/*Store the reversed number*/
	u32 Local_Copy_u32DataReversed = 1;

	if(Copy_u32Data != 0)
	{
		while(Copy_u32Data != 0)
    48e2:	88 85       	ldd	r24, Y+8	; 0x08
    48e4:	99 85       	ldd	r25, Y+9	; 0x09
    48e6:	aa 85       	ldd	r26, Y+10	; 0x0a
    48e8:	bb 85       	ldd	r27, Y+11	; 0x0b
    48ea:	00 97       	sbiw	r24, 0x00	; 0
    48ec:	a1 05       	cpc	r26, r1
    48ee:	b1 05       	cpc	r27, r1
    48f0:	09 f0       	breq	.+2      	; 0x48f4 <MUART_VoidSendNumber+0xdc>
    48f2:	b5 cf       	rjmp	.-150    	; 0x485e <MUART_VoidSendNumber+0x46>
			Local_u8LoopCounter++;
			/*Counting the digit numbers*/
			Local_Copy_u8DigitNumbers++;
		}

		for(Local_u8LoopCounter = 0; Local_u8LoopCounter < Local_Copy_u8DigitNumbers; Local_u8LoopCounter++)
    48f4:	1f 82       	std	Y+7, r1	; 0x07
    48f6:	28 c0       	rjmp	.+80     	; 0x4948 <MUART_VoidSendNumber+0x130>
		{
			/*Extract Last single number from the whole number*/
			Local_u8SingleNumber = Local_Copy_u32DataReversed % 10;
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	ab 81       	ldd	r26, Y+3	; 0x03
    48fe:	bc 81       	ldd	r27, Y+4	; 0x04
    4900:	2a e0       	ldi	r18, 0x0A	; 10
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	40 e0       	ldi	r20, 0x00	; 0
    4906:	50 e0       	ldi	r21, 0x00	; 0
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	8e 83       	std	Y+6, r24	; 0x06
			/*Delete the extracted number from the whole number*/
			Local_Copy_u32DataReversed /= 10;
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	9a 81       	ldd	r25, Y+2	; 0x02
    491a:	ab 81       	ldd	r26, Y+3	; 0x03
    491c:	bc 81       	ldd	r27, Y+4	; 0x04
    491e:	2a e0       	ldi	r18, 0x0A	; 10
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	40 e0       	ldi	r20, 0x00	; 0
    4924:	50 e0       	ldi	r21, 0x00	; 0
    4926:	bc 01       	movw	r22, r24
    4928:	cd 01       	movw	r24, r26
    492a:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__udivmodsi4>
    492e:	da 01       	movw	r26, r20
    4930:	c9 01       	movw	r24, r18
    4932:	89 83       	std	Y+1, r24	; 0x01
    4934:	9a 83       	std	Y+2, r25	; 0x02
    4936:	ab 83       	std	Y+3, r26	; 0x03
    4938:	bc 83       	std	Y+4, r27	; 0x04
			/*Sending the extracted single number Asci code from the Asci array to the LCD */
			 MUART_voidSendByteAsync('0' + Local_u8SingleNumber);
    493a:	8e 81       	ldd	r24, Y+6	; 0x06
    493c:	80 5d       	subi	r24, 0xD0	; 208
    493e:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MUART_voidSendByteAsync>
			Local_u8LoopCounter++;
			/*Counting the digit numbers*/
			Local_Copy_u8DigitNumbers++;
		}

		for(Local_u8LoopCounter = 0; Local_u8LoopCounter < Local_Copy_u8DigitNumbers; Local_u8LoopCounter++)
    4942:	8f 81       	ldd	r24, Y+7	; 0x07
    4944:	8f 5f       	subi	r24, 0xFF	; 255
    4946:	8f 83       	std	Y+7, r24	; 0x07
    4948:	9f 81       	ldd	r25, Y+7	; 0x07
    494a:	8d 81       	ldd	r24, Y+5	; 0x05
    494c:	98 17       	cp	r25, r24
    494e:	a0 f2       	brcs	.-88     	; 0x48f8 <MUART_VoidSendNumber+0xe0>
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <MUART_VoidSendNumber+0x140>
		}
	}
	else
	{
		/*Sending Char Zero*/
		 MUART_voidSendByteAsync('0');
    4952:	80 e3       	ldi	r24, 0x30	; 48
    4954:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MUART_voidSendByteAsync>
	}
}
    4958:	2b 96       	adiw	r28, 0x0b	; 11
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	f8 94       	cli
    495e:	de bf       	out	0x3e, r29	; 62
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	cd bf       	out	0x3d, r28	; 61
    4964:	cf 91       	pop	r28
    4966:	df 91       	pop	r29
    4968:	08 95       	ret

0000496a <MUART_voidSetCallBack>:



void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    496a:	df 93       	push	r29
    496c:	cf 93       	push	r28
    496e:	00 d0       	rcall	.+0      	; 0x4970 <MUART_voidSetCallBack+0x6>
    4970:	0f 92       	push	r0
    4972:	cd b7       	in	r28, 0x3d	; 61
    4974:	de b7       	in	r29, 0x3e	; 62
    4976:	89 83       	std	Y+1, r24	; 0x01
    4978:	7b 83       	std	Y+3, r23	; 0x03
    497a:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    497c:	89 81       	ldd	r24, Y+1	; 0x01
    497e:	83 30       	cpi	r24, 0x03	; 3
    4980:	80 f4       	brcc	.+32     	; 0x49a2 <MUART_voidSetCallBack+0x38>
    4982:	8a 81       	ldd	r24, Y+2	; 0x02
    4984:	9b 81       	ldd	r25, Y+3	; 0x03
    4986:	00 97       	sbiw	r24, 0x00	; 0
    4988:	61 f0       	breq	.+24     	; 0x49a2 <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	88 2f       	mov	r24, r24
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	fc 01       	movw	r30, r24
    4996:	ea 57       	subi	r30, 0x7A	; 122
    4998:	fb 4f       	sbci	r31, 0xFB	; 251
    499a:	8a 81       	ldd	r24, Y+2	; 0x02
    499c:	9b 81       	ldd	r25, Y+3	; 0x03
    499e:	91 83       	std	Z+1, r25	; 0x01
    49a0:	80 83       	st	Z, r24
	}
}
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	08 95       	ret

000049ae <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    49ae:	1f 92       	push	r1
    49b0:	0f 92       	push	r0
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	0f 92       	push	r0
    49b6:	11 24       	eor	r1, r1
    49b8:	2f 93       	push	r18
    49ba:	3f 93       	push	r19
    49bc:	4f 93       	push	r20
    49be:	5f 93       	push	r21
    49c0:	6f 93       	push	r22
    49c2:	7f 93       	push	r23
    49c4:	8f 93       	push	r24
    49c6:	9f 93       	push	r25
    49c8:	af 93       	push	r26
    49ca:	bf 93       	push	r27
    49cc:	ef 93       	push	r30
    49ce:	ff 93       	push	r31
    49d0:	df 93       	push	r29
    49d2:	cf 93       	push	r28
    49d4:	cd b7       	in	r28, 0x3d	; 61
    49d6:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    49d8:	80 91 86 04 	lds	r24, 0x0486
    49dc:	90 91 87 04 	lds	r25, 0x0487
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	29 f0       	breq	.+10     	; 0x49ee <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    49e4:	e0 91 86 04 	lds	r30, 0x0486
    49e8:	f0 91 87 04 	lds	r31, 0x0487
    49ec:	09 95       	icall
	}
}
    49ee:	cf 91       	pop	r28
    49f0:	df 91       	pop	r29
    49f2:	ff 91       	pop	r31
    49f4:	ef 91       	pop	r30
    49f6:	bf 91       	pop	r27
    49f8:	af 91       	pop	r26
    49fa:	9f 91       	pop	r25
    49fc:	8f 91       	pop	r24
    49fe:	7f 91       	pop	r23
    4a00:	6f 91       	pop	r22
    4a02:	5f 91       	pop	r21
    4a04:	4f 91       	pop	r20
    4a06:	3f 91       	pop	r19
    4a08:	2f 91       	pop	r18
    4a0a:	0f 90       	pop	r0
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	0f 90       	pop	r0
    4a10:	1f 90       	pop	r1
    4a12:	18 95       	reti

00004a14 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    4a14:	1f 92       	push	r1
    4a16:	0f 92       	push	r0
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	0f 92       	push	r0
    4a1c:	11 24       	eor	r1, r1
    4a1e:	2f 93       	push	r18
    4a20:	3f 93       	push	r19
    4a22:	4f 93       	push	r20
    4a24:	5f 93       	push	r21
    4a26:	6f 93       	push	r22
    4a28:	7f 93       	push	r23
    4a2a:	8f 93       	push	r24
    4a2c:	9f 93       	push	r25
    4a2e:	af 93       	push	r26
    4a30:	bf 93       	push	r27
    4a32:	ef 93       	push	r30
    4a34:	ff 93       	push	r31
    4a36:	df 93       	push	r29
    4a38:	cf 93       	push	r28
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    4a3e:	80 91 88 04 	lds	r24, 0x0488
    4a42:	90 91 89 04 	lds	r25, 0x0489
    4a46:	00 97       	sbiw	r24, 0x00	; 0
    4a48:	29 f0       	breq	.+10     	; 0x4a54 <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    4a4a:	e0 91 88 04 	lds	r30, 0x0488
    4a4e:	f0 91 89 04 	lds	r31, 0x0489
    4a52:	09 95       	icall
	}
}
    4a54:	cf 91       	pop	r28
    4a56:	df 91       	pop	r29
    4a58:	ff 91       	pop	r31
    4a5a:	ef 91       	pop	r30
    4a5c:	bf 91       	pop	r27
    4a5e:	af 91       	pop	r26
    4a60:	9f 91       	pop	r25
    4a62:	8f 91       	pop	r24
    4a64:	7f 91       	pop	r23
    4a66:	6f 91       	pop	r22
    4a68:	5f 91       	pop	r21
    4a6a:	4f 91       	pop	r20
    4a6c:	3f 91       	pop	r19
    4a6e:	2f 91       	pop	r18
    4a70:	0f 90       	pop	r0
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	0f 90       	pop	r0
    4a76:	1f 90       	pop	r1
    4a78:	18 95       	reti

00004a7a <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    4a7a:	1f 92       	push	r1
    4a7c:	0f 92       	push	r0
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	0f 92       	push	r0
    4a82:	11 24       	eor	r1, r1
    4a84:	2f 93       	push	r18
    4a86:	3f 93       	push	r19
    4a88:	4f 93       	push	r20
    4a8a:	5f 93       	push	r21
    4a8c:	6f 93       	push	r22
    4a8e:	7f 93       	push	r23
    4a90:	8f 93       	push	r24
    4a92:	9f 93       	push	r25
    4a94:	af 93       	push	r26
    4a96:	bf 93       	push	r27
    4a98:	ef 93       	push	r30
    4a9a:	ff 93       	push	r31
    4a9c:	df 93       	push	r29
    4a9e:	cf 93       	push	r28
    4aa0:	cd b7       	in	r28, 0x3d	; 61
    4aa2:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    4aa4:	80 91 8a 04 	lds	r24, 0x048A
    4aa8:	90 91 8b 04 	lds	r25, 0x048B
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	29 f0       	breq	.+10     	; 0x4aba <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    4ab0:	e0 91 8a 04 	lds	r30, 0x048A
    4ab4:	f0 91 8b 04 	lds	r31, 0x048B
    4ab8:	09 95       	icall
	}
}
    4aba:	cf 91       	pop	r28
    4abc:	df 91       	pop	r29
    4abe:	ff 91       	pop	r31
    4ac0:	ef 91       	pop	r30
    4ac2:	bf 91       	pop	r27
    4ac4:	af 91       	pop	r26
    4ac6:	9f 91       	pop	r25
    4ac8:	8f 91       	pop	r24
    4aca:	7f 91       	pop	r23
    4acc:	6f 91       	pop	r22
    4ace:	5f 91       	pop	r21
    4ad0:	4f 91       	pop	r20
    4ad2:	3f 91       	pop	r19
    4ad4:	2f 91       	pop	r18
    4ad6:	0f 90       	pop	r0
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	0f 90       	pop	r0
    4adc:	1f 90       	pop	r1
    4ade:	18 95       	reti

00004ae0 <__mulsi3>:
    4ae0:	62 9f       	mul	r22, r18
    4ae2:	d0 01       	movw	r26, r0
    4ae4:	73 9f       	mul	r23, r19
    4ae6:	f0 01       	movw	r30, r0
    4ae8:	82 9f       	mul	r24, r18
    4aea:	e0 0d       	add	r30, r0
    4aec:	f1 1d       	adc	r31, r1
    4aee:	64 9f       	mul	r22, r20
    4af0:	e0 0d       	add	r30, r0
    4af2:	f1 1d       	adc	r31, r1
    4af4:	92 9f       	mul	r25, r18
    4af6:	f0 0d       	add	r31, r0
    4af8:	83 9f       	mul	r24, r19
    4afa:	f0 0d       	add	r31, r0
    4afc:	74 9f       	mul	r23, r20
    4afe:	f0 0d       	add	r31, r0
    4b00:	65 9f       	mul	r22, r21
    4b02:	f0 0d       	add	r31, r0
    4b04:	99 27       	eor	r25, r25
    4b06:	72 9f       	mul	r23, r18
    4b08:	b0 0d       	add	r27, r0
    4b0a:	e1 1d       	adc	r30, r1
    4b0c:	f9 1f       	adc	r31, r25
    4b0e:	63 9f       	mul	r22, r19
    4b10:	b0 0d       	add	r27, r0
    4b12:	e1 1d       	adc	r30, r1
    4b14:	f9 1f       	adc	r31, r25
    4b16:	bd 01       	movw	r22, r26
    4b18:	cf 01       	movw	r24, r30
    4b1a:	11 24       	eor	r1, r1
    4b1c:	08 95       	ret

00004b1e <__udivmodsi4>:
    4b1e:	a1 e2       	ldi	r26, 0x21	; 33
    4b20:	1a 2e       	mov	r1, r26
    4b22:	aa 1b       	sub	r26, r26
    4b24:	bb 1b       	sub	r27, r27
    4b26:	fd 01       	movw	r30, r26
    4b28:	0d c0       	rjmp	.+26     	; 0x4b44 <__udivmodsi4_ep>

00004b2a <__udivmodsi4_loop>:
    4b2a:	aa 1f       	adc	r26, r26
    4b2c:	bb 1f       	adc	r27, r27
    4b2e:	ee 1f       	adc	r30, r30
    4b30:	ff 1f       	adc	r31, r31
    4b32:	a2 17       	cp	r26, r18
    4b34:	b3 07       	cpc	r27, r19
    4b36:	e4 07       	cpc	r30, r20
    4b38:	f5 07       	cpc	r31, r21
    4b3a:	20 f0       	brcs	.+8      	; 0x4b44 <__udivmodsi4_ep>
    4b3c:	a2 1b       	sub	r26, r18
    4b3e:	b3 0b       	sbc	r27, r19
    4b40:	e4 0b       	sbc	r30, r20
    4b42:	f5 0b       	sbc	r31, r21

00004b44 <__udivmodsi4_ep>:
    4b44:	66 1f       	adc	r22, r22
    4b46:	77 1f       	adc	r23, r23
    4b48:	88 1f       	adc	r24, r24
    4b4a:	99 1f       	adc	r25, r25
    4b4c:	1a 94       	dec	r1
    4b4e:	69 f7       	brne	.-38     	; 0x4b2a <__udivmodsi4_loop>
    4b50:	60 95       	com	r22
    4b52:	70 95       	com	r23
    4b54:	80 95       	com	r24
    4b56:	90 95       	com	r25
    4b58:	9b 01       	movw	r18, r22
    4b5a:	ac 01       	movw	r20, r24
    4b5c:	bd 01       	movw	r22, r26
    4b5e:	cf 01       	movw	r24, r30
    4b60:	08 95       	ret

00004b62 <__prologue_saves__>:
    4b62:	2f 92       	push	r2
    4b64:	3f 92       	push	r3
    4b66:	4f 92       	push	r4
    4b68:	5f 92       	push	r5
    4b6a:	6f 92       	push	r6
    4b6c:	7f 92       	push	r7
    4b6e:	8f 92       	push	r8
    4b70:	9f 92       	push	r9
    4b72:	af 92       	push	r10
    4b74:	bf 92       	push	r11
    4b76:	cf 92       	push	r12
    4b78:	df 92       	push	r13
    4b7a:	ef 92       	push	r14
    4b7c:	ff 92       	push	r15
    4b7e:	0f 93       	push	r16
    4b80:	1f 93       	push	r17
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	cd b7       	in	r28, 0x3d	; 61
    4b88:	de b7       	in	r29, 0x3e	; 62
    4b8a:	ca 1b       	sub	r28, r26
    4b8c:	db 0b       	sbc	r29, r27
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	f8 94       	cli
    4b92:	de bf       	out	0x3e, r29	; 62
    4b94:	0f be       	out	0x3f, r0	; 63
    4b96:	cd bf       	out	0x3d, r28	; 61
    4b98:	09 94       	ijmp

00004b9a <__epilogue_restores__>:
    4b9a:	2a 88       	ldd	r2, Y+18	; 0x12
    4b9c:	39 88       	ldd	r3, Y+17	; 0x11
    4b9e:	48 88       	ldd	r4, Y+16	; 0x10
    4ba0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ba2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ba4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ba6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ba8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4baa:	aa 84       	ldd	r10, Y+10	; 0x0a
    4bac:	b9 84       	ldd	r11, Y+9	; 0x09
    4bae:	c8 84       	ldd	r12, Y+8	; 0x08
    4bb0:	df 80       	ldd	r13, Y+7	; 0x07
    4bb2:	ee 80       	ldd	r14, Y+6	; 0x06
    4bb4:	fd 80       	ldd	r15, Y+5	; 0x05
    4bb6:	0c 81       	ldd	r16, Y+4	; 0x04
    4bb8:	1b 81       	ldd	r17, Y+3	; 0x03
    4bba:	aa 81       	ldd	r26, Y+2	; 0x02
    4bbc:	b9 81       	ldd	r27, Y+1	; 0x01
    4bbe:	ce 0f       	add	r28, r30
    4bc0:	d1 1d       	adc	r29, r1
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	ed 01       	movw	r28, r26
    4bce:	08 95       	ret

00004bd0 <strcmp>:
    4bd0:	fb 01       	movw	r30, r22
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	8d 91       	ld	r24, X+
    4bd6:	01 90       	ld	r0, Z+
    4bd8:	80 19       	sub	r24, r0
    4bda:	01 10       	cpse	r0, r1
    4bdc:	d9 f3       	breq	.-10     	; 0x4bd4 <strcmp+0x4>
    4bde:	99 0b       	sbc	r25, r25
    4be0:	08 95       	ret

00004be2 <strlen>:
    4be2:	fc 01       	movw	r30, r24
    4be4:	01 90       	ld	r0, Z+
    4be6:	00 20       	and	r0, r0
    4be8:	e9 f7       	brne	.-6      	; 0x4be4 <strlen+0x2>
    4bea:	80 95       	com	r24
    4bec:	90 95       	com	r25
    4bee:	8e 0f       	add	r24, r30
    4bf0:	9f 1f       	adc	r25, r31
    4bf2:	08 95       	ret

00004bf4 <_exit>:
    4bf4:	f8 94       	cli

00004bf6 <__stop_program>:
    4bf6:	ff cf       	rjmp	.-2      	; 0x4bf6 <__stop_program>
