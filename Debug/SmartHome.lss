
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000488  00800060  00004c6c  00004d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008004e8  008004e8  00005188  2**0
                  ALLOC
  3 .stab         00004944  00000000  00000000  00005188  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002079  00000000  00000000  00009acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bb45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bc85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000bdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000da3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e929  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__vector_13>
      38:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__vector_14>
      3c:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e0       	ldi	r26, 0x01	; 1
     128:	b4 e0       	ldi	r27, 0x04	; 4
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
		{"user9", "9999"}
};
u8 local_u8ReceivedData = 255;
int attempts = 3;

int main(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c4 56       	subi	r28, 0x64	; 100
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
     b60:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <MDIO_voidInit>
	MUART_voidInit();
     b64:	0e 94 c6 22 	call	0x458c	; 0x458c <MUART_voidInit>
	MTIMER0_voidInit();
     b68:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <MTIMER0_voidInit>
	MTIMER1_voidInit();
     b6c:	0e 94 b0 20 	call	0x4160	; 0x4160 <MTIMER1_voidInit>
	HLCD_voidInit();
     b70:	0e 94 a7 11 	call	0x234e	; 0x234e <HLCD_voidInit>
	HLCD_voidDisplayString("Access Granted!");
     b74:	80 e6       	ldi	r24, 0x60	; 96
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>


	Display_WelcomeMessage();
     b7c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <Display_WelcomeMessage>

	// Loop until the correct credentials are entered or maximum attempts reached
	do {
		MUART_voidSendStringSyncNonBlocking("\r\nEnter username: ");
     b80:	80 e7       	ldi	r24, 0x70	; 112
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		MUART_voidReceiveStringSync(enteredUsername);
     b88:	88 ef       	ldi	r24, 0xF8	; 248
     b8a:	94 e0       	ldi	r25, 0x04	; 4
     b8c:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <MUART_voidReceiveStringSync>

		MUART_voidSendStringSyncNonBlocking("\r\nEnter password: ");
     b90:	83 e8       	ldi	r24, 0x83	; 131
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		MUART_voidReceiveStringSync(enteredPassword);
     b98:	89 e0       	ldi	r24, 0x09	; 9
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <MUART_voidReceiveStringSync>

		// Check if the entered credentials are correct
		for (int i = 0; i < MAX_USERS; ++i) {
     ba0:	fe 01       	movw	r30, r28
     ba2:	ed 59       	subi	r30, 0x9D	; 157
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	10 82       	st	Z, r1
     baa:	f7 c0       	rjmp	.+494    	; 0xd9a <main+0x254>
			if (VerifyCredentials(enteredUsername, enteredPassword, &validUsers[i])) {
     bac:	fe 01       	movw	r30, r28
     bae:	ed 59       	subi	r30, 0x9D	; 157
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	40 81       	ld	r20, Z
     bb4:	51 81       	ldd	r21, Z+1	; 0x01
     bb6:	ca 01       	movw	r24, r20
     bb8:	9c 01       	movw	r18, r24
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	24 0f       	add	r18, r20
     bc0:	35 1f       	adc	r19, r21
     bc2:	c9 01       	movw	r24, r18
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 1b       	sub	r24, r18
     bd2:	93 0b       	sbc	r25, r19
     bd4:	84 0f       	add	r24, r20
     bd6:	95 1f       	adc	r25, r21
     bd8:	ac 01       	movw	r20, r24
     bda:	47 5f       	subi	r20, 0xF7	; 247
     bdc:	5b 4f       	sbci	r21, 0xFB	; 251
     bde:	88 ef       	ldi	r24, 0xF8	; 248
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	29 e0       	ldi	r18, 0x09	; 9
     be4:	35 e0       	ldi	r19, 0x05	; 5
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <VerifyCredentials>
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	09 f4       	brne	.+2      	; 0xbf2 <main+0xac>
     bf0:	c8 c0       	rjmp	.+400    	; 0xd82 <main+0x23c>

				MUART_voidSendStringSyncNonBlocking("\r\nAccess Granted!\r\n\r\n");
     bf2:	86 e9       	ldi	r24, 0x96	; 150
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
				HLCD_voidDisplayString("Access Granted!");
     bfa:	80 e6       	ldi	r24, 0x60	; 96
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
     c02:	fe 01       	movw	r30, r28
     c04:	e1 5a       	subi	r30, 0xA1	; 161
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	aa e7       	ldi	r26, 0x7A	; 122
     c0e:	b4 e4       	ldi	r27, 0x44	; 68
     c10:	80 83       	st	Z, r24
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	a2 83       	std	Z+2, r26	; 0x02
     c16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c18:	8e 01       	movw	r16, r28
     c1a:	05 5a       	subi	r16, 0xA5	; 165
     c1c:	1f 4f       	sbci	r17, 0xFF	; 255
     c1e:	fe 01       	movw	r30, r28
     c20:	e1 5a       	subi	r30, 0xA1	; 161
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	60 81       	ld	r22, Z
     c26:	71 81       	ldd	r23, Z+1	; 0x01
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4a ef       	ldi	r20, 0xFA	; 250
     c32:	54 e4       	ldi	r21, 0x44	; 68
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	f8 01       	movw	r30, r16
     c3e:	80 83       	st	Z, r24
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	a2 83       	std	Z+2, r26	; 0x02
     c44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c46:	fe 01       	movw	r30, r28
     c48:	e5 5a       	subi	r30, 0xA5	; 165
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c60:	88 23       	and	r24, r24
     c62:	44 f4       	brge	.+16     	; 0xc74 <main+0x12e>
		__ticks = 1;
     c64:	fe 01       	movw	r30, r28
     c66:	e7 5a       	subi	r30, 0xA7	; 167
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	80 83       	st	Z, r24
     c72:	64 c0       	rjmp	.+200    	; 0xd3c <main+0x1f6>
	else if (__tmp > 65535)
     c74:	fe 01       	movw	r30, r28
     c76:	e5 5a       	subi	r30, 0xA5	; 165
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	3f ef       	ldi	r19, 0xFF	; 255
     c86:	4f e7       	ldi	r20, 0x7F	; 127
     c88:	57 e4       	ldi	r21, 0x47	; 71
     c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c8e:	18 16       	cp	r1, r24
     c90:	0c f0       	brlt	.+2      	; 0xc94 <main+0x14e>
     c92:	43 c0       	rjmp	.+134    	; 0xd1a <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c94:	fe 01       	movw	r30, r28
     c96:	e1 5a       	subi	r30, 0xA1	; 161
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e2       	ldi	r20, 0x20	; 32
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	8e 01       	movw	r16, r28
     cb4:	07 5a       	subi	r16, 0xA7	; 167
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	f8 01       	movw	r30, r16
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
     cca:	1f c0       	rjmp	.+62     	; 0xd0a <main+0x1c4>
     ccc:	fe 01       	movw	r30, r28
     cce:	e9 5a       	subi	r30, 0xA9	; 169
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	91 83       	std	Z+1, r25	; 0x01
     cd8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	fe 01       	movw	r30, r28
     cdc:	e9 5a       	subi	r30, 0xA9	; 169
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <main+0x19e>
     ce8:	fe 01       	movw	r30, r28
     cea:	e9 5a       	subi	r30, 0xA9	; 169
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf2:	de 01       	movw	r26, r28
     cf4:	a7 5a       	subi	r26, 0xA7	; 167
     cf6:	bf 4f       	sbci	r27, 0xFF	; 255
     cf8:	fe 01       	movw	r30, r28
     cfa:	e7 5a       	subi	r30, 0xA7	; 167
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0a:	fe 01       	movw	r30, r28
     d0c:	e7 5a       	subi	r30, 0xA7	; 167
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	d1 f6       	brne	.-76     	; 0xccc <main+0x186>
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <main+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	8e 01       	movw	r16, r28
     d1c:	07 5a       	subi	r16, 0xA7	; 167
     d1e:	1f 4f       	sbci	r17, 0xFF	; 255
     d20:	fe 01       	movw	r30, r28
     d22:	e5 5a       	subi	r30, 0xA5	; 165
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	f8 01       	movw	r30, r16
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	de 01       	movw	r26, r28
     d3e:	ab 5a       	subi	r26, 0xAB	; 171
     d40:	bf 4f       	sbci	r27, 0xFF	; 255
     d42:	fe 01       	movw	r30, r28
     d44:	e7 5a       	subi	r30, 0xA7	; 167
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	8d 93       	st	X+, r24
     d4e:	9c 93       	st	X, r25
     d50:	fe 01       	movw	r30, r28
     d52:	eb 5a       	subi	r30, 0xAB	; 171
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <main+0x214>
     d5e:	fe 01       	movw	r30, r28
     d60:	eb 5a       	subi	r30, 0xAB	; 171
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	80 83       	st	Z, r24
				_delay_ms(1000);
				HLCD_voidClearDisplay();
     d68:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>

				while(1){
					Display_Menu();
     d6c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <Display_Menu>
					local_u8ReceivedData = MUART_u8ReadByteSyncBlocking();
     d70:	0e 94 01 24 	call	0x4802	; 0x4802 <MUART_u8ReadByteSyncBlocking>
     d74:	80 93 e5 04 	sts	0x04E5, r24
					Smart_Home(local_u8ReceivedData);
     d78:	80 91 e5 04 	lds	r24, 0x04E5
     d7c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <Smart_Home>
     d80:	f5 cf       	rjmp	.-22     	; 0xd6c <main+0x226>

		MUART_voidSendStringSyncNonBlocking("\r\nEnter password: ");
		MUART_voidReceiveStringSync(enteredPassword);

		// Check if the entered credentials are correct
		for (int i = 0; i < MAX_USERS; ++i) {
     d82:	de 01       	movw	r26, r28
     d84:	ad 59       	subi	r26, 0x9D	; 157
     d86:	bf 4f       	sbci	r27, 0xFF	; 255
     d88:	fe 01       	movw	r30, r28
     d8a:	ed 59       	subi	r30, 0x9D	; 157
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	9c 93       	st	X, r25
     d98:	8e 93       	st	-X, r24
     d9a:	fe 01       	movw	r30, r28
     d9c:	ed 59       	subi	r30, 0x9D	; 157
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	91 05       	cpc	r25, r1
     da8:	0c f4       	brge	.+2      	; 0xdac <main+0x266>
     daa:	00 cf       	rjmp	.-512    	; 0xbac <main+0x66>
				HLCD_voidClearDisplay();
			}

		}

		attempts--;
     dac:	80 91 e6 04 	lds	r24, 0x04E6
     db0:	90 91 e7 04 	lds	r25, 0x04E7
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	90 93 e7 04 	sts	0x04E7, r25
     dba:	80 93 e6 04 	sts	0x04E6, r24

		BuzzerOn(10000);
     dbe:	80 e1       	ldi	r24, 0x10	; 16
     dc0:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <BuzzerOn>
     dc4:	fe 01       	movw	r30, r28
     dc6:	ef 5a       	subi	r30, 0xAF	; 175
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	aa ef       	ldi	r26, 0xFA	; 250
     dd0:	b3 e4       	ldi	r27, 0x43	; 67
     dd2:	80 83       	st	Z, r24
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	a2 83       	std	Z+2, r26	; 0x02
     dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	8e 01       	movw	r16, r28
     ddc:	03 5b       	subi	r16, 0xB3	; 179
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	ef 5a       	subi	r30, 0xAF	; 175
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a ef       	ldi	r20, 0xFA	; 250
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	f8 01       	movw	r30, r16
     e00:	80 83       	st	Z, r24
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	a2 83       	std	Z+2, r26	; 0x02
     e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e08:	fe 01       	movw	r30, r28
     e0a:	e3 5b       	subi	r30, 0xB3	; 179
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e8       	ldi	r20, 0x80	; 128
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e22:	88 23       	and	r24, r24
     e24:	44 f4       	brge	.+16     	; 0xe36 <main+0x2f0>
		__ticks = 1;
     e26:	fe 01       	movw	r30, r28
     e28:	e5 5b       	subi	r30, 0xB5	; 181
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	64 c0       	rjmp	.+200    	; 0xefe <main+0x3b8>
	else if (__tmp > 65535)
     e36:	fe 01       	movw	r30, r28
     e38:	e3 5b       	subi	r30, 0xB3	; 179
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	0c f0       	brlt	.+2      	; 0xe56 <main+0x310>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <main+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	fe 01       	movw	r30, r28
     e58:	ef 5a       	subi	r30, 0xAF	; 175
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8e 01       	movw	r16, r28
     e76:	05 5b       	subi	r16, 0xB5	; 181
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	f8 01       	movw	r30, r16
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
     e8c:	1f c0       	rjmp	.+62     	; 0xecc <main+0x386>
     e8e:	fe 01       	movw	r30, r28
     e90:	e7 5b       	subi	r30, 0xB7	; 183
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	88 ec       	ldi	r24, 0xC8	; 200
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
     e9c:	fe 01       	movw	r30, r28
     e9e:	e7 5b       	subi	r30, 0xB7	; 183
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <main+0x360>
     eaa:	fe 01       	movw	r30, r28
     eac:	e7 5b       	subi	r30, 0xB7	; 183
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	de 01       	movw	r26, r28
     eb6:	a5 5b       	subi	r26, 0xB5	; 181
     eb8:	bf 4f       	sbci	r27, 0xFF	; 255
     eba:	fe 01       	movw	r30, r28
     ebc:	e5 5b       	subi	r30, 0xB5	; 181
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	9c 93       	st	X, r25
     eca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ecc:	fe 01       	movw	r30, r28
     ece:	e5 5b       	subi	r30, 0xB5	; 181
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	d1 f6       	brne	.-76     	; 0xe8e <main+0x348>
     eda:	27 c0       	rjmp	.+78     	; 0xf2a <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	8e 01       	movw	r16, r28
     ede:	05 5b       	subi	r16, 0xB5	; 181
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	fe 01       	movw	r30, r28
     ee4:	e3 5b       	subi	r30, 0xB3	; 179
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	f8 01       	movw	r30, r16
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	de 01       	movw	r26, r28
     f00:	a9 5b       	subi	r26, 0xB9	; 185
     f02:	bf 4f       	sbci	r27, 0xFF	; 255
     f04:	fe 01       	movw	r30, r28
     f06:	e5 5b       	subi	r30, 0xB5	; 181
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	8d 93       	st	X+, r24
     f10:	9c 93       	st	X, r25
     f12:	fe 01       	movw	r30, r28
     f14:	e9 5b       	subi	r30, 0xB9	; 185
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <main+0x3d6>
     f20:	fe 01       	movw	r30, r28
     f22:	e9 5b       	subi	r30, 0xB9	; 185
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
		_delay_ms(500);
		BuzzerOff ();
     f2a:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <BuzzerOff>

		WrongInput();
     f2e:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <WrongInput>

		if (attempts == 0) {
     f32:	80 91 e6 04 	lds	r24, 0x04E6
     f36:	90 91 e7 04 	lds	r25, 0x04E7
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f0       	breq	.+2      	; 0xf40 <main+0x3fa>
     f3e:	20 ce       	rjmp	.-960    	; 0xb80 <main+0x3a>
			BuzzerOn(200);
     f40:	88 ec       	ldi	r24, 0xC8	; 200
     f42:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <BuzzerOn>
     f46:	fe 01       	movw	r30, r28
     f48:	ed 5b       	subi	r30, 0xBD	; 189
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a6 e9       	ldi	r26, 0x96	; 150
     f52:	b3 e4       	ldi	r27, 0x43	; 67
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	a2 83       	std	Z+2, r26	; 0x02
     f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	8e 01       	movw	r16, r28
     f5e:	01 5c       	subi	r16, 0xC1	; 193
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	fe 01       	movw	r30, r28
     f64:	ed 5b       	subi	r30, 0xBD	; 189
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a ef       	ldi	r20, 0xFA	; 250
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	f8 01       	movw	r30, r16
     f82:	80 83       	st	Z, r24
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	a2 83       	std	Z+2, r26	; 0x02
     f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8a:	fe 01       	movw	r30, r28
     f8c:	ff 96       	adiw	r30, 0x3f	; 63
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <main+0x46a>
		__ticks = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9e af       	std	Y+62, r25	; 0x3e
     fac:	8d af       	std	Y+61, r24	; 0x3d
     fae:	46 c0       	rjmp	.+140    	; 0x103c <main+0x4f6>
	else if (__tmp > 65535)
     fb0:	fe 01       	movw	r30, r28
     fb2:	ff 96       	adiw	r30, 0x3f	; 63
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	3f ef       	ldi	r19, 0xFF	; 255
     fc0:	4f e7       	ldi	r20, 0x7F	; 127
     fc2:	57 e4       	ldi	r21, 0x47	; 71
     fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc8:	18 16       	cp	r1, r24
     fca:	64 f5       	brge	.+88     	; 0x1024 <main+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fcc:	fe 01       	movw	r30, r28
     fce:	ed 5b       	subi	r30, 0xBD	; 189
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9e af       	std	Y+62, r25	; 0x3e
     ff8:	8d af       	std	Y+61, r24	; 0x3d
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <main+0x4d4>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9c af       	std	Y+60, r25	; 0x3c
    1002:	8b af       	std	Y+59, r24	; 0x3b
    1004:	8b ad       	ldd	r24, Y+59	; 0x3b
    1006:	9c ad       	ldd	r25, Y+60	; 0x3c
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <main+0x4c2>
    100c:	9c af       	std	Y+60, r25	; 0x3c
    100e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8d ad       	ldd	r24, Y+61	; 0x3d
    1012:	9e ad       	ldd	r25, Y+62	; 0x3e
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9e af       	std	Y+62, r25	; 0x3e
    1018:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8d ad       	ldd	r24, Y+61	; 0x3d
    101c:	9e ad       	ldd	r25, Y+62	; 0x3e
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <main+0x4b6>
    1022:	16 c0       	rjmp	.+44     	; 0x1050 <main+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	fe 01       	movw	r30, r28
    1026:	ff 96       	adiw	r30, 0x3f	; 63
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9e af       	std	Y+62, r25	; 0x3e
    103a:	8d af       	std	Y+61, r24	; 0x3d
    103c:	8d ad       	ldd	r24, Y+61	; 0x3d
    103e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1040:	9a af       	std	Y+58, r25	; 0x3a
    1042:	89 af       	std	Y+57, r24	; 0x39
    1044:	89 ad       	ldd	r24, Y+57	; 0x39
    1046:	9a ad       	ldd	r25, Y+58	; 0x3a
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <main+0x502>
    104c:	9a af       	std	Y+58, r25	; 0x3a
    104e:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(300);

			BuzzerOn(0);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <BuzzerOn>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a6 e9       	ldi	r26, 0x96	; 150
    105c:	b3 e4       	ldi	r27, 0x43	; 67
    105e:	8d ab       	std	Y+53, r24	; 0x35
    1060:	9e ab       	std	Y+54, r25	; 0x36
    1062:	af ab       	std	Y+55, r26	; 0x37
    1064:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	6d a9       	ldd	r22, Y+53	; 0x35
    1068:	7e a9       	ldd	r23, Y+54	; 0x36
    106a:	8f a9       	ldd	r24, Y+55	; 0x37
    106c:	98 ad       	ldd	r25, Y+56	; 0x38
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a ef       	ldi	r20, 0xFA	; 250
    1074:	54 e4       	ldi	r21, 0x44	; 68
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	89 ab       	std	Y+49, r24	; 0x31
    1080:	9a ab       	std	Y+50, r25	; 0x32
    1082:	ab ab       	std	Y+51, r26	; 0x33
    1084:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1086:	69 a9       	ldd	r22, Y+49	; 0x31
    1088:	7a a9       	ldd	r23, Y+50	; 0x32
    108a:	8b a9       	ldd	r24, Y+51	; 0x33
    108c:	9c a9       	ldd	r25, Y+52	; 0x34
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109a:	88 23       	and	r24, r24
    109c:	2c f4       	brge	.+10     	; 0x10a8 <main+0x562>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	98 ab       	std	Y+48, r25	; 0x30
    10a4:	8f a7       	std	Y+47, r24	; 0x2f
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <main+0x5e0>
	else if (__tmp > 65535)
    10a8:	69 a9       	ldd	r22, Y+49	; 0x31
    10aa:	7a a9       	ldd	r23, Y+50	; 0x32
    10ac:	8b a9       	ldd	r24, Y+51	; 0x33
    10ae:	9c a9       	ldd	r25, Y+52	; 0x34
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	4c f5       	brge	.+82     	; 0x1112 <main+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c0:	6d a9       	ldd	r22, Y+53	; 0x35
    10c2:	7e a9       	ldd	r23, Y+54	; 0x36
    10c4:	8f a9       	ldd	r24, Y+55	; 0x37
    10c6:	98 ad       	ldd	r25, Y+56	; 0x38
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	98 ab       	std	Y+48, r25	; 0x30
    10e6:	8f a7       	std	Y+47, r24	; 0x2f
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <main+0x5c2>
    10ea:	88 ec       	ldi	r24, 0xC8	; 200
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9e a7       	std	Y+46, r25	; 0x2e
    10f0:	8d a7       	std	Y+45, r24	; 0x2d
    10f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    10f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <main+0x5b0>
    10fa:	9e a7       	std	Y+46, r25	; 0x2e
    10fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1100:	98 a9       	ldd	r25, Y+48	; 0x30
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	98 ab       	std	Y+48, r25	; 0x30
    1106:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	8f a5       	ldd	r24, Y+47	; 0x2f
    110a:	98 a9       	ldd	r25, Y+48	; 0x30
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	69 f7       	brne	.-38     	; 0x10ea <main+0x5a4>
    1110:	14 c0       	rjmp	.+40     	; 0x113a <main+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	69 a9       	ldd	r22, Y+49	; 0x31
    1114:	7a a9       	ldd	r23, Y+50	; 0x32
    1116:	8b a9       	ldd	r24, Y+51	; 0x33
    1118:	9c a9       	ldd	r25, Y+52	; 0x34
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	98 ab       	std	Y+48, r25	; 0x30
    1124:	8f a7       	std	Y+47, r24	; 0x2f
    1126:	8f a5       	ldd	r24, Y+47	; 0x2f
    1128:	98 a9       	ldd	r25, Y+48	; 0x30
    112a:	9c a7       	std	Y+44, r25	; 0x2c
    112c:	8b a7       	std	Y+43, r24	; 0x2b
    112e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1130:	9c a5       	ldd	r25, Y+44	; 0x2c
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <main+0x5ec>
    1136:	9c a7       	std	Y+44, r25	; 0x2c
    1138:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(300);

			BuzzerOn(200);
    113a:	88 ec       	ldi	r24, 0xC8	; 200
    113c:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <BuzzerOn>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a6 e9       	ldi	r26, 0x96	; 150
    1146:	b3 e4       	ldi	r27, 0x43	; 67
    1148:	8f a3       	std	Y+39, r24	; 0x27
    114a:	98 a7       	std	Y+40, r25	; 0x28
    114c:	a9 a7       	std	Y+41, r26	; 0x29
    114e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6f a1       	ldd	r22, Y+39	; 0x27
    1152:	78 a5       	ldd	r23, Y+40	; 0x28
    1154:	89 a5       	ldd	r24, Y+41	; 0x29
    1156:	9a a5       	ldd	r25, Y+42	; 0x2a
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a ef       	ldi	r20, 0xFA	; 250
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8b a3       	std	Y+35, r24	; 0x23
    116a:	9c a3       	std	Y+36, r25	; 0x24
    116c:	ad a3       	std	Y+37, r26	; 0x25
    116e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1170:	6b a1       	ldd	r22, Y+35	; 0x23
    1172:	7c a1       	ldd	r23, Y+36	; 0x24
    1174:	8d a1       	ldd	r24, Y+37	; 0x25
    1176:	9e a1       	ldd	r25, Y+38	; 0x26
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <main+0x64c>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9a a3       	std	Y+34, r25	; 0x22
    118e:	89 a3       	std	Y+33, r24	; 0x21
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <main+0x6ca>
	else if (__tmp > 65535)
    1192:	6b a1       	ldd	r22, Y+35	; 0x23
    1194:	7c a1       	ldd	r23, Y+36	; 0x24
    1196:	8d a1       	ldd	r24, Y+37	; 0x25
    1198:	9e a1       	ldd	r25, Y+38	; 0x26
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <main+0x6b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6f a1       	ldd	r22, Y+39	; 0x27
    11ac:	78 a5       	ldd	r23, Y+40	; 0x28
    11ae:	89 a5       	ldd	r24, Y+41	; 0x29
    11b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9a a3       	std	Y+34, r25	; 0x22
    11d0:	89 a3       	std	Y+33, r24	; 0x21
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <main+0x6ac>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	98 a3       	std	Y+32, r25	; 0x20
    11da:	8f 8f       	std	Y+31, r24	; 0x1f
    11dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11de:	98 a1       	ldd	r25, Y+32	; 0x20
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x69a>
    11e4:	98 a3       	std	Y+32, r25	; 0x20
    11e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	89 a1       	ldd	r24, Y+33	; 0x21
    11ea:	9a a1       	ldd	r25, Y+34	; 0x22
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9a a3       	std	Y+34, r25	; 0x22
    11f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	89 a1       	ldd	r24, Y+33	; 0x21
    11f4:	9a a1       	ldd	r25, Y+34	; 0x22
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <main+0x68e>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <main+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6b a1       	ldd	r22, Y+35	; 0x23
    11fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1200:	8d a1       	ldd	r24, Y+37	; 0x25
    1202:	9e a1       	ldd	r25, Y+38	; 0x26
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9a a3       	std	Y+34, r25	; 0x22
    120e:	89 a3       	std	Y+33, r24	; 0x21
    1210:	89 a1       	ldd	r24, Y+33	; 0x21
    1212:	9a a1       	ldd	r25, Y+34	; 0x22
    1214:	9e 8f       	std	Y+30, r25	; 0x1e
    1216:	8d 8f       	std	Y+29, r24	; 0x1d
    1218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <main+0x6d6>
    1220:	9e 8f       	std	Y+30, r25	; 0x1e
    1222:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);

			BuzzerOn(0);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <BuzzerOn>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a6 e9       	ldi	r26, 0x96	; 150
    1230:	b3 e4       	ldi	r27, 0x43	; 67
    1232:	89 8f       	std	Y+25, r24	; 0x19
    1234:	9a 8f       	std	Y+26, r25	; 0x1a
    1236:	ab 8f       	std	Y+27, r26	; 0x1b
    1238:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	69 8d       	ldd	r22, Y+25	; 0x19
    123c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    123e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4a ef       	ldi	r20, 0xFA	; 250
    1248:	54 e4       	ldi	r21, 0x44	; 68
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8d 8b       	std	Y+21, r24	; 0x15
    1254:	9e 8b       	std	Y+22, r25	; 0x16
    1256:	af 8b       	std	Y+23, r26	; 0x17
    1258:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    125a:	6d 89       	ldd	r22, Y+21	; 0x15
    125c:	7e 89       	ldd	r23, Y+22	; 0x16
    125e:	8f 89       	ldd	r24, Y+23	; 0x17
    1260:	98 8d       	ldd	r25, Y+24	; 0x18
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <main+0x736>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c 8b       	std	Y+20, r25	; 0x14
    1278:	8b 8b       	std	Y+19, r24	; 0x13
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <main+0x7b4>
	else if (__tmp > 65535)
    127c:	6d 89       	ldd	r22, Y+21	; 0x15
    127e:	7e 89       	ldd	r23, Y+22	; 0x16
    1280:	8f 89       	ldd	r24, Y+23	; 0x17
    1282:	98 8d       	ldd	r25, Y+24	; 0x18
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	57 e4       	ldi	r21, 0x47	; 71
    128c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1290:	18 16       	cp	r1, r24
    1292:	4c f5       	brge	.+82     	; 0x12e6 <main+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1294:	69 8d       	ldd	r22, Y+25	; 0x19
    1296:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1298:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <main+0x796>
    12be:	88 ec       	ldi	r24, 0xC8	; 200
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9a 8b       	std	Y+18, r25	; 0x12
    12c4:	89 8b       	std	Y+17, r24	; 0x11
    12c6:	89 89       	ldd	r24, Y+17	; 0x11
    12c8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <main+0x784>
    12ce:	9a 8b       	std	Y+18, r25	; 0x12
    12d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d2:	8b 89       	ldd	r24, Y+19	; 0x13
    12d4:	9c 89       	ldd	r25, Y+20	; 0x14
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	8b 89       	ldd	r24, Y+19	; 0x13
    12de:	9c 89       	ldd	r25, Y+20	; 0x14
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <main+0x778>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <main+0x7c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e6:	6d 89       	ldd	r22, Y+21	; 0x15
    12e8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ea:	8f 89       	ldd	r24, Y+23	; 0x17
    12ec:	98 8d       	ldd	r25, Y+24	; 0x18
    12ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9c 8b       	std	Y+20, r25	; 0x14
    12f8:	8b 8b       	std	Y+19, r24	; 0x13
    12fa:	8b 89       	ldd	r24, Y+19	; 0x13
    12fc:	9c 89       	ldd	r25, Y+20	; 0x14
    12fe:	98 8b       	std	Y+16, r25	; 0x10
    1300:	8f 87       	std	Y+15, r24	; 0x0f
    1302:	8f 85       	ldd	r24, Y+15	; 0x0f
    1304:	98 89       	ldd	r25, Y+16	; 0x10
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <main+0x7c0>
    130a:	98 8b       	std	Y+16, r25	; 0x10
    130c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);

			BuzzerOn(200);
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <BuzzerOn>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a6 e9       	ldi	r26, 0x96	; 150
    131a:	b3 e4       	ldi	r27, 0x43	; 67
    131c:	8b 87       	std	Y+11, r24	; 0x0b
    131e:	9c 87       	std	Y+12, r25	; 0x0c
    1320:	ad 87       	std	Y+13, r26	; 0x0d
    1322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1324:	6b 85       	ldd	r22, Y+11	; 0x0b
    1326:	7c 85       	ldd	r23, Y+12	; 0x0c
    1328:	8d 85       	ldd	r24, Y+13	; 0x0d
    132a:	9e 85       	ldd	r25, Y+14	; 0x0e
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	8f 83       	std	Y+7, r24	; 0x07
    133e:	98 87       	std	Y+8, r25	; 0x08
    1340:	a9 87       	std	Y+9, r26	; 0x09
    1342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1358:	88 23       	and	r24, r24
    135a:	2c f4       	brge	.+10     	; 0x1366 <main+0x820>
		__ticks = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	3f c0       	rjmp	.+126    	; 0x13e4 <main+0x89e>
	else if (__tmp > 65535)
    1366:	6f 81       	ldd	r22, Y+7	; 0x07
    1368:	78 85       	ldd	r23, Y+8	; 0x08
    136a:	89 85       	ldd	r24, Y+9	; 0x09
    136c:	9a 85       	ldd	r25, Y+10	; 0x0a
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	4f e7       	ldi	r20, 0x7F	; 127
    1374:	57 e4       	ldi	r21, 0x47	; 71
    1376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137a:	18 16       	cp	r1, r24
    137c:	4c f5       	brge	.+82     	; 0x13d0 <main+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1380:	7c 85       	ldd	r23, Y+12	; 0x0c
    1382:	8d 85       	ldd	r24, Y+13	; 0x0d
    1384:	9e 85       	ldd	r25, Y+14	; 0x0e
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <main+0x880>
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c 83       	std	Y+4, r25	; 0x04
    13ae:	8b 83       	std	Y+3, r24	; 0x03
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <main+0x86e>
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	69 f7       	brne	.-38     	; 0x13a8 <main+0x862>
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <main+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	9a 83       	std	Y+2, r25	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <main+0x8aa>
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);

			BuzzerOff ();
    13f8:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <BuzzerOff>

			attempts=3;
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	90 93 e7 04 	sts	0x04E7, r25
    1404:	80 93 e6 04 	sts	0x04E6, r24
    1408:	bb cb       	rjmp	.-2186   	; 0xb80 <main+0x3a>

0000140a <MDIO_voidSetPinDirection>:


// MDIO_voidSetPinDirection(DIO_PORTA, PIN0, DIO_OUTPUT);

void MDIO_voidSetPinDirection(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	2d 97       	sbiw	r28, 0x0d	; 13
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
    1422:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	08 f0       	brcs	.+2      	; 0x142c <MDIO_voidSetPinDirection+0x22>
    142a:	09 c1       	rjmp	.+530    	; 0x163e <MDIO_voidSetPinDirection+0x234>
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 30       	cpi	r24, 0x08	; 8
    1430:	08 f0       	brcs	.+2      	; 0x1434 <MDIO_voidSetPinDirection+0x2a>
    1432:	05 c1       	rjmp	.+522    	; 0x163e <MDIO_voidSetPinDirection+0x234>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	08 f0       	brcs	.+2      	; 0x143c <MDIO_voidSetPinDirection+0x32>
    143a:	01 c1       	rjmp	.+514    	; 0x163e <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_portID)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 87       	std	Y+13, r19	; 0x0d
    1444:	2c 87       	std	Y+12, r18	; 0x0c
    1446:	8c 85       	ldd	r24, Y+12	; 0x0c
    1448:	9d 85       	ldd	r25, Y+13	; 0x0d
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <MDIO_voidSetPinDirection+0x48>
    1450:	4f c0       	rjmp	.+158    	; 0x14f0 <MDIO_voidSetPinDirection+0xe6>
    1452:	2c 85       	ldd	r18, Y+12	; 0x0c
    1454:	3d 85       	ldd	r19, Y+13	; 0x0d
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <MDIO_voidSetPinDirection+0x5c>
    145c:	8c 85       	ldd	r24, Y+12	; 0x0c
    145e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	71 f0       	breq	.+28     	; 0x1480 <MDIO_voidSetPinDirection+0x76>
    1464:	ec c0       	rjmp	.+472    	; 0x163e <MDIO_voidSetPinDirection+0x234>
    1466:	2c 85       	ldd	r18, Y+12	; 0x0c
    1468:	3d 85       	ldd	r19, Y+13	; 0x0d
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <MDIO_voidSetPinDirection+0x68>
    1470:	77 c0       	rjmp	.+238    	; 0x1560 <MDIO_voidSetPinDirection+0x156>
    1472:	8c 85       	ldd	r24, Y+12	; 0x0c
    1474:	9d 85       	ldd	r25, Y+13	; 0x0d
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <MDIO_voidSetPinDirection+0x74>
    147c:	a9 c0       	rjmp	.+338    	; 0x15d0 <MDIO_voidSetPinDirection+0x1c6>
    147e:	df c0       	rjmp	.+446    	; 0x163e <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3b 87       	std	Y+11, r19	; 0x0b
    1488:	2a 87       	std	Y+10, r18	; 0x0a
    148a:	8a 85       	ldd	r24, Y+10	; 0x0a
    148c:	9b 85       	ldd	r25, Y+11	; 0x0b
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	31 f0       	breq	.+12     	; 0x149e <MDIO_voidSetPinDirection+0x94>
    1492:	2a 85       	ldd	r18, Y+10	; 0x0a
    1494:	3b 85       	ldd	r19, Y+11	; 0x0b
    1496:	21 30       	cpi	r18, 0x01	; 1
    1498:	31 05       	cpc	r19, r1
    149a:	b1 f0       	breq	.+44     	; 0x14c8 <MDIO_voidSetPinDirection+0xbe>
    149c:	d0 c0       	rjmp	.+416    	; 0x163e <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    149e:	aa e3       	ldi	r26, 0x3A	; 58
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ea e3       	ldi	r30, 0x3A	; 58
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <MDIO_voidSetPinDirection+0xb2>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <MDIO_voidSetPinDirection+0xae>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	bb c0       	rjmp	.+374    	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    14c8:	aa e3       	ldi	r26, 0x3A	; 58
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ea e3       	ldi	r30, 0x3A	; 58
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <MDIO_voidSetPinDirection+0xdc>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <MDIO_voidSetPinDirection+0xd8>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	a7 c0       	rjmp	.+334    	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	39 87       	std	Y+9, r19	; 0x09
    14f8:	28 87       	std	Y+8, r18	; 0x08
    14fa:	88 85       	ldd	r24, Y+8	; 0x08
    14fc:	99 85       	ldd	r25, Y+9	; 0x09
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	31 f0       	breq	.+12     	; 0x150e <MDIO_voidSetPinDirection+0x104>
    1502:	28 85       	ldd	r18, Y+8	; 0x08
    1504:	39 85       	ldd	r19, Y+9	; 0x09
    1506:	21 30       	cpi	r18, 0x01	; 1
    1508:	31 05       	cpc	r19, r1
    150a:	b1 f0       	breq	.+44     	; 0x1538 <MDIO_voidSetPinDirection+0x12e>
    150c:	98 c0       	rjmp	.+304    	; 0x163e <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    150e:	a7 e3       	ldi	r26, 0x37	; 55
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e7 e3       	ldi	r30, 0x37	; 55
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <MDIO_voidSetPinDirection+0x122>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <MDIO_voidSetPinDirection+0x11e>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	83 c0       	rjmp	.+262    	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    1538:	a7 e3       	ldi	r26, 0x37	; 55
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e7 e3       	ldi	r30, 0x37	; 55
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <MDIO_voidSetPinDirection+0x14c>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <MDIO_voidSetPinDirection+0x148>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	6f c0       	rjmp	.+222    	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	31 f0       	breq	.+12     	; 0x157e <MDIO_voidSetPinDirection+0x174>
    1572:	2e 81       	ldd	r18, Y+6	; 0x06
    1574:	3f 81       	ldd	r19, Y+7	; 0x07
    1576:	21 30       	cpi	r18, 0x01	; 1
    1578:	31 05       	cpc	r19, r1
    157a:	b1 f0       	breq	.+44     	; 0x15a8 <MDIO_voidSetPinDirection+0x19e>
    157c:	60 c0       	rjmp	.+192    	; 0x163e <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    157e:	a4 e3       	ldi	r26, 0x34	; 52
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e4 e3       	ldi	r30, 0x34	; 52
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <MDIO_voidSetPinDirection+0x192>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <MDIO_voidSetPinDirection+0x18e>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	4b c0       	rjmp	.+150    	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <MDIO_voidSetPinDirection+0x1bc>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <MDIO_voidSetPinDirection+0x1b8>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	37 c0       	rjmp	.+110    	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3d 83       	std	Y+5, r19	; 0x05
    15d8:	2c 83       	std	Y+4, r18	; 0x04
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	31 f0       	breq	.+12     	; 0x15ee <MDIO_voidSetPinDirection+0x1e4>
    15e2:	2c 81       	ldd	r18, Y+4	; 0x04
    15e4:	3d 81       	ldd	r19, Y+5	; 0x05
    15e6:	21 30       	cpi	r18, 0x01	; 1
    15e8:	31 05       	cpc	r19, r1
    15ea:	b1 f0       	breq	.+44     	; 0x1618 <MDIO_voidSetPinDirection+0x20e>
    15ec:	28 c0       	rjmp	.+80     	; 0x163e <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    15ee:	a1 e3       	ldi	r26, 0x31	; 49
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e1 e3       	ldi	r30, 0x31	; 49
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <MDIO_voidSetPinDirection+0x202>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <MDIO_voidSetPinDirection+0x1fe>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	13 c0       	rjmp	.+38     	; 0x163e <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    1618:	a1 e3       	ldi	r26, 0x31	; 49
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e1 e3       	ldi	r30, 0x31	; 49
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <MDIO_voidSetPinDirection+0x22c>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <MDIO_voidSetPinDirection+0x228>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    163e:	2d 96       	adiw	r28, 0x0d	; 13
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	2d 97       	sbiw	r28, 0x0d	; 13
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
    1668:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET) )
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	08 f0       	brcs	.+2      	; 0x1672 <MDIO_voidSetPinValue+0x22>
    1670:	09 c1       	rjmp	.+530    	; 0x1884 <MDIO_voidSetPinValue+0x234>
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 30       	cpi	r24, 0x08	; 8
    1676:	08 f0       	brcs	.+2      	; 0x167a <MDIO_voidSetPinValue+0x2a>
    1678:	05 c1       	rjmp	.+522    	; 0x1884 <MDIO_voidSetPinValue+0x234>
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	08 f0       	brcs	.+2      	; 0x1682 <MDIO_voidSetPinValue+0x32>
    1680:	01 c1       	rjmp	.+514    	; 0x1884 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_portID)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3d 87       	std	Y+13, r19	; 0x0d
    168a:	2c 87       	std	Y+12, r18	; 0x0c
    168c:	8c 85       	ldd	r24, Y+12	; 0x0c
    168e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <MDIO_voidSetPinValue+0x48>
    1696:	4f c0       	rjmp	.+158    	; 0x1736 <MDIO_voidSetPinValue+0xe6>
    1698:	2c 85       	ldd	r18, Y+12	; 0x0c
    169a:	3d 85       	ldd	r19, Y+13	; 0x0d
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <MDIO_voidSetPinValue+0x5c>
    16a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <MDIO_voidSetPinValue+0x76>
    16aa:	ec c0       	rjmp	.+472    	; 0x1884 <MDIO_voidSetPinValue+0x234>
    16ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <MDIO_voidSetPinValue+0x68>
    16b6:	77 c0       	rjmp	.+238    	; 0x17a6 <MDIO_voidSetPinValue+0x156>
    16b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <MDIO_voidSetPinValue+0x74>
    16c2:	a9 c0       	rjmp	.+338    	; 0x1816 <MDIO_voidSetPinValue+0x1c6>
    16c4:	df c0       	rjmp	.+446    	; 0x1884 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3b 87       	std	Y+11, r19	; 0x0b
    16ce:	2a 87       	std	Y+10, r18	; 0x0a
    16d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <MDIO_voidSetPinValue+0x94>
    16d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16da:	3b 85       	ldd	r19, Y+11	; 0x0b
    16dc:	21 30       	cpi	r18, 0x01	; 1
    16de:	31 05       	cpc	r19, r1
    16e0:	b1 f0       	breq	.+44     	; 0x170e <MDIO_voidSetPinValue+0xbe>
    16e2:	d0 c0       	rjmp	.+416    	; 0x1884 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
    16e4:	ab e3       	ldi	r26, 0x3B	; 59
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <MDIO_voidSetPinValue+0xb2>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <MDIO_voidSetPinValue+0xae>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	bb c0       	rjmp	.+374    	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
    170e:	ab e3       	ldi	r26, 0x3B	; 59
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	eb e3       	ldi	r30, 0x3B	; 59
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <MDIO_voidSetPinValue+0xdc>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <MDIO_voidSetPinValue+0xd8>
    1730:	84 2b       	or	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	a7 c0       	rjmp	.+334    	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	39 87       	std	Y+9, r19	; 0x09
    173e:	28 87       	std	Y+8, r18	; 0x08
    1740:	88 85       	ldd	r24, Y+8	; 0x08
    1742:	99 85       	ldd	r25, Y+9	; 0x09
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	31 f0       	breq	.+12     	; 0x1754 <MDIO_voidSetPinValue+0x104>
    1748:	28 85       	ldd	r18, Y+8	; 0x08
    174a:	39 85       	ldd	r19, Y+9	; 0x09
    174c:	21 30       	cpi	r18, 0x01	; 1
    174e:	31 05       	cpc	r19, r1
    1750:	b1 f0       	breq	.+44     	; 0x177e <MDIO_voidSetPinValue+0x12e>
    1752:	98 c0       	rjmp	.+304    	; 0x1884 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_pinID);
    1754:	a8 e3       	ldi	r26, 0x38	; 56
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e3       	ldi	r30, 0x38	; 56
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <MDIO_voidSetPinValue+0x122>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <MDIO_voidSetPinValue+0x11e>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	83 c0       	rjmp	.+262    	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_pinID);
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <MDIO_voidSetPinValue+0x14c>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <MDIO_voidSetPinValue+0x148>
    17a0:	84 2b       	or	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	6f c0       	rjmp	.+222    	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3f 83       	std	Y+7, r19	; 0x07
    17ae:	2e 83       	std	Y+6, r18	; 0x06
    17b0:	8e 81       	ldd	r24, Y+6	; 0x06
    17b2:	9f 81       	ldd	r25, Y+7	; 0x07
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	31 f0       	breq	.+12     	; 0x17c4 <MDIO_voidSetPinValue+0x174>
    17b8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ba:	3f 81       	ldd	r19, Y+7	; 0x07
    17bc:	21 30       	cpi	r18, 0x01	; 1
    17be:	31 05       	cpc	r19, r1
    17c0:	b1 f0       	breq	.+44     	; 0x17ee <MDIO_voidSetPinValue+0x19e>
    17c2:	60 c0       	rjmp	.+192    	; 0x1884 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_pinID);
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <MDIO_voidSetPinValue+0x192>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <MDIO_voidSetPinValue+0x18e>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	4b c0       	rjmp	.+150    	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_pinID);
    17ee:	a5 e3       	ldi	r26, 0x35	; 53
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <MDIO_voidSetPinValue+0x1bc>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <MDIO_voidSetPinValue+0x1b8>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	37 c0       	rjmp	.+110    	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3d 83       	std	Y+5, r19	; 0x05
    181e:	2c 83       	std	Y+4, r18	; 0x04
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	31 f0       	breq	.+12     	; 0x1834 <MDIO_voidSetPinValue+0x1e4>
    1828:	2c 81       	ldd	r18, Y+4	; 0x04
    182a:	3d 81       	ldd	r19, Y+5	; 0x05
    182c:	21 30       	cpi	r18, 0x01	; 1
    182e:	31 05       	cpc	r19, r1
    1830:	b1 f0       	breq	.+44     	; 0x185e <MDIO_voidSetPinValue+0x20e>
    1832:	28 c0       	rjmp	.+80     	; 0x1884 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_pinID);
    1834:	a2 e3       	ldi	r26, 0x32	; 50
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e2 e3       	ldi	r30, 0x32	; 50
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <MDIO_voidSetPinValue+0x202>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <MDIO_voidSetPinValue+0x1fe>
    1856:	80 95       	com	r24
    1858:	84 23       	and	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_pinID);
    185e:	a2 e3       	ldi	r26, 0x32	; 50
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <MDIO_voidSetPinValue+0x22c>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <MDIO_voidSetPinValue+0x228>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1884:	2d 96       	adiw	r28, 0x0d	; 13
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <MDIO_getPinValue>:


DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <MDIO_getPinValue+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <MDIO_getPinValue+0x8>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <MDIO_getPinValue+0x1a>
    18ae:	6b c0       	rjmp	.+214    	; 0x1986 <MDIO_getPinValue+0xf0>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 30       	cpi	r24, 0x08	; 8
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <MDIO_getPinValue+0x22>
    18b6:	67 c0       	rjmp	.+206    	; 0x1986 <MDIO_getPinValue+0xf0>
	{
		switch (A_portID)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	4c 81       	ldd	r20, Y+4	; 0x04
    18c4:	5d 81       	ldd	r21, Y+5	; 0x05
    18c6:	41 30       	cpi	r20, 0x01	; 1
    18c8:	51 05       	cpc	r21, r1
    18ca:	41 f1       	breq	.+80     	; 0x191c <MDIO_getPinValue+0x86>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	91 05       	cpc	r25, r1
    18d4:	34 f4       	brge	.+12     	; 0x18e2 <MDIO_getPinValue+0x4c>
    18d6:	2c 81       	ldd	r18, Y+4	; 0x04
    18d8:	3d 81       	ldd	r19, Y+5	; 0x05
    18da:	21 15       	cp	r18, r1
    18dc:	31 05       	cpc	r19, r1
    18de:	61 f0       	breq	.+24     	; 0x18f8 <MDIO_getPinValue+0x62>
    18e0:	52 c0       	rjmp	.+164    	; 0x1986 <MDIO_getPinValue+0xf0>
    18e2:	4c 81       	ldd	r20, Y+4	; 0x04
    18e4:	5d 81       	ldd	r21, Y+5	; 0x05
    18e6:	42 30       	cpi	r20, 0x02	; 2
    18e8:	51 05       	cpc	r21, r1
    18ea:	51 f1       	breq	.+84     	; 0x1940 <MDIO_getPinValue+0xaa>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	b9 f1       	breq	.+110    	; 0x1964 <MDIO_getPinValue+0xce>
    18f6:	47 c0       	rjmp	.+142    	; 0x1986 <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    18f8:	e9 e3       	ldi	r30, 0x39	; 57
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <MDIO_getPinValue+0x7a>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <MDIO_getPinValue+0x76>
    1914:	ca 01       	movw	r24, r20
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	35 c0       	rjmp	.+106    	; 0x1986 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    191c:	e6 e3       	ldi	r30, 0x36	; 54
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <MDIO_getPinValue+0x9e>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <MDIO_getPinValue+0x9a>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	23 c0       	rjmp	.+70     	; 0x1986 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1940:	e3 e3       	ldi	r30, 0x33	; 51
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <MDIO_getPinValue+0xc2>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <MDIO_getPinValue+0xbe>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	11 c0       	rjmp	.+34     	; 0x1986 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1964:	e0 e3       	ldi	r30, 0x30	; 48
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <MDIO_getPinValue+0xe6>
    1978:	55 95       	asr	r21
    197a:	47 95       	ror	r20
    197c:	8a 95       	dec	r24
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <MDIO_getPinValue+0xe2>
    1980:	ca 01       	movw	r24, r20
    1982:	81 70       	andi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <MDIO_voidTogglePinValue+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <MDIO_voidTogglePinValue+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	84 30       	cpi	r24, 0x04	; 4
    19ac:	08 f0       	brcs	.+2      	; 0x19b0 <MDIO_voidTogglePinValue+0x18>
    19ae:	72 c0       	rjmp	.+228    	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	88 30       	cpi	r24, 0x08	; 8
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <MDIO_voidTogglePinValue+0x20>
    19b6:	6e c0       	rjmp	.+220    	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_portID)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3c 83       	std	Y+4, r19	; 0x04
    19c0:	2b 83       	std	Y+3, r18	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	91 05       	cpc	r25, r1
    19ca:	49 f1       	breq	.+82     	; 0x1a1e <MDIO_voidTogglePinValue+0x86>
    19cc:	2b 81       	ldd	r18, Y+3	; 0x03
    19ce:	3c 81       	ldd	r19, Y+4	; 0x04
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <MDIO_voidTogglePinValue+0x48>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	61 f0       	breq	.+24     	; 0x19f6 <MDIO_voidTogglePinValue+0x5e>
    19de:	5a c0       	rjmp	.+180    	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
    19e0:	2b 81       	ldd	r18, Y+3	; 0x03
    19e2:	3c 81       	ldd	r19, Y+4	; 0x04
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	71 f1       	breq	.+92     	; 0x1a46 <MDIO_voidTogglePinValue+0xae>
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	91 05       	cpc	r25, r1
    19f2:	e9 f1       	breq	.+122    	; 0x1a6e <MDIO_voidTogglePinValue+0xd6>
    19f4:	4f c0       	rjmp	.+158    	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    19f6:	ab e3       	ldi	r26, 0x3B	; 59
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	eb e3       	ldi	r30, 0x3B	; 59
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <MDIO_voidTogglePinValue+0x7c>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <MDIO_voidTogglePinValue+0x78>
    1a18:	84 27       	eor	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	3b c0       	rjmp	.+118    	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1a1e:	a8 e3       	ldi	r26, 0x38	; 56
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <MDIO_voidTogglePinValue+0xa4>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <MDIO_voidTogglePinValue+0xa0>
    1a40:	84 27       	eor	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	27 c0       	rjmp	.+78     	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    1a46:	a5 e3       	ldi	r26, 0x35	; 53
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e5 e3       	ldi	r30, 0x35	; 53
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <MDIO_voidTogglePinValue+0xcc>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <MDIO_voidTogglePinValue+0xc8>
    1a68:	84 27       	eor	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	13 c0       	rjmp	.+38     	; 0x1a94 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1a6e:	a2 e3       	ldi	r26, 0x32	; 50
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e2 e3       	ldi	r30, 0x32	; 50
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <MDIO_voidTogglePinValue+0xf4>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <MDIO_voidTogglePinValue+0xf0>
    1a90:	84 27       	eor	r24, r20
    1a92:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <MDIO_voidSetPortDirection+0x6>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <MDIO_voidSetPortDirection+0x8>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	90 f5       	brcc	.+100    	; 0x1b1c <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_portID)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3c 83       	std	Y+4, r19	; 0x04
    1ac0:	2b 83       	std	Y+3, r18	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	d1 f0       	breq	.+52     	; 0x1b00 <MDIO_voidSetPortDirection+0x5e>
    1acc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ace:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <MDIO_voidSetPortDirection+0x3e>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <MDIO_voidSetPortDirection+0x54>
    1ade:	1e c0       	rjmp	.+60     	; 0x1b1c <MDIO_voidSetPortDirection+0x7a>
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <MDIO_voidSetPortDirection+0x68>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	83 30       	cpi	r24, 0x03	; 3
    1af0:	91 05       	cpc	r25, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <MDIO_voidSetPortDirection+0x72>
    1af4:	13 c0       	rjmp	.+38     	; 0x1b1c <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1af6:	ea e3       	ldi	r30, 0x3A	; 58
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	80 83       	st	Z, r24
    1afe:	0e c0       	rjmp	.+28     	; 0x1b1c <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1b00:	e7 e3       	ldi	r30, 0x37	; 55
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
    1b08:	09 c0       	rjmp	.+18     	; 0x1b1c <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1b0a:	e4 e3       	ldi	r30, 0x34	; 52
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1b14:	e1 e3       	ldi	r30, 0x31	; 49
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <MDIO_voidSetPortValue+0x6>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <MDIO_voidSetPortValue+0x8>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	90 f5       	brcc	.+100    	; 0x1ba4 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_portID)
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	3c 83       	std	Y+4, r19	; 0x04
    1b48:	2b 83       	std	Y+3, r18	; 0x03
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	91 05       	cpc	r25, r1
    1b52:	d1 f0       	breq	.+52     	; 0x1b88 <MDIO_voidSetPortValue+0x5e>
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <MDIO_voidSetPortValue+0x3e>
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <MDIO_voidSetPortValue+0x54>
    1b66:	1e c0       	rjmp	.+60     	; 0x1ba4 <MDIO_voidSetPortValue+0x7a>
    1b68:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	81 f0       	breq	.+32     	; 0x1b92 <MDIO_voidSetPortValue+0x68>
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	91 05       	cpc	r25, r1
    1b7a:	81 f0       	breq	.+32     	; 0x1b9c <MDIO_voidSetPortValue+0x72>
    1b7c:	13 c0       	rjmp	.+38     	; 0x1ba4 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    1b7e:	eb e3       	ldi	r30, 0x3B	; 59
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	80 83       	st	Z, r24
    1b86:	0e c0       	rjmp	.+28     	; 0x1ba4 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    1b88:	e8 e3       	ldi	r30, 0x38	; 56
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	80 83       	st	Z, r24
    1b90:	09 c0       	rjmp	.+18     	; 0x1ba4 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    1b92:	e5 e3       	ldi	r30, 0x35	; 53
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	80 83       	st	Z, r24
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1b9c:	e2 e3       	ldi	r30, 0x32	; 50
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <MDIO_voidInit>:


void MDIO_voidInit (void)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1bba:	ea e3       	ldi	r30, 0x3A	; 58
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	80 83       	st	Z, r24
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1bc2:	e7 e3       	ldi	r30, 0x37	; 55
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	87 ef       	ldi	r24, 0xF7	; 247
    1bc8:	80 83       	st	Z, r24
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1bca:	e4 e3       	ldi	r30, 0x34	; 52
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	10 82       	st	Z, r1
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1bd0:	e1 e3       	ldi	r30, 0x31	; 49
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8e e7       	ldi	r24, 0x7E	; 126
    1bd6:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1bd8:	eb e3       	ldi	r30, 0x3B	; 59
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	88 e1       	ldi	r24, 0x18	; 24
    1be4:	80 83       	st	Z, r24
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    1be6:	e5 e3       	ldi	r30, 0x35	; 53
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1bec:	e2 e3       	ldi	r30, 0x32	; 50
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <EEPROM_voidSendDataByte>:
#define M24C08_A0_CONNECTION 0

#define EEPROM_FIXED_ADDRESS 0b1010000  // 1010 (fixed) + A2A1A0 (configurable)

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	62 97       	sbiw	r28, 0x12	; 18
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	99 8b       	std	Y+17, r25	; 0x11
    1c0e:	88 8b       	std	Y+16, r24	; 0x10
    1c10:	6a 8b       	std	Y+18, r22	; 0x12
    u8 Local_u8AddressPacket;

    Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (M24C08_A2_CONNECTION << 2) | (M24C08_A1_CONNECTION << 1) | (M24C08_A0_CONNECTION);
    1c12:	80 e5       	ldi	r24, 0x50	; 80
    1c14:	8f 87       	std	Y+15, r24	; 0x0f

    /*Send start condition*/
    TWI_ErrorStatusSendStartConditionWithACK();
    1c16:	0e 94 9c 21 	call	0x4338	; 0x4338 <TWI_ErrorStatusSendStartConditionWithACK>

    /*Send the address packet*/
    TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    1c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

    /*Send the rest 8bits of the location address*/
    TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    1c20:	88 89       	ldd	r24, Y+16	; 0x10
    1c22:	0e 94 59 22 	call	0x44b2	; 0x44b2 <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send the data byte to the memory location*/
    TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    1c26:	8a 89       	ldd	r24, Y+18	; 0x12
    1c28:	0e 94 59 22 	call	0x44b2	; 0x44b2 <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send stop condition*/
    TWI_voidSendStopCondition();
    1c2c:	0e 94 b1 22 	call	0x4562	; 0x4562 <TWI_voidSendStopCondition>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e2       	ldi	r26, 0x20	; 32
    1c36:	b1 e4       	ldi	r27, 0x41	; 65
    1c38:	8b 87       	std	Y+11, r24	; 0x0b
    1c3a:	9c 87       	std	Y+12, r25	; 0x0c
    1c3c:	ad 87       	std	Y+13, r26	; 0x0d
    1c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8f 83       	std	Y+7, r24	; 0x07
    1c5a:	98 87       	std	Y+8, r25	; 0x08
    1c5c:	a9 87       	std	Y+9, r26	; 0x09
    1c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <EEPROM_voidSendDataByte+0x8a>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <EEPROM_voidSendDataByte+0x108>
	else if (__tmp > 65535)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <EEPROM_voidSendDataByte+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <EEPROM_voidSendDataByte+0xea>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <EEPROM_voidSendDataByte+0xd8>
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <EEPROM_voidSendDataByte+0xcc>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <EEPROM_voidSendDataByte+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <EEPROM_voidSendDataByte+0x114>
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01

    /*Delay until the write cycle is finished*/
    _delay_ms(10);
}
    1d14:	62 96       	adiw	r28, 0x12	; 18
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <EEPROM_u8ReadDataByte+0x6>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <EEPROM_u8ReadDataByte+0x8>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8AddressPacket, Local_u8Data;

    Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (M24C08_A2_CONNECTION << 2) | (M24C08_A1_CONNECTION << 1) | (M24C08_A0_CONNECTION);
    1d36:	80 e5       	ldi	r24, 0x50	; 80
    1d38:	89 83       	std	Y+1, r24	; 0x01

    /*Send start condition*/
    TWI_ErrorStatusSendStartConditionWithACK();
    1d3a:	0e 94 9c 21 	call	0x4338	; 0x4338 <TWI_ErrorStatusSendStartConditionWithACK>

    /*Send the address packet with write request*/
    TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

    /*Send the rest 8bits of the location address*/
    TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	0e 94 59 22 	call	0x44b2	; 0x44b2 <TWI_ErrorStatusMasterWriteDataByteWithACK>

    /*Send repeated start to change write request into read request*/
    TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    1d4a:	0e 94 c6 21 	call	0x438c	; 0x438c <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

    /*Send the address packet with read request*/
    TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	0e 94 21 22 	call	0x4442	; 0x4442 <TWI_ErrorStatusSendSlaveAddressWithReadACK>

    /*Get the data from memory*/
    TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    1d54:	ce 01       	movw	r24, r28
    1d56:	02 96       	adiw	r24, 0x02	; 2
    1d58:	0e 94 82 22 	call	0x4504	; 0x4504 <TWI_ErrorStatusMasterReadDataByteWithACK>

    /*send the stop condition*/
    TWI_voidSendStopCondition();
    1d5c:	0e 94 b1 22 	call	0x4562	; 0x4562 <TWI_voidSendStopCondition>

    return Local_u8Data;
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <MEXTI_voidConfig>:
void (*EXTI0_Callback) (void) = NULL;
void (*EXTI1_Callback) (void) = NULL;
void (*EXTI2_Callback) (void) = NULL;

void MEXTI_voidConfig (EXTI_ID A_EXTI_ID, EXTI_SENSE_MODE A_EXTISenseMode)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <MEXTI_voidConfig+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <MEXTI_voidConfig+0x8>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <MEXTI_voidConfig+0xa>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_EXTI_ID <= EXTI2) && (A_EXTISenseMode <= RISING_EDGE))
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <MEXTI_voidConfig+0x1a>
    1d88:	54 c0       	rjmp	.+168    	; 0x1e32 <MEXTI_voidConfig+0xc2>
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	84 30       	cpi	r24, 0x04	; 4
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <MEXTI_voidConfig+0x22>
    1d90:	50 c0       	rjmp	.+160    	; 0x1e32 <MEXTI_voidConfig+0xc2>
	{
		switch (A_EXTI_ID)
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	3e 83       	std	Y+6, r19	; 0x06
    1d9a:	2d 83       	std	Y+5, r18	; 0x05
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	91 05       	cpc	r25, r1
    1da4:	c1 f0       	breq	.+48     	; 0x1dd6 <MEXTI_voidConfig+0x66>
    1da6:	2d 81       	ldd	r18, Y+5	; 0x05
    1da8:	3e 81       	ldd	r19, Y+6	; 0x06
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	11 f1       	breq	.+68     	; 0x1df4 <MEXTI_voidConfig+0x84>
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	e9 f5       	brne	.+122    	; 0x1e32 <MEXTI_voidConfig+0xc2>
		{
		case EXTI0:
			MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    1db8:	a5 e5       	ldi	r26, 0x55	; 85
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e5 e5       	ldi	r30, 0x55	; 85
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8c 7f       	andi	r24, 0xFC	; 252
    1dc4:	8c 93       	st	X, r24
			MCUCR |= (SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    1dc6:	a5 e5       	ldi	r26, 0x55	; 85
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e5 e5       	ldi	r30, 0x55	; 85
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	83 60       	ori	r24, 0x03	; 3
    1dd2:	8c 93       	st	X, r24
    1dd4:	2e c0       	rjmp	.+92     	; 0x1e32 <MEXTI_voidConfig+0xc2>
			break;
		case EXTI1:
			MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    1dd6:	a5 e5       	ldi	r26, 0x55	; 85
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e5 e5       	ldi	r30, 0x55	; 85
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	83 7f       	andi	r24, 0xF3	; 243
    1de2:	8c 93       	st	X, r24
			MCUCR |= (SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    1de4:	a5 e5       	ldi	r26, 0x55	; 85
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e5 e5       	ldi	r30, 0x55	; 85
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8c 60       	ori	r24, 0x0C	; 12
    1df0:	8c 93       	st	X, r24
    1df2:	1f c0       	rjmp	.+62     	; 0x1e32 <MEXTI_voidConfig+0xc2>
			break;
		case EXTI2:
			switch(A_EXTISenseMode)
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	3c 83       	std	Y+4, r19	; 0x04
    1dfc:	2b 83       	std	Y+3, r18	; 0x03
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	91 05       	cpc	r25, r1
    1e06:	31 f0       	breq	.+12     	; 0x1e14 <MEXTI_voidConfig+0xa4>
    1e08:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0c:	23 30       	cpi	r18, 0x03	; 3
    1e0e:	31 05       	cpc	r19, r1
    1e10:	49 f0       	breq	.+18     	; 0x1e24 <MEXTI_voidConfig+0xb4>
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <MEXTI_voidConfig+0xc2>
			{
			case FALLING_EDGE:
				CLR_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    1e14:	a4 e5       	ldi	r26, 0x54	; 84
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e4 e5       	ldi	r30, 0x54	; 84
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 7b       	andi	r24, 0xBF	; 191
    1e20:	8c 93       	st	X, r24
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <MEXTI_voidConfig+0xc2>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    1e24:	a4 e5       	ldi	r26, 0x54	; 84
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e4 e5       	ldi	r30, 0x54	; 84
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 64       	ori	r24, 0x40	; 64
    1e30:	8c 93       	st	X, r24
			break;
			default:
				break;
		}
	}
}
    1e32:	26 96       	adiw	r28, 0x06	; 6
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <MEXTI_voidEnable>:
void MEXTI_voidEnable (EXTI_ID A_EXTI_ID)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <MEXTI_voidEnable+0x6>
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	50 f5       	brcc	.+84     	; 0x1eac <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3b 83       	std	Y+3, r19	; 0x03
    1e60:	2a 83       	std	Y+2, r18	; 0x02
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	89 f0       	breq	.+34     	; 0x1e8e <MEXTI_voidEnable+0x4a>
    1e6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e6e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	a1 f0       	breq	.+40     	; 0x1e9e <MEXTI_voidEnable+0x5a>
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	b9 f4       	brne	.+46     	; 0x1eac <MEXTI_voidEnable+0x68>
		{
		case EXTI0:
			SET_BIT(GICR,EXTI0_ENABLE_BIT);
    1e7e:	ab e5       	ldi	r26, 0x5B	; 91
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	eb e5       	ldi	r30, 0x5B	; 91
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	80 64       	ori	r24, 0x40	; 64
    1e8a:	8c 93       	st	X, r24
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <MEXTI_voidEnable+0x68>
			break;
		case EXTI1:
			SET_BIT(GICR,EXTI1_ENABLE_BIT);
    1e8e:	ab e5       	ldi	r26, 0x5B	; 91
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	eb e5       	ldi	r30, 0x5B	; 91
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	80 68       	ori	r24, 0x80	; 128
    1e9a:	8c 93       	st	X, r24
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <MEXTI_voidEnable+0x68>
			break;
		case EXTI2:
			SET_BIT(GICR,EXTI2_ENABLE_BIT);
    1e9e:	ab e5       	ldi	r26, 0x5B	; 91
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	eb e5       	ldi	r30, 0x5B	; 91
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 62       	ori	r24, 0x20	; 32
    1eaa:	8c 93       	st	X, r24
			break;
		}
	}
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <MEXTI_voidDisable>:
void MEXTI_voidDisable (EXTI_ID A_EXTI_ID)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <MEXTI_voidDisable+0x6>
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	50 f5       	brcc	.+84     	; 0x1f20 <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	3b 83       	std	Y+3, r19	; 0x03
    1ed4:	2a 83       	std	Y+2, r18	; 0x02
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	91 05       	cpc	r25, r1
    1ede:	89 f0       	breq	.+34     	; 0x1f02 <MEXTI_voidDisable+0x4a>
    1ee0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee4:	22 30       	cpi	r18, 0x02	; 2
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	a1 f0       	breq	.+40     	; 0x1f12 <MEXTI_voidDisable+0x5a>
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	b9 f4       	brne	.+46     	; 0x1f20 <MEXTI_voidDisable+0x68>
		{
		case EXTI0:
			CLR_BIT(GICR,EXTI0_ENABLE_BIT);
    1ef2:	ab e5       	ldi	r26, 0x5B	; 91
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	eb e5       	ldi	r30, 0x5B	; 91
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 7b       	andi	r24, 0xBF	; 191
    1efe:	8c 93       	st	X, r24
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <MEXTI_voidDisable+0x68>
			break;
		case EXTI1:
			CLR_BIT(GICR,EXTI1_ENABLE_BIT);
    1f02:	ab e5       	ldi	r26, 0x5B	; 91
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	eb e5       	ldi	r30, 0x5B	; 91
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8f 77       	andi	r24, 0x7F	; 127
    1f0e:	8c 93       	st	X, r24
    1f10:	07 c0       	rjmp	.+14     	; 0x1f20 <MEXTI_voidDisable+0x68>
			break;
		case EXTI2:
			CLR_BIT(GICR,EXTI2_ENABLE_BIT);
    1f12:	ab e5       	ldi	r26, 0x5B	; 91
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	eb e5       	ldi	r30, 0x5B	; 91
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 7d       	andi	r24, 0xDF	; 223
    1f1e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <MEXTI_voidClearFlag>:
void MEXTI_voidClearFlag (EXTI_ID A_EXTI_ID)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <MEXTI_voidClearFlag+0x6>
    1f32:	0f 92       	push	r0
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	50 f5       	brcc	.+84     	; 0x1f94 <MEXTI_voidClearFlag+0x68>
	{
		switch (A_EXTI_ID)
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	3b 83       	std	Y+3, r19	; 0x03
    1f48:	2a 83       	std	Y+2, r18	; 0x02
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	91 05       	cpc	r25, r1
    1f52:	89 f0       	breq	.+34     	; 0x1f76 <MEXTI_voidClearFlag+0x4a>
    1f54:	2a 81       	ldd	r18, Y+2	; 0x02
    1f56:	3b 81       	ldd	r19, Y+3	; 0x03
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	a1 f0       	breq	.+40     	; 0x1f86 <MEXTI_voidClearFlag+0x5a>
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	b9 f4       	brne	.+46     	; 0x1f94 <MEXTI_voidClearFlag+0x68>
		{
		case EXTI0:
			SET_BIT(GIFR,EXTI0_ENABLE_BIT);
    1f66:	aa e5       	ldi	r26, 0x5A	; 90
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ea e5       	ldi	r30, 0x5A	; 90
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 64       	ori	r24, 0x40	; 64
    1f72:	8c 93       	st	X, r24
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <MEXTI_voidClearFlag+0x68>
			break;
		case EXTI1:
			SET_BIT(GIFR,EXTI1_ENABLE_BIT);
    1f76:	aa e5       	ldi	r26, 0x5A	; 90
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	ea e5       	ldi	r30, 0x5A	; 90
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 68       	ori	r24, 0x80	; 128
    1f82:	8c 93       	st	X, r24
    1f84:	07 c0       	rjmp	.+14     	; 0x1f94 <MEXTI_voidClearFlag+0x68>
			break;
		case EXTI2:
			SET_BIT(GIFR,EXTI2_ENABLE_BIT);
    1f86:	aa e5       	ldi	r26, 0x5A	; 90
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	ea e5       	ldi	r30, 0x5A	; 90
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 62       	ori	r24, 0x20	; 32
    1f92:	8c 93       	st	X, r24
			break;
		}
	}
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <MEXTI_voidSetCallBack>:
void MEXTI_voidSetCallBack (EXTI_ID A_EXTI_ID, void(*A_ptrToFunc)(void))
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <MEXTI_voidSetCallBack+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <MEXTI_voidSetCallBack+0x8>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	7b 83       	std	Y+3, r23	; 0x03
    1fb2:	6a 83       	std	Y+2, r22	; 0x02
	if((A_EXTI_ID <= EXTI2) && (A_ptrToFunc != NULL))
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	58 f5       	brcc	.+86     	; 0x2010 <MEXTI_voidSetCallBack+0x70>
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	39 f1       	breq	.+78     	; 0x2010 <MEXTI_voidSetCallBack+0x70>
	{
		switch (A_EXTI_ID)
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	3d 83       	std	Y+5, r19	; 0x05
    1fca:	2c 83       	std	Y+4, r18	; 0x04
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	81 f0       	breq	.+32     	; 0x1ff6 <MEXTI_voidSetCallBack+0x56>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	91 f0       	breq	.+36     	; 0x2004 <MEXTI_voidSetCallBack+0x64>
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	a1 f4       	brne	.+40     	; 0x2010 <MEXTI_voidSetCallBack+0x70>
		{
		case EXTI0:
			EXTI0_Callback = A_ptrToFunc;
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	9b 81       	ldd	r25, Y+3	; 0x03
    1fec:	90 93 e9 04 	sts	0x04E9, r25
    1ff0:	80 93 e8 04 	sts	0x04E8, r24
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <MEXTI_voidSetCallBack+0x70>
			break;
		case EXTI1:
			EXTI1_Callback = A_ptrToFunc;
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffa:	90 93 eb 04 	sts	0x04EB, r25
    1ffe:	80 93 ea 04 	sts	0x04EA, r24
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <MEXTI_voidSetCallBack+0x70>
			break;
		case EXTI2:
			EXTI2_Callback = A_ptrToFunc;
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	9b 81       	ldd	r25, Y+3	; 0x03
    2008:	90 93 ed 04 	sts	0x04ED, r25
    200c:	80 93 ec 04 	sts	0x04EC, r24
			break;
		}
	}

}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <void__vector_1>:
voi__vector_1(void)__attribute__((signal));
void__vector_1(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <void__vector_1+0x6>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    202a:	80 91 e8 04 	lds	r24, 0x04E8
    202e:	90 91 e9 04 	lds	r25, 0x04E9
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	29 f0       	breq	.+10     	; 0x2040 <void__vector_1+0x20>
	{
		EXTI0_Callback ();
    2036:	e0 91 e8 04 	lds	r30, 0x04E8
    203a:	f0 91 e9 04 	lds	r31, 0x04E9
    203e:	09 95       	icall
	}
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <void__vector_2>:

voi__vector_2(void)__attribute__((signal));
void__vector_2(void)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <void__vector_2+0x6>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    2054:	80 91 e8 04 	lds	r24, 0x04E8
    2058:	90 91 e9 04 	lds	r25, 0x04E9
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	29 f0       	breq	.+10     	; 0x206a <void__vector_2+0x20>
	{
		EXTI0_Callback ();
    2060:	e0 91 e8 04 	lds	r30, 0x04E8
    2064:	f0 91 e9 04 	lds	r31, 0x04E9
    2068:	09 95       	icall
	}
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <void__vector_3>:

voi__vector_3(void)__attribute__((signal));
void__vector_3(void)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <void__vector_3+0x6>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    207e:	80 91 e8 04 	lds	r24, 0x04E8
    2082:	90 91 e9 04 	lds	r25, 0x04E9
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	29 f0       	breq	.+10     	; 0x2094 <void__vector_3+0x20>
	{
		EXTI0_Callback ();
    208a:	e0 91 e8 04 	lds	r30, 0x04E8
    208e:	f0 91 e9 04 	lds	r31, 0x04E9
    2092:	09 95       	icall
	}
}
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    20a6:	af e5       	ldi	r26, 0x5F	; 95
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	ef e5       	ldi	r30, 0x5F	; 95
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 68       	ori	r24, 0x80	; 128
    20b2:	8c 93       	st	X, r24
}
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    20c2:	af e5       	ldi	r26, 0x5F	; 95
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	ef e5       	ldi	r30, 0x5F	; 95
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	8f 77       	andi	r24, 0x7F	; 127
    20ce:	8c 93       	st	X, r24
}
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <HLCD_voidSendCommand>:
#include "../Include/HAL/LCD/LCD_Cfg.h"

#define F_CPU 8000000UL

void HLCD_voidSendCommand (u8 A_u8Command)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	2f 97       	sbiw	r28, 0x0f	; 15
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Command --> (RS-->0) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_RESET);
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>

	// Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	6f 85       	ldd	r22, Y+15	; 0x0f
    2104:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e4       	ldi	r27, 0x40	; 64
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <HLCD_voidSendCommand+0xee>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <HLCD_voidSendCommand+0xdc>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <HLCD_voidSendCommand+0xd0>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <HLCD_voidSendCommand+0x118>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	62 e0       	ldi	r22, 0x02	; 2
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
}
    2200:	2f 96       	adiw	r28, 0x0f	; 15
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <HLCD_voidSendData>:

void HLCD_voidSendData (u8 A_u8Data)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	2f 97       	sbiw	r28, 0x0f	; 15
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Data --> (RS-->1) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_SET);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2240:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	b0 e4       	ldi	r27, 0x40	; 64
    2256:	8b 87       	std	Y+11, r24	; 0x0b
    2258:	9c 87       	std	Y+12, r25	; 0x0c
    225a:	ad 87       	std	Y+13, r26	; 0x0d
    225c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a ef       	ldi	r20, 0xFA	; 250
    226c:	54 e4       	ldi	r21, 0x44	; 68
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8f 83       	std	Y+7, r24	; 0x07
    2278:	98 87       	std	Y+8, r25	; 0x08
    227a:	a9 87       	std	Y+9, r26	; 0x09
    227c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	3f c0       	rjmp	.+126    	; 0x231e <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	3f ef       	ldi	r19, 0xFF	; 255
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	57 e4       	ldi	r21, 0x47	; 71
    22b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	4c f5       	brge	.+82     	; 0x230a <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    22bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22be:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	51 e4       	ldi	r21, 0x41	; 65
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <HLCD_voidSendData+0xee>
    22e2:	88 ec       	ldi	r24, 0xC8	; 200
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <HLCD_voidSendData+0xdc>
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	69 f7       	brne	.-38     	; 0x22e2 <HLCD_voidSendData+0xd0>
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <HLCD_voidSendData+0x118>
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
}
    233c:	2f 96       	adiw	r28, 0x0f	; 15
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <HLCD_voidInit>:


void HLCD_voidInit(void)
{
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	c6 54       	subi	r28, 0x46	; 70
    235c:	d0 40       	sbci	r29, 0x00	; 0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	fe 01       	movw	r30, r28
    236a:	ed 5b       	subi	r30, 0xBD	; 189
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 ef       	ldi	r26, 0xF0	; 240
    2374:	b1 e4       	ldi	r27, 0x41	; 65
    2376:	80 83       	st	Z, r24
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	a2 83       	std	Z+2, r26	; 0x02
    237c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	8e 01       	movw	r16, r28
    2380:	01 5c       	subi	r16, 0xC1	; 193
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	fe 01       	movw	r30, r28
    2386:	ed 5b       	subi	r30, 0xBD	; 189
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	80 83       	st	Z, r24
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	a2 83       	std	Z+2, r26	; 0x02
    23aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ac:	fe 01       	movw	r30, r28
    23ae:	ff 96       	adiw	r30, 0x3f	; 63
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <HLCD_voidInit+0x84>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9e af       	std	Y+62, r25	; 0x3e
    23ce:	8d af       	std	Y+61, r24	; 0x3d
    23d0:	46 c0       	rjmp	.+140    	; 0x245e <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    23d2:	fe 01       	movw	r30, r28
    23d4:	ff 96       	adiw	r30, 0x3f	; 63
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	64 f5       	brge	.+88     	; 0x2446 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	fe 01       	movw	r30, r28
    23f0:	ed 5b       	subi	r30, 0xBD	; 189
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e af       	std	Y+62, r25	; 0x3e
    241a:	8d af       	std	Y+61, r24	; 0x3d
    241c:	0f c0       	rjmp	.+30     	; 0x243c <HLCD_voidInit+0xee>
    241e:	88 ec       	ldi	r24, 0xC8	; 200
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9c af       	std	Y+60, r25	; 0x3c
    2424:	8b af       	std	Y+59, r24	; 0x3b
    2426:	8b ad       	ldd	r24, Y+59	; 0x3b
    2428:	9c ad       	ldd	r25, Y+60	; 0x3c
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <HLCD_voidInit+0xdc>
    242e:	9c af       	std	Y+60, r25	; 0x3c
    2430:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	8d ad       	ldd	r24, Y+61	; 0x3d
    2434:	9e ad       	ldd	r25, Y+62	; 0x3e
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	9e af       	std	Y+62, r25	; 0x3e
    243a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	8d ad       	ldd	r24, Y+61	; 0x3d
    243e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <HLCD_voidInit+0xd0>
    2444:	16 c0       	rjmp	.+44     	; 0x2472 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	fe 01       	movw	r30, r28
    2448:	ff 96       	adiw	r30, 0x3f	; 63
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9e af       	std	Y+62, r25	; 0x3e
    245c:	8d af       	std	Y+61, r24	; 0x3d
    245e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2460:	9e ad       	ldd	r25, Y+62	; 0x3e
    2462:	9a af       	std	Y+58, r25	; 0x3a
    2464:	89 af       	std	Y+57, r24	; 0x39
    2466:	89 ad       	ldd	r24, Y+57	; 0x39
    2468:	9a ad       	ldd	r25, Y+58	; 0x3a
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <HLCD_voidInit+0x11c>
    246e:	9a af       	std	Y+58, r25	; 0x3a
    2470:	89 af       	std	Y+57, r24	; 0x39
	// Wait for more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	// Function Set Command then wait for more than 39us
	HLCD_voidSendCommand(FUNCTION_SET);
    2472:	88 e3       	ldi	r24, 0x38	; 56
    2474:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e8       	ldi	r26, 0x80	; 128
    247e:	bf e3       	ldi	r27, 0x3F	; 63
    2480:	8d ab       	std	Y+53, r24	; 0x35
    2482:	9e ab       	std	Y+54, r25	; 0x36
    2484:	af ab       	std	Y+55, r26	; 0x37
    2486:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6d a9       	ldd	r22, Y+53	; 0x35
    248a:	7e a9       	ldd	r23, Y+54	; 0x36
    248c:	8f a9       	ldd	r24, Y+55	; 0x37
    248e:	98 ad       	ldd	r25, Y+56	; 0x38
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	89 ab       	std	Y+49, r24	; 0x31
    24a2:	9a ab       	std	Y+50, r25	; 0x32
    24a4:	ab ab       	std	Y+51, r26	; 0x33
    24a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24a8:	69 a9       	ldd	r22, Y+49	; 0x31
    24aa:	7a a9       	ldd	r23, Y+50	; 0x32
    24ac:	8b a9       	ldd	r24, Y+51	; 0x33
    24ae:	9c a9       	ldd	r25, Y+52	; 0x34
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <HLCD_voidInit+0x17c>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    24ca:	69 a9       	ldd	r22, Y+49	; 0x31
    24cc:	7a a9       	ldd	r23, Y+50	; 0x32
    24ce:	8b a9       	ldd	r24, Y+51	; 0x33
    24d0:	9c a9       	ldd	r25, Y+52	; 0x34
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6d a9       	ldd	r22, Y+53	; 0x35
    24e4:	7e a9       	ldd	r23, Y+54	; 0x36
    24e6:	8f a9       	ldd	r24, Y+55	; 0x37
    24e8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	98 ab       	std	Y+48, r25	; 0x30
    2508:	8f a7       	std	Y+47, r24	; 0x2f
    250a:	0f c0       	rjmp	.+30     	; 0x252a <HLCD_voidInit+0x1dc>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e a7       	std	Y+46, r25	; 0x2e
    2512:	8d a7       	std	Y+45, r24	; 0x2d
    2514:	8d a5       	ldd	r24, Y+45	; 0x2d
    2516:	9e a5       	ldd	r25, Y+46	; 0x2e
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <HLCD_voidInit+0x1ca>
    251c:	9e a7       	std	Y+46, r25	; 0x2e
    251e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8f a5       	ldd	r24, Y+47	; 0x2f
    2522:	98 a9       	ldd	r25, Y+48	; 0x30
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	98 ab       	std	Y+48, r25	; 0x30
    2528:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8f a5       	ldd	r24, Y+47	; 0x2f
    252c:	98 a9       	ldd	r25, Y+48	; 0x30
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <HLCD_voidInit+0x1be>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	69 a9       	ldd	r22, Y+49	; 0x31
    2536:	7a a9       	ldd	r23, Y+50	; 0x32
    2538:	8b a9       	ldd	r24, Y+51	; 0x33
    253a:	9c a9       	ldd	r25, Y+52	; 0x34
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	98 ab       	std	Y+48, r25	; 0x30
    2546:	8f a7       	std	Y+47, r24	; 0x2f
    2548:	8f a5       	ldd	r24, Y+47	; 0x2f
    254a:	98 a9       	ldd	r25, Y+48	; 0x30
    254c:	9c a7       	std	Y+44, r25	; 0x2c
    254e:	8b a7       	std	Y+43, r24	; 0x2b
    2550:	8b a5       	ldd	r24, Y+43	; 0x2b
    2552:	9c a5       	ldd	r25, Y+44	; 0x2c
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <HLCD_voidInit+0x206>
    2558:	9c a7       	std	Y+44, r25	; 0x2c
    255a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Display ON/OFF Control Command then wait for more than 39us
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    255c:	8f e0       	ldi	r24, 0x0F	; 15
    255e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e8       	ldi	r26, 0x80	; 128
    2568:	bf e3       	ldi	r27, 0x3F	; 63
    256a:	8f a3       	std	Y+39, r24	; 0x27
    256c:	98 a7       	std	Y+40, r25	; 0x28
    256e:	a9 a7       	std	Y+41, r26	; 0x29
    2570:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6f a1       	ldd	r22, Y+39	; 0x27
    2574:	78 a5       	ldd	r23, Y+40	; 0x28
    2576:	89 a5       	ldd	r24, Y+41	; 0x29
    2578:	9a a5       	ldd	r25, Y+42	; 0x2a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a ef       	ldi	r20, 0xFA	; 250
    2580:	54 e4       	ldi	r21, 0x44	; 68
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8b a3       	std	Y+35, r24	; 0x23
    258c:	9c a3       	std	Y+36, r25	; 0x24
    258e:	ad a3       	std	Y+37, r26	; 0x25
    2590:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2592:	6b a1       	ldd	r22, Y+35	; 0x23
    2594:	7c a1       	ldd	r23, Y+36	; 0x24
    2596:	8d a1       	ldd	r24, Y+37	; 0x25
    2598:	9e a1       	ldd	r25, Y+38	; 0x26
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <HLCD_voidInit+0x266>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9a a3       	std	Y+34, r25	; 0x22
    25b0:	89 a3       	std	Y+33, r24	; 0x21
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    25b4:	6b a1       	ldd	r22, Y+35	; 0x23
    25b6:	7c a1       	ldd	r23, Y+36	; 0x24
    25b8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ba:	9e a1       	ldd	r25, Y+38	; 0x26
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6f a1       	ldd	r22, Y+39	; 0x27
    25ce:	78 a5       	ldd	r23, Y+40	; 0x28
    25d0:	89 a5       	ldd	r24, Y+41	; 0x29
    25d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9a a3       	std	Y+34, r25	; 0x22
    25f2:	89 a3       	std	Y+33, r24	; 0x21
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <HLCD_voidInit+0x2c6>
    25f6:	88 ec       	ldi	r24, 0xC8	; 200
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	98 a3       	std	Y+32, r25	; 0x20
    25fc:	8f 8f       	std	Y+31, r24	; 0x1f
    25fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2600:	98 a1       	ldd	r25, Y+32	; 0x20
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <HLCD_voidInit+0x2b4>
    2606:	98 a3       	std	Y+32, r25	; 0x20
    2608:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9a a3       	std	Y+34, r25	; 0x22
    2612:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	89 a1       	ldd	r24, Y+33	; 0x21
    2616:	9a a1       	ldd	r25, Y+34	; 0x22
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <HLCD_voidInit+0x2a8>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6b a1       	ldd	r22, Y+35	; 0x23
    2620:	7c a1       	ldd	r23, Y+36	; 0x24
    2622:	8d a1       	ldd	r24, Y+37	; 0x25
    2624:	9e a1       	ldd	r25, Y+38	; 0x26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
    2632:	89 a1       	ldd	r24, Y+33	; 0x21
    2634:	9a a1       	ldd	r25, Y+34	; 0x22
    2636:	9e 8f       	std	Y+30, r25	; 0x1e
    2638:	8d 8f       	std	Y+29, r24	; 0x1d
    263a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    263c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <HLCD_voidInit+0x2f0>
    2642:	9e 8f       	std	Y+30, r25	; 0x1e
    2644:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e4       	ldi	r27, 0x40	; 64
    2654:	89 8f       	std	Y+25, r24	; 0x19
    2656:	9a 8f       	std	Y+26, r25	; 0x1a
    2658:	ab 8f       	std	Y+27, r26	; 0x1b
    265a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265c:	69 8d       	ldd	r22, Y+25	; 0x19
    265e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2660:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2662:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a ef       	ldi	r20, 0xFA	; 250
    266a:	54 e4       	ldi	r21, 0x44	; 68
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	8d 8b       	std	Y+21, r24	; 0x15
    2676:	9e 8b       	std	Y+22, r25	; 0x16
    2678:	af 8b       	std	Y+23, r26	; 0x17
    267a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    267c:	6d 89       	ldd	r22, Y+21	; 0x15
    267e:	7e 89       	ldd	r23, Y+22	; 0x16
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	98 8d       	ldd	r25, Y+24	; 0x18
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2690:	88 23       	and	r24, r24
    2692:	2c f4       	brge	.+10     	; 0x269e <HLCD_voidInit+0x350>
		__ticks = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9c 8b       	std	Y+20, r25	; 0x14
    269a:	8b 8b       	std	Y+19, r24	; 0x13
    269c:	3f c0       	rjmp	.+126    	; 0x271c <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    269e:	6d 89       	ldd	r22, Y+21	; 0x15
    26a0:	7e 89       	ldd	r23, Y+22	; 0x16
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	4c f5       	brge	.+82     	; 0x2708 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	69 8d       	ldd	r22, Y+25	; 0x19
    26b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e2       	ldi	r20, 0x20	; 32
    26c4:	51 e4       	ldi	r21, 0x41	; 65
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9c 8b       	std	Y+20, r25	; 0x14
    26dc:	8b 8b       	std	Y+19, r24	; 0x13
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <HLCD_voidInit+0x3b0>
    26e0:	88 ec       	ldi	r24, 0xC8	; 200
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9a 8b       	std	Y+18, r25	; 0x12
    26e6:	89 8b       	std	Y+17, r24	; 0x11
    26e8:	89 89       	ldd	r24, Y+17	; 0x11
    26ea:	9a 89       	ldd	r25, Y+18	; 0x12
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <HLCD_voidInit+0x39e>
    26f0:	9a 8b       	std	Y+18, r25	; 0x12
    26f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	8b 89       	ldd	r24, Y+19	; 0x13
    26f6:	9c 89       	ldd	r25, Y+20	; 0x14
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	69 f7       	brne	.-38     	; 0x26e0 <HLCD_voidInit+0x392>
    2706:	14 c0       	rjmp	.+40     	; 0x2730 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2708:	6d 89       	ldd	r22, Y+21	; 0x15
    270a:	7e 89       	ldd	r23, Y+22	; 0x16
    270c:	8f 89       	ldd	r24, Y+23	; 0x17
    270e:	98 8d       	ldd	r25, Y+24	; 0x18
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9c 8b       	std	Y+20, r25	; 0x14
    271a:	8b 8b       	std	Y+19, r24	; 0x13
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	98 8b       	std	Y+16, r25	; 0x10
    2722:	8f 87       	std	Y+15, r24	; 0x0f
    2724:	8f 85       	ldd	r24, Y+15	; 0x0f
    2726:	98 89       	ldd	r25, Y+16	; 0x10
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <HLCD_voidInit+0x3da>
    272c:	98 8b       	std	Y+16, r25	; 0x10
    272e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Entry Mode Set Command then wait for more than 39us
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    2730:	86 e0       	ldi	r24, 0x06	; 6
    2732:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e8       	ldi	r26, 0x80	; 128
    273c:	bf e3       	ldi	r27, 0x3F	; 63
    273e:	8b 87       	std	Y+11, r24	; 0x0b
    2740:	9c 87       	std	Y+12, r25	; 0x0c
    2742:	ad 87       	std	Y+13, r26	; 0x0d
    2744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a ef       	ldi	r20, 0xFA	; 250
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8f 83       	std	Y+7, r24	; 0x07
    2760:	98 87       	std	Y+8, r25	; 0x08
    2762:	a9 87       	std	Y+9, r26	; 0x09
    2764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <HLCD_voidInit+0x43a>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <HLCD_voidInit+0x49a>
    27ca:	88 ec       	ldi	r24, 0xC8	; 200
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <HLCD_voidInit+0x488>
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <HLCD_voidInit+0x47c>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <HLCD_voidInit+0x4c4>
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    281a:	ca 5b       	subi	r28, 0xBA	; 186
    281c:	df 4f       	sbci	r29, 0xFF	; 255
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	08 95       	ret

00002832 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	2e 97       	sbiw	r28, 0x0e	; 14
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e4       	ldi	r27, 0x40	; 64
    2854:	8b 87       	std	Y+11, r24	; 0x0b
    2856:	9c 87       	std	Y+12, r25	; 0x0c
    2858:	ad 87       	std	Y+13, r26	; 0x0d
    285a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a ef       	ldi	r20, 0xFA	; 250
    286a:	54 e4       	ldi	r21, 0x44	; 68
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8f 83       	std	Y+7, r24	; 0x07
    2876:	98 87       	std	Y+8, r25	; 0x08
    2878:	a9 87       	std	Y+9, r26	; 0x09
    287a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9e 83       	std	Y+6, r25	; 0x06
    289a:	8d 83       	std	Y+5, r24	; 0x05
    289c:	3f c0       	rjmp	.+126    	; 0x291c <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    289e:	6f 81       	ldd	r22, Y+7	; 0x07
    28a0:	78 85       	ldd	r23, Y+8	; 0x08
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    28bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <HLCD_voidClearDisplay+0xcc>
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <HLCD_voidClearDisplay+0xba>
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <HLCD_voidClearDisplay+0xae>
    2906:	14 c0       	rjmp	.+40     	; 0x2930 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9e 83       	std	Y+6, r25	; 0x06
    291a:	8d 83       	std	Y+5, r24	; 0x05
    291c:	8d 81       	ldd	r24, Y+5	; 0x05
    291e:	9e 81       	ldd	r25, Y+6	; 0x06
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <HLCD_voidClearDisplay+0xf6>
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2930:	2e 96       	adiw	r28, 0x0e	; 14
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <HLCD_voidDisplayString>:

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <HLCD_voidDisplayString+0x6>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	0b c0       	rjmp	.+22     	; 0x2968 <HLCD_voidDisplayString+0x26>
	while (*A_8uPtrToString > 0)
	{
		HLCD_voidSendData(*A_8uPtrToString++);
    2952:	e9 81       	ldd	r30, Y+1	; 0x01
    2954:	fa 81       	ldd	r31, Y+2	; 0x02
    2956:	20 81       	ld	r18, Z
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	82 2f       	mov	r24, r18
    2964:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
	while (*A_8uPtrToString > 0)
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	80 81       	ld	r24, Z
    296e:	88 23       	and	r24, r24
    2970:	81 f7       	brne	.-32     	; 0x2952 <HLCD_voidDisplayString+0x10>
	{
		HLCD_voidSendData(*A_8uPtrToString++);
	}
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <HLCD_voidGoToPos>:


void HLCD_voidGoToPos (LCD_ROW_e A_LCDRow, LCD_COL_e A_LCDCol)
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	00 d0       	rcall	.+0      	; 0x2982 <HLCD_voidGoToPos+0x6>
    2982:	00 d0       	rcall	.+0      	; 0x2984 <HLCD_voidGoToPos+0x8>
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_LCDRow)
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	3c 83       	std	Y+4, r19	; 0x04
    2994:	2b 83       	std	Y+3, r18	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	81 30       	cpi	r24, 0x01	; 1
    299c:	91 05       	cpc	r25, r1
    299e:	31 f0       	breq	.+12     	; 0x29ac <HLCD_voidGoToPos+0x30>
    29a0:	2b 81       	ldd	r18, Y+3	; 0x03
    29a2:	3c 81       	ldd	r19, Y+4	; 0x04
    29a4:	22 30       	cpi	r18, 0x02	; 2
    29a6:	31 05       	cpc	r19, r1
    29a8:	31 f0       	breq	.+12     	; 0x29b6 <HLCD_voidGoToPos+0x3a>
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <HLCD_voidGoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	81 58       	subi	r24, 0x81	; 129
    29b0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
    29b4:	04 c0       	rjmp	.+8      	; 0x29be <HLCD_voidGoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	81 54       	subi	r24, 0x41	; 65
    29ba:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>
		break;
	default:
		break;
	}
}
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber (u32 A_u32Number)
{
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	28 97       	sbiw	r28, 0x08	; 8
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	6d 83       	std	Y+5, r22	; 0x05
    29ea:	7e 83       	std	Y+6, r23	; 0x06
    29ec:	8f 83       	std	Y+7, r24	; 0x07
    29ee:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 e0       	ldi	r26, 0x00	; 0
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	ab 83       	std	Y+3, r26	; 0x03
    29fe:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	af 81       	ldd	r26, Y+7	; 0x07
    2a06:	b8 85       	ldd	r27, Y+8	; 0x08
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	a1 05       	cpc	r26, r1
    2a0c:	b1 05       	cpc	r27, r1
    2a0e:	d1 f5       	brne	.+116    	; 0x2a84 <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    2a10:	80 e3       	ldi	r24, 0x30	; 48
    2a12:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendData>
    2a16:	36 c0       	rjmp	.+108    	; 0x2a84 <HLCD_voidDisplayNumber+0xb8>
	}

	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a20:	2a e0       	ldi	r18, 0x0A	; 10
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    2a30:	7b 01       	movw	r14, r22
    2a32:	8c 01       	movw	r16, r24
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	af 81       	ldd	r26, Y+7	; 0x07
    2a3a:	b8 85       	ldd	r27, Y+8	; 0x08
    2a3c:	2a e0       	ldi	r18, 0x0A	; 10
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	8e 0d       	add	r24, r14
    2a52:	9f 1d       	adc	r25, r15
    2a54:	a0 1f       	adc	r26, r16
    2a56:	b1 1f       	adc	r27, r17
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	ab 83       	std	Y+3, r26	; 0x03
    2a5e:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	af 81       	ldd	r26, Y+7	; 0x07
    2a66:	b8 85       	ldd	r27, Y+8	; 0x08
    2a68:	2a e0       	ldi	r18, 0x0A	; 10
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    2a78:	da 01       	movw	r26, r20
    2a7a:	c9 01       	movw	r24, r18
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	af 83       	std	Y+7, r26	; 0x07
    2a82:	b8 87       	std	Y+8, r27	; 0x08
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}

	while (A_u32Number != 0)
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	af 81       	ldd	r26, Y+7	; 0x07
    2a8a:	b8 85       	ldd	r27, Y+8	; 0x08
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	a1 05       	cpc	r26, r1
    2a90:	b1 05       	cpc	r27, r1
    2a92:	11 f6       	brne	.-124    	; 0x2a18 <HLCD_voidDisplayNumber+0x4c>
    2a94:	23 c0       	rjmp	.+70     	; 0x2adc <HLCD_voidDisplayNumber+0x110>
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a9c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a9e:	2a e0       	ldi	r18, 0x0A	; 10
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	80 5d       	subi	r24, 0xD0	; 208
    2ab4:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	ab 81       	ldd	r26, Y+3	; 0x03
    2abe:	bc 81       	ldd	r27, Y+4	; 0x04
    2ac0:	2a e0       	ldi	r18, 0x0A	; 10
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    2ad0:	da 01       	movw	r26, r20
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	ab 83       	std	Y+3, r26	; 0x03
    2ada:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ae2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	a1 05       	cpc	r26, r1
    2aea:	b1 05       	cpc	r27, r1
    2aec:	a1 f6       	brne	.-88     	; 0x2a96 <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    2aee:	28 96       	adiw	r28, 0x08	; 8
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	08 95       	ret

00002b08 <HLCD_voidSendSpecialSymbol>:


void HLCD_voidSendSpecialSymbol (u8 *A_pu8SymbolArray, LCD_PATTERNS_e A_PatternNum,LCD_ROW_e A_RowNo, LCD_COL_e A_ColNo)
{
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	27 97       	sbiw	r28, 0x07	; 7
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	9c 83       	std	Y+4, r25	; 0x04
    2b1e:	8b 83       	std	Y+3, r24	; 0x03
    2b20:	6d 83       	std	Y+5, r22	; 0x05
    2b22:	4e 83       	std	Y+6, r20	; 0x06
    2b24:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress;

	// Calculate CGRAM Address
	local_u8CGRAMAddress = A_PatternNum * 8;
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	88 2f       	mov	r24, r24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	80 64       	ori	r24, 0x40	; 64
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HLCD_voidSendCommand>

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    2b46:	19 82       	std	Y+1, r1	; 0x01
    2b48:	0e c0       	rjmp	.+28     	; 0x2b66 <HLCD_voidSendSpecialSymbol+0x5e>
	{
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	fc 01       	movw	r30, r24
    2b56:	e2 0f       	add	r30, r18
    2b58:	f3 1f       	adc	r31, r19
    2b5a:	80 81       	ld	r24, Z
    2b5c:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendData>
	local_u8CGRAMAddress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	8f 5f       	subi	r24, 0xFF	; 255
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	88 30       	cpi	r24, 0x08	; 8
    2b6a:	78 f3       	brcs	.-34     	; 0x2b4a <HLCD_voidSendSpecialSymbol+0x42>
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
	}

	// Send Command to Set DDRAM Address
	HLCD_voidGoToPos(A_RowNo, A_ColNo);
    2b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b70:	0e 94 be 14 	call	0x297c	; 0x297c <HLCD_voidGoToPos>
	// Display Pattern
	HLCD_voidSendData(A_PatternNum);
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	0e 94 09 11 	call	0x2212	; 0x2212 <HLCD_voidSendData>
}
    2b7a:	27 96       	adiw	r28, 0x07	; 7
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <HLED_voidTurnOn>:
 * HAL
 */


void HLED_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <HLED_voidTurnOn+0x6>
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <HLED_voidTurnOff>:
void HLED_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <HLED_voidTurnOff+0x6>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	6a 81       	ldd	r22, Y+2	; 0x02
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 28 0b 	call	0x1650	; 0x1650 <MDIO_voidSetPinValue>
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <HLED_voidToggleLED>:
void HLED_voidToggleLED (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <HLED_voidToggleLED+0x6>
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_PINID);
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	48 2f       	mov	r20, r24
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	ca 01       	movw	r24, r20
    2bec:	b9 01       	movw	r22, r18
    2bee:	0e 94 cc 0c 	call	0x1998	; 0x1998 <MDIO_voidTogglePinValue>
}
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <VerifyCredentials>:
#include "../SMARTHOME/SMARTHOME_Cfg.h"

#define F_CPU 8000000UL

// Function to verify the entered credentials
int VerifyCredentials(const char* enteredUsername, const char* enteredPassword, const User* user) {
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	28 97       	sbiw	r28, 0x08	; 8
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	7c 83       	std	Y+4, r23	; 0x04
    2c16:	6b 83       	std	Y+3, r22	; 0x03
    2c18:	5e 83       	std	Y+6, r21	; 0x06
    2c1a:	4d 83       	std	Y+5, r20	; 0x05
	return (strcmp(enteredUsername, user->username) == 0 &&
    2c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	b9 01       	movw	r22, r18
    2c26:	0e 94 22 26 	call	0x4c44	; 0x4c44 <strcmp>
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	c1 f4       	brne	.+48     	; 0x2c5e <VerifyCredentials+0x62>
    2c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c30:	9e 81       	ldd	r25, Y+6	; 0x06
    2c32:	9c 01       	movw	r18, r24
    2c34:	2f 5e       	subi	r18, 0xEF	; 239
    2c36:	3f 4f       	sbci	r19, 0xFF	; 255
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	b9 01       	movw	r22, r18
    2c3e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <strcmp>
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	61 f4       	brne	.+24     	; 0x2c5e <VerifyCredentials+0x62>
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <strlen>
    2c4e:	84 30       	cpi	r24, 0x04	; 4
    2c50:	91 05       	cpc	r25, r1
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <VerifyCredentials+0x62>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	8f 83       	std	Y+7, r24	; 0x07
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <VerifyCredentials+0x66>
    2c5e:	18 86       	std	Y+8, r1	; 0x08
    2c60:	1f 82       	std	Y+7, r1	; 0x07
    2c62:	8f 81       	ldd	r24, Y+7	; 0x07
    2c64:	98 85       	ldd	r25, Y+8	; 0x08
			strcmp(enteredPassword, user->password) == 0 &&
			strlen(enteredPassword) == PASSWORD_SIZE);
}
    2c66:	28 96       	adiw	r28, 0x08	; 8
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <Smart_Home>:

int Smart_Home(u8 local_u8ReceivedData){
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	cf 59       	subi	r28, 0x9F	; 159
    2c86:	d0 40       	sbci	r29, 0x00	; 0
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 56       	subi	r30, 0x65	; 101
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 83       	st	Z, r24

	switch(local_u8ReceivedData)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e5 56       	subi	r30, 0x65	; 101
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	c4 56       	subi	r28, 0x64	; 100
    2ca8:	df 4f       	sbci	r29, 0xFF	; 255
    2caa:	39 83       	std	Y+1, r19	; 0x01
    2cac:	28 83       	st	Y, r18
    2cae:	cc 59       	subi	r28, 0x9C	; 156
    2cb0:	d0 40       	sbci	r29, 0x00	; 0
    2cb2:	c4 56       	subi	r28, 0x64	; 100
    2cb4:	df 4f       	sbci	r29, 0xFF	; 255
    2cb6:	88 81       	ld	r24, Y
    2cb8:	99 81       	ldd	r25, Y+1	; 0x01
    2cba:	cc 59       	subi	r28, 0x9C	; 156
    2cbc:	d0 40       	sbci	r29, 0x00	; 0
    2cbe:	86 33       	cpi	r24, 0x36	; 54
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <Smart_Home+0x4e>
    2cc4:	8b c4       	rjmp	.+2326   	; 0x35dc <Smart_Home+0x964>
    2cc6:	c4 56       	subi	r28, 0x64	; 100
    2cc8:	df 4f       	sbci	r29, 0xFF	; 255
    2cca:	e8 81       	ld	r30, Y
    2ccc:	f9 81       	ldd	r31, Y+1	; 0x01
    2cce:	cc 59       	subi	r28, 0x9C	; 156
    2cd0:	d0 40       	sbci	r29, 0x00	; 0
    2cd2:	e7 33       	cpi	r30, 0x37	; 55
    2cd4:	f1 05       	cpc	r31, r1
    2cd6:	0c f0       	brlt	.+2      	; 0x2cda <Smart_Home+0x62>
    2cd8:	3e c0       	rjmp	.+124    	; 0x2d56 <Smart_Home+0xde>
    2cda:	c4 56       	subi	r28, 0x64	; 100
    2cdc:	df 4f       	sbci	r29, 0xFF	; 255
    2cde:	28 81       	ld	r18, Y
    2ce0:	39 81       	ldd	r19, Y+1	; 0x01
    2ce2:	cc 59       	subi	r28, 0x9C	; 156
    2ce4:	d0 40       	sbci	r29, 0x00	; 0
    2ce6:	23 33       	cpi	r18, 0x33	; 51
    2ce8:	31 05       	cpc	r19, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <Smart_Home+0x76>
    2cec:	13 c2       	rjmp	.+1062   	; 0x3114 <Smart_Home+0x49c>
    2cee:	c4 56       	subi	r28, 0x64	; 100
    2cf0:	df 4f       	sbci	r29, 0xFF	; 255
    2cf2:	88 81       	ld	r24, Y
    2cf4:	99 81       	ldd	r25, Y+1	; 0x01
    2cf6:	cc 59       	subi	r28, 0x9C	; 156
    2cf8:	d0 40       	sbci	r29, 0x00	; 0
    2cfa:	84 33       	cpi	r24, 0x34	; 52
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	b4 f4       	brge	.+44     	; 0x2d2c <Smart_Home+0xb4>
    2d00:	c4 56       	subi	r28, 0x64	; 100
    2d02:	df 4f       	sbci	r29, 0xFF	; 255
    2d04:	e8 81       	ld	r30, Y
    2d06:	f9 81       	ldd	r31, Y+1	; 0x01
    2d08:	cc 59       	subi	r28, 0x9C	; 156
    2d0a:	d0 40       	sbci	r29, 0x00	; 0
    2d0c:	e1 33       	cpi	r30, 0x31	; 49
    2d0e:	f1 05       	cpc	r31, r1
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <Smart_Home+0x9c>
    2d12:	68 c0       	rjmp	.+208    	; 0x2de4 <Smart_Home+0x16c>
    2d14:	c4 56       	subi	r28, 0x64	; 100
    2d16:	df 4f       	sbci	r29, 0xFF	; 255
    2d18:	28 81       	ld	r18, Y
    2d1a:	39 81       	ldd	r19, Y+1	; 0x01
    2d1c:	cc 59       	subi	r28, 0x9C	; 156
    2d1e:	d0 40       	sbci	r29, 0x00	; 0
    2d20:	22 33       	cpi	r18, 0x32	; 50
    2d22:	31 05       	cpc	r19, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <Smart_Home+0xb0>
    2d26:	2a c1       	rjmp	.+596    	; 0x2f7c <Smart_Home+0x304>
    2d28:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <Smart_Home+0xf7a>
    2d2c:	c4 56       	subi	r28, 0x64	; 100
    2d2e:	df 4f       	sbci	r29, 0xFF	; 255
    2d30:	88 81       	ld	r24, Y
    2d32:	99 81       	ldd	r25, Y+1	; 0x01
    2d34:	cc 59       	subi	r28, 0x9C	; 156
    2d36:	d0 40       	sbci	r29, 0x00	; 0
    2d38:	84 33       	cpi	r24, 0x34	; 52
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <Smart_Home+0xc8>
    2d3e:	b6 c2       	rjmp	.+1388   	; 0x32ac <Smart_Home+0x634>
    2d40:	c4 56       	subi	r28, 0x64	; 100
    2d42:	df 4f       	sbci	r29, 0xFF	; 255
    2d44:	e8 81       	ld	r30, Y
    2d46:	f9 81       	ldd	r31, Y+1	; 0x01
    2d48:	cc 59       	subi	r28, 0x9C	; 156
    2d4a:	d0 40       	sbci	r29, 0x00	; 0
    2d4c:	e5 33       	cpi	r30, 0x35	; 53
    2d4e:	f1 05       	cpc	r31, r1
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <Smart_Home+0xdc>
    2d52:	78 c3       	rjmp	.+1776   	; 0x3444 <Smart_Home+0x7cc>
    2d54:	4e c7       	rjmp	.+3740   	; 0x3bf2 <Smart_Home+0xf7a>
    2d56:	c4 56       	subi	r28, 0x64	; 100
    2d58:	df 4f       	sbci	r29, 0xFF	; 255
    2d5a:	28 81       	ld	r18, Y
    2d5c:	39 81       	ldd	r19, Y+1	; 0x01
    2d5e:	cc 59       	subi	r28, 0x9C	; 156
    2d60:	d0 40       	sbci	r29, 0x00	; 0
    2d62:	23 34       	cpi	r18, 0x43	; 67
    2d64:	31 05       	cpc	r19, r1
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <Smart_Home+0xf2>
    2d68:	b9 c6       	rjmp	.+3442   	; 0x3adc <Smart_Home+0xe64>
    2d6a:	c4 56       	subi	r28, 0x64	; 100
    2d6c:	df 4f       	sbci	r29, 0xFF	; 255
    2d6e:	88 81       	ld	r24, Y
    2d70:	99 81       	ldd	r25, Y+1	; 0x01
    2d72:	cc 59       	subi	r28, 0x9C	; 156
    2d74:	d0 40       	sbci	r29, 0x00	; 0
    2d76:	84 34       	cpi	r24, 0x44	; 68
    2d78:	91 05       	cpc	r25, r1
    2d7a:	ac f4       	brge	.+42     	; 0x2da6 <Smart_Home+0x12e>
    2d7c:	c4 56       	subi	r28, 0x64	; 100
    2d7e:	df 4f       	sbci	r29, 0xFF	; 255
    2d80:	e8 81       	ld	r30, Y
    2d82:	f9 81       	ldd	r31, Y+1	; 0x01
    2d84:	cc 59       	subi	r28, 0x9C	; 156
    2d86:	d0 40       	sbci	r29, 0x00	; 0
    2d88:	e7 33       	cpi	r30, 0x37	; 55
    2d8a:	f1 05       	cpc	r31, r1
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <Smart_Home+0x118>
    2d8e:	f2 c4       	rjmp	.+2532   	; 0x3774 <Smart_Home+0xafc>
    2d90:	c4 56       	subi	r28, 0x64	; 100
    2d92:	df 4f       	sbci	r29, 0xFF	; 255
    2d94:	28 81       	ld	r18, Y
    2d96:	39 81       	ldd	r19, Y+1	; 0x01
    2d98:	cc 59       	subi	r28, 0x9C	; 156
    2d9a:	d0 40       	sbci	r29, 0x00	; 0
    2d9c:	28 33       	cpi	r18, 0x38	; 56
    2d9e:	31 05       	cpc	r19, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <Smart_Home+0x12c>
    2da2:	86 c5       	rjmp	.+2828   	; 0x38b0 <Smart_Home+0xc38>
    2da4:	26 c7       	rjmp	.+3660   	; 0x3bf2 <Smart_Home+0xf7a>
    2da6:	c4 56       	subi	r28, 0x64	; 100
    2da8:	df 4f       	sbci	r29, 0xFF	; 255
    2daa:	88 81       	ld	r24, Y
    2dac:	99 81       	ldd	r25, Y+1	; 0x01
    2dae:	cc 59       	subi	r28, 0x9C	; 156
    2db0:	d0 40       	sbci	r29, 0x00	; 0
    2db2:	83 36       	cpi	r24, 0x63	; 99
    2db4:	91 05       	cpc	r25, r1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <Smart_Home+0x142>
    2db8:	91 c6       	rjmp	.+3362   	; 0x3adc <Smart_Home+0xe64>
    2dba:	c4 56       	subi	r28, 0x64	; 100
    2dbc:	df 4f       	sbci	r29, 0xFF	; 255
    2dbe:	e8 81       	ld	r30, Y
    2dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    2dc2:	cc 59       	subi	r28, 0x9C	; 156
    2dc4:	d0 40       	sbci	r29, 0x00	; 0
    2dc6:	ef 36       	cpi	r30, 0x6F	; 111
    2dc8:	f1 05       	cpc	r31, r1
    2dca:	09 f4       	brne	.+2      	; 0x2dce <Smart_Home+0x156>
    2dcc:	fc c5       	rjmp	.+3064   	; 0x39c6 <Smart_Home+0xd4e>
    2dce:	c4 56       	subi	r28, 0x64	; 100
    2dd0:	df 4f       	sbci	r29, 0xFF	; 255
    2dd2:	28 81       	ld	r18, Y
    2dd4:	39 81       	ldd	r19, Y+1	; 0x01
    2dd6:	cc 59       	subi	r28, 0x9C	; 156
    2dd8:	d0 40       	sbci	r29, 0x00	; 0
    2dda:	2f 34       	cpi	r18, 0x4F	; 79
    2ddc:	31 05       	cpc	r19, r1
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <Smart_Home+0x16a>
    2de0:	f2 c5       	rjmp	.+3044   	; 0x39c6 <Smart_Home+0xd4e>
    2de2:	07 c7       	rjmp	.+3598   	; 0x3bf2 <Smart_Home+0xf7a>
	{

	//first room
	case '1':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    2de4:	fe 01       	movw	r30, r28
    2de6:	e5 56       	subi	r30, 0x65	; 101
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    2df0:	8c ea       	ldi	r24, 0xAC	; 172
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOn(DIO_PORTD, PIN2);
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	62 e0       	ldi	r22, 0x02	; 2
    2dfc:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLED_voidTurnOn>
		MUART_voidSendStringSyncNonBlocking("Light ROOM1 ON\r\n");
    2e00:	8f ea       	ldi	r24, 0xAF	; 175
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM1 ON");
    2e08:	80 ec       	ldi	r24, 0xC0	; 192
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    2e10:	fe 01       	movw	r30, r28
    2e12:	e9 56       	subi	r30, 0x69	; 105
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	aa ef       	ldi	r26, 0xFA	; 250
    2e1c:	b3 e4       	ldi	r27, 0x43	; 67
    2e1e:	80 83       	st	Z, r24
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	a2 83       	std	Z+2, r26	; 0x02
    2e24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e26:	8e 01       	movw	r16, r28
    2e28:	0d 56       	subi	r16, 0x6D	; 109
    2e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e9 56       	subi	r30, 0x69	; 105
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	4a ef       	ldi	r20, 0xFA	; 250
    2e40:	54 e4       	ldi	r21, 0x44	; 68
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e54:	fe 01       	movw	r30, r28
    2e56:	ed 56       	subi	r30, 0x6D	; 109
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e8       	ldi	r20, 0x80	; 128
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e6e:	88 23       	and	r24, r24
    2e70:	44 f4       	brge	.+16     	; 0x2e82 <Smart_Home+0x20a>
		__ticks = 1;
    2e72:	fe 01       	movw	r30, r28
    2e74:	ef 56       	subi	r30, 0x6F	; 111
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
    2e80:	64 c0       	rjmp	.+200    	; 0x2f4a <Smart_Home+0x2d2>
	else if (__tmp > 65535)
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 56       	subi	r30, 0x6D	; 109
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	0c f0       	brlt	.+2      	; 0x2ea2 <Smart_Home+0x22a>
    2ea0:	43 c0       	rjmp	.+134    	; 0x2f28 <Smart_Home+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e9 56       	subi	r30, 0x69	; 105
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e2       	ldi	r20, 0x20	; 32
    2eb6:	51 e4       	ldi	r21, 0x41	; 65
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	0f 56       	subi	r16, 0x6F	; 111
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	f8 01       	movw	r30, r16
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
    2ed8:	1f c0       	rjmp	.+62     	; 0x2f18 <Smart_Home+0x2a0>
    2eda:	fe 01       	movw	r30, r28
    2edc:	e1 57       	subi	r30, 0x71	; 113
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	88 ec       	ldi	r24, 0xC8	; 200
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e1 57       	subi	r30, 0x71	; 113
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <Smart_Home+0x27a>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e1 57       	subi	r30, 0x71	; 113
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	de 01       	movw	r26, r28
    2f02:	af 56       	subi	r26, 0x6F	; 111
    2f04:	bf 4f       	sbci	r27, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	ef 56       	subi	r30, 0x6F	; 111
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	11 96       	adiw	r26, 0x01	; 1
    2f14:	9c 93       	st	X, r25
    2f16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	fe 01       	movw	r30, r28
    2f1a:	ef 56       	subi	r30, 0x6F	; 111
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	91 81       	ldd	r25, Z+1	; 0x01
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	d1 f6       	brne	.-76     	; 0x2eda <Smart_Home+0x262>
    2f26:	27 c0       	rjmp	.+78     	; 0x2f76 <Smart_Home+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	8e 01       	movw	r16, r28
    2f2a:	0f 56       	subi	r16, 0x6F	; 111
    2f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ed 56       	subi	r30, 0x6D	; 109
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	f8 01       	movw	r30, r16
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	80 83       	st	Z, r24
    2f4a:	de 01       	movw	r26, r28
    2f4c:	a3 57       	subi	r26, 0x73	; 115
    2f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	ef 56       	subi	r30, 0x6F	; 111
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	8d 93       	st	X+, r24
    2f5c:	9c 93       	st	X, r25
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e3 57       	subi	r30, 0x73	; 115
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	f1 f7       	brne	.-4      	; 0x2f68 <Smart_Home+0x2f0>
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e3 57       	subi	r30, 0x73	; 115
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	80 83       	st	Z, r24
		_delay_ms(500);
		HLCD_voidClearDisplay();
    2f76:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    2f7a:	ce c6       	rjmp	.+3484   	; 0x3d18 <Smart_Home+0x10a0>
		break;

	case '2':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e5 56       	subi	r30, 0x65	; 101
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	80 81       	ld	r24, Z
    2f84:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    2f88:	8c ea       	ldi	r24, 0xAC	; 172
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOff(DIO_PORTD, PIN2);
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	62 e0       	ldi	r22, 0x02	; 2
    2f94:	0e 94 d7 15 	call	0x2bae	; 0x2bae <HLED_voidTurnOff>
		MUART_voidSendStringSyncNonBlocking("Light ROOM1 OFF\r\n");
    2f98:	8f ec       	ldi	r24, 0xCF	; 207
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM2 OFF");
    2fa0:	81 ee       	ldi	r24, 0xE1	; 225
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e7 57       	subi	r30, 0x77	; 119
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	aa ef       	ldi	r26, 0xFA	; 250
    2fb4:	b3 e4       	ldi	r27, 0x43	; 67
    2fb6:	80 83       	st	Z, r24
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	a2 83       	std	Z+2, r26	; 0x02
    2fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbe:	8e 01       	movw	r16, r28
    2fc0:	0b 57       	subi	r16, 0x7B	; 123
    2fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e7 57       	subi	r30, 0x77	; 119
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	4a ef       	ldi	r20, 0xFA	; 250
    2fd8:	54 e4       	ldi	r21, 0x44	; 68
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	80 83       	st	Z, r24
    2fe6:	91 83       	std	Z+1, r25	; 0x01
    2fe8:	a2 83       	std	Z+2, r26	; 0x02
    2fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fec:	fe 01       	movw	r30, r28
    2fee:	eb 57       	subi	r30, 0x7B	; 123
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e8       	ldi	r20, 0x80	; 128
    3000:	5f e3       	ldi	r21, 0x3F	; 63
    3002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3006:	88 23       	and	r24, r24
    3008:	44 f4       	brge	.+16     	; 0x301a <Smart_Home+0x3a2>
		__ticks = 1;
    300a:	fe 01       	movw	r30, r28
    300c:	ed 57       	subi	r30, 0x7D	; 125
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	80 83       	st	Z, r24
    3018:	64 c0       	rjmp	.+200    	; 0x30e2 <Smart_Home+0x46a>
	else if (__tmp > 65535)
    301a:	fe 01       	movw	r30, r28
    301c:	eb 57       	subi	r30, 0x7B	; 123
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	0c f0       	brlt	.+2      	; 0x303a <Smart_Home+0x3c2>
    3038:	43 c0       	rjmp	.+134    	; 0x30c0 <Smart_Home+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303a:	fe 01       	movw	r30, r28
    303c:	e7 57       	subi	r30, 0x77	; 119
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e2       	ldi	r20, 0x20	; 32
    304e:	51 e4       	ldi	r21, 0x41	; 65
    3050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	8e 01       	movw	r16, r28
    305a:	0d 57       	subi	r16, 0x7D	; 125
    305c:	1f 4f       	sbci	r17, 0xFF	; 255
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	f8 01       	movw	r30, r16
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	80 83       	st	Z, r24
    3070:	1f c0       	rjmp	.+62     	; 0x30b0 <Smart_Home+0x438>
    3072:	fe 01       	movw	r30, r28
    3074:	ef 57       	subi	r30, 0x7F	; 127
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	88 ec       	ldi	r24, 0xC8	; 200
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	fe 01       	movw	r30, r28
    3082:	ef 57       	subi	r30, 0x7F	; 127
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <Smart_Home+0x412>
    308e:	fe 01       	movw	r30, r28
    3090:	ef 57       	subi	r30, 0x7F	; 127
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	de 01       	movw	r26, r28
    309a:	ad 57       	subi	r26, 0x7D	; 125
    309c:	bf 4f       	sbci	r27, 0xFF	; 255
    309e:	fe 01       	movw	r30, r28
    30a0:	ed 57       	subi	r30, 0x7D	; 125
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	9c 93       	st	X, r25
    30ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 57       	subi	r30, 0x7D	; 125
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	d1 f6       	brne	.-76     	; 0x3072 <Smart_Home+0x3fa>
    30be:	27 c0       	rjmp	.+78     	; 0x310e <Smart_Home+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c0:	8e 01       	movw	r16, r28
    30c2:	0d 57       	subi	r16, 0x7D	; 125
    30c4:	1f 4f       	sbci	r17, 0xFF	; 255
    30c6:	fe 01       	movw	r30, r28
    30c8:	eb 57       	subi	r30, 0x7B	; 123
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	f8 01       	movw	r30, r16
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	de 01       	movw	r26, r28
    30e4:	a1 58       	subi	r26, 0x81	; 129
    30e6:	bf 4f       	sbci	r27, 0xFF	; 255
    30e8:	fe 01       	movw	r30, r28
    30ea:	ed 57       	subi	r30, 0x7D	; 125
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	8d 93       	st	X+, r24
    30f4:	9c 93       	st	X, r25
    30f6:	fe 01       	movw	r30, r28
    30f8:	e1 58       	subi	r30, 0x81	; 129
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <Smart_Home+0x488>
    3104:	fe 01       	movw	r30, r28
    3106:	e1 58       	subi	r30, 0x81	; 129
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
		_delay_ms(500);
		HLCD_voidClearDisplay();
    310e:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    3112:	02 c6       	rjmp	.+3076   	; 0x3d18 <Smart_Home+0x10a0>
		break;

		//second room
	case '3':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    3114:	fe 01       	movw	r30, r28
    3116:	e5 56       	subi	r30, 0x65	; 101
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    3120:	8c ea       	ldi	r24, 0xAC	; 172
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOn(DIO_PORTD, PIN3);
    3128:	83 e0       	ldi	r24, 0x03	; 3
    312a:	63 e0       	ldi	r22, 0x03	; 3
    312c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLED_voidTurnOn>
		MUART_voidSendStringSyncNonBlocking("Light ROOM2 ON\r\n");
    3130:	81 ef       	ldi	r24, 0xF1	; 241
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM2 ON");
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	91 e0       	ldi	r25, 0x01	; 1
    313c:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    3140:	fe 01       	movw	r30, r28
    3142:	e5 58       	subi	r30, 0x85	; 133
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	aa ef       	ldi	r26, 0xFA	; 250
    314c:	b3 e4       	ldi	r27, 0x43	; 67
    314e:	80 83       	st	Z, r24
    3150:	91 83       	std	Z+1, r25	; 0x01
    3152:	a2 83       	std	Z+2, r26	; 0x02
    3154:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3156:	8e 01       	movw	r16, r28
    3158:	09 58       	subi	r16, 0x89	; 137
    315a:	1f 4f       	sbci	r17, 0xFF	; 255
    315c:	fe 01       	movw	r30, r28
    315e:	e5 58       	subi	r30, 0x85	; 133
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	60 81       	ld	r22, Z
    3164:	71 81       	ldd	r23, Z+1	; 0x01
    3166:	82 81       	ldd	r24, Z+2	; 0x02
    3168:	93 81       	ldd	r25, Z+3	; 0x03
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4a ef       	ldi	r20, 0xFA	; 250
    3170:	54 e4       	ldi	r21, 0x44	; 68
    3172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	f8 01       	movw	r30, r16
    317c:	80 83       	st	Z, r24
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	a2 83       	std	Z+2, r26	; 0x02
    3182:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3184:	fe 01       	movw	r30, r28
    3186:	e9 58       	subi	r30, 0x89	; 137
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	93 81       	ldd	r25, Z+3	; 0x03
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e8       	ldi	r20, 0x80	; 128
    3198:	5f e3       	ldi	r21, 0x3F	; 63
    319a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319e:	88 23       	and	r24, r24
    31a0:	44 f4       	brge	.+16     	; 0x31b2 <Smart_Home+0x53a>
		__ticks = 1;
    31a2:	fe 01       	movw	r30, r28
    31a4:	eb 58       	subi	r30, 0x8B	; 139
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	80 83       	st	Z, r24
    31b0:	64 c0       	rjmp	.+200    	; 0x327a <Smart_Home+0x602>
	else if (__tmp > 65535)
    31b2:	fe 01       	movw	r30, r28
    31b4:	e9 58       	subi	r30, 0x89	; 137
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	3f ef       	ldi	r19, 0xFF	; 255
    31c4:	4f e7       	ldi	r20, 0x7F	; 127
    31c6:	57 e4       	ldi	r21, 0x47	; 71
    31c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31cc:	18 16       	cp	r1, r24
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <Smart_Home+0x55a>
    31d0:	43 c0       	rjmp	.+134    	; 0x3258 <Smart_Home+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	fe 01       	movw	r30, r28
    31d4:	e5 58       	subi	r30, 0x85	; 133
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e2       	ldi	r20, 0x20	; 32
    31e6:	51 e4       	ldi	r21, 0x41	; 65
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8e 01       	movw	r16, r28
    31f2:	0b 58       	subi	r16, 0x8B	; 139
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	f8 01       	movw	r30, r16
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
    3208:	1f c0       	rjmp	.+62     	; 0x3248 <Smart_Home+0x5d0>
    320a:	fe 01       	movw	r30, r28
    320c:	ed 58       	subi	r30, 0x8D	; 141
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	88 ec       	ldi	r24, 0xC8	; 200
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
    3218:	fe 01       	movw	r30, r28
    321a:	ed 58       	subi	r30, 0x8D	; 141
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 81       	ld	r24, Z
    3220:	91 81       	ldd	r25, Z+1	; 0x01
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <Smart_Home+0x5aa>
    3226:	fe 01       	movw	r30, r28
    3228:	ed 58       	subi	r30, 0x8D	; 141
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3230:	de 01       	movw	r26, r28
    3232:	ab 58       	subi	r26, 0x8B	; 139
    3234:	bf 4f       	sbci	r27, 0xFF	; 255
    3236:	fe 01       	movw	r30, r28
    3238:	eb 58       	subi	r30, 0x8B	; 139
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	11 96       	adiw	r26, 0x01	; 1
    3244:	9c 93       	st	X, r25
    3246:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3248:	fe 01       	movw	r30, r28
    324a:	eb 58       	subi	r30, 0x8B	; 139
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	80 81       	ld	r24, Z
    3250:	91 81       	ldd	r25, Z+1	; 0x01
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	d1 f6       	brne	.-76     	; 0x320a <Smart_Home+0x592>
    3256:	27 c0       	rjmp	.+78     	; 0x32a6 <Smart_Home+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	8e 01       	movw	r16, r28
    325a:	0b 58       	subi	r16, 0x8B	; 139
    325c:	1f 4f       	sbci	r17, 0xFF	; 255
    325e:	fe 01       	movw	r30, r28
    3260:	e9 58       	subi	r30, 0x89	; 137
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	f8 01       	movw	r30, r16
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
    327a:	de 01       	movw	r26, r28
    327c:	af 58       	subi	r26, 0x8F	; 143
    327e:	bf 4f       	sbci	r27, 0xFF	; 255
    3280:	fe 01       	movw	r30, r28
    3282:	eb 58       	subi	r30, 0x8B	; 139
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	8d 93       	st	X+, r24
    328c:	9c 93       	st	X, r25
    328e:	fe 01       	movw	r30, r28
    3290:	ef 58       	subi	r30, 0x8F	; 143
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <Smart_Home+0x620>
    329c:	fe 01       	movw	r30, r28
    329e:	ef 58       	subi	r30, 0x8F	; 143
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	80 83       	st	Z, r24
		_delay_ms(500);
		HLCD_voidClearDisplay();
    32a6:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    32aa:	36 c5       	rjmp	.+2668   	; 0x3d18 <Smart_Home+0x10a0>
		break;

	case '4':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    32ac:	fe 01       	movw	r30, r28
    32ae:	e5 56       	subi	r30, 0x65	; 101
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    32b8:	8c ea       	ldi	r24, 0xAC	; 172
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOff(DIO_PORTD, PIN3);
    32c0:	83 e0       	ldi	r24, 0x03	; 3
    32c2:	63 e0       	ldi	r22, 0x03	; 3
    32c4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <HLED_voidTurnOff>
		MUART_voidSendStringSyncNonBlocking("Light ROOM2 OFF\r\n");
    32c8:	81 e1       	ldi	r24, 0x11	; 17
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM2 OFF");
    32d0:	81 ee       	ldi	r24, 0xE1	; 225
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    32d8:	fe 01       	movw	r30, r28
    32da:	e3 59       	subi	r30, 0x93	; 147
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	aa ef       	ldi	r26, 0xFA	; 250
    32e4:	b3 e4       	ldi	r27, 0x43	; 67
    32e6:	80 83       	st	Z, r24
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	a2 83       	std	Z+2, r26	; 0x02
    32ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ee:	8e 01       	movw	r16, r28
    32f0:	07 59       	subi	r16, 0x97	; 151
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	fe 01       	movw	r30, r28
    32f6:	e3 59       	subi	r30, 0x93	; 147
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	f8 01       	movw	r30, r16
    3314:	80 83       	st	Z, r24
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	a2 83       	std	Z+2, r26	; 0x02
    331a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    331c:	fe 01       	movw	r30, r28
    331e:	e7 59       	subi	r30, 0x97	; 151
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e8       	ldi	r20, 0x80	; 128
    3330:	5f e3       	ldi	r21, 0x3F	; 63
    3332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3336:	88 23       	and	r24, r24
    3338:	44 f4       	brge	.+16     	; 0x334a <Smart_Home+0x6d2>
		__ticks = 1;
    333a:	fe 01       	movw	r30, r28
    333c:	e9 59       	subi	r30, 0x99	; 153
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
    3348:	64 c0       	rjmp	.+200    	; 0x3412 <Smart_Home+0x79a>
	else if (__tmp > 65535)
    334a:	fe 01       	movw	r30, r28
    334c:	e7 59       	subi	r30, 0x97	; 151
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	0c f0       	brlt	.+2      	; 0x336a <Smart_Home+0x6f2>
    3368:	43 c0       	rjmp	.+134    	; 0x33f0 <Smart_Home+0x778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	fe 01       	movw	r30, r28
    336c:	e3 59       	subi	r30, 0x93	; 147
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	8e 01       	movw	r16, r28
    338a:	09 59       	subi	r16, 0x99	; 153
    338c:	1f 4f       	sbci	r17, 0xFF	; 255
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
    33a0:	1f c0       	rjmp	.+62     	; 0x33e0 <Smart_Home+0x768>
    33a2:	fe 01       	movw	r30, r28
    33a4:	eb 59       	subi	r30, 0x9B	; 155
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	88 ec       	ldi	r24, 0xC8	; 200
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
    33b0:	fe 01       	movw	r30, r28
    33b2:	eb 59       	subi	r30, 0x9B	; 155
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 81       	ld	r24, Z
    33b8:	91 81       	ldd	r25, Z+1	; 0x01
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <Smart_Home+0x742>
    33be:	fe 01       	movw	r30, r28
    33c0:	eb 59       	subi	r30, 0x9B	; 155
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	de 01       	movw	r26, r28
    33ca:	a9 59       	subi	r26, 0x99	; 153
    33cc:	bf 4f       	sbci	r27, 0xFF	; 255
    33ce:	fe 01       	movw	r30, r28
    33d0:	e9 59       	subi	r30, 0x99	; 153
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	80 81       	ld	r24, Z
    33d6:	91 81       	ldd	r25, Z+1	; 0x01
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	11 96       	adiw	r26, 0x01	; 1
    33dc:	9c 93       	st	X, r25
    33de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	fe 01       	movw	r30, r28
    33e2:	e9 59       	subi	r30, 0x99	; 153
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	d1 f6       	brne	.-76     	; 0x33a2 <Smart_Home+0x72a>
    33ee:	27 c0       	rjmp	.+78     	; 0x343e <Smart_Home+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	8e 01       	movw	r16, r28
    33f2:	09 59       	subi	r16, 0x99	; 153
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	fe 01       	movw	r30, r28
    33f8:	e7 59       	subi	r30, 0x97	; 151
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	f8 01       	movw	r30, r16
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    3412:	de 01       	movw	r26, r28
    3414:	ad 59       	subi	r26, 0x9D	; 157
    3416:	bf 4f       	sbci	r27, 0xFF	; 255
    3418:	fe 01       	movw	r30, r28
    341a:	e9 59       	subi	r30, 0x99	; 153
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	8d 93       	st	X+, r24
    3424:	9c 93       	st	X, r25
    3426:	fe 01       	movw	r30, r28
    3428:	ed 59       	subi	r30, 0x9D	; 157
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <Smart_Home+0x7b8>
    3434:	fe 01       	movw	r30, r28
    3436:	ed 59       	subi	r30, 0x9D	; 157
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
		_delay_ms(500);
		HLCD_voidClearDisplay();
    343e:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    3442:	6a c4       	rjmp	.+2260   	; 0x3d18 <Smart_Home+0x10a0>
		break;

		//third room
	case '5':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    3444:	fe 01       	movw	r30, r28
    3446:	e5 56       	subi	r30, 0x65	; 101
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    3450:	8c ea       	ldi	r24, 0xAC	; 172
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOn(DIO_PORTD, PIN4);
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	64 e0       	ldi	r22, 0x04	; 4
    345c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLED_voidTurnOn>
		MUART_voidSendStringSyncNonBlocking("Light ROOM3 ON\r\n");
    3460:	83 e2       	ldi	r24, 0x23	; 35
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM3 ON");
    3468:	84 e3       	ldi	r24, 0x34	; 52
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    3470:	fe 01       	movw	r30, r28
    3472:	e1 5a       	subi	r30, 0xA1	; 161
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	aa ef       	ldi	r26, 0xFA	; 250
    347c:	b3 e4       	ldi	r27, 0x43	; 67
    347e:	80 83       	st	Z, r24
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	a2 83       	std	Z+2, r26	; 0x02
    3484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	8e 01       	movw	r16, r28
    3488:	05 5a       	subi	r16, 0xA5	; 165
    348a:	1f 4f       	sbci	r17, 0xFF	; 255
    348c:	fe 01       	movw	r30, r28
    348e:	e1 5a       	subi	r30, 0xA1	; 161
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	4a ef       	ldi	r20, 0xFA	; 250
    34a0:	54 e4       	ldi	r21, 0x44	; 68
    34a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	f8 01       	movw	r30, r16
    34ac:	80 83       	st	Z, r24
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	a2 83       	std	Z+2, r26	; 0x02
    34b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34b4:	fe 01       	movw	r30, r28
    34b6:	e5 5a       	subi	r30, 0xA5	; 165
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e8       	ldi	r20, 0x80	; 128
    34c8:	5f e3       	ldi	r21, 0x3F	; 63
    34ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	44 f4       	brge	.+16     	; 0x34e2 <Smart_Home+0x86a>
		__ticks = 1;
    34d2:	fe 01       	movw	r30, r28
    34d4:	e7 5a       	subi	r30, 0xA7	; 167
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	91 83       	std	Z+1, r25	; 0x01
    34de:	80 83       	st	Z, r24
    34e0:	64 c0       	rjmp	.+200    	; 0x35aa <Smart_Home+0x932>
	else if (__tmp > 65535)
    34e2:	fe 01       	movw	r30, r28
    34e4:	e5 5a       	subi	r30, 0xA5	; 165
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	3f ef       	ldi	r19, 0xFF	; 255
    34f4:	4f e7       	ldi	r20, 0x7F	; 127
    34f6:	57 e4       	ldi	r21, 0x47	; 71
    34f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fc:	18 16       	cp	r1, r24
    34fe:	0c f0       	brlt	.+2      	; 0x3502 <Smart_Home+0x88a>
    3500:	43 c0       	rjmp	.+134    	; 0x3588 <Smart_Home+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	fe 01       	movw	r30, r28
    3504:	e1 5a       	subi	r30, 0xA1	; 161
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e2       	ldi	r20, 0x20	; 32
    3516:	51 e4       	ldi	r21, 0x41	; 65
    3518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	8e 01       	movw	r16, r28
    3522:	07 5a       	subi	r16, 0xA7	; 167
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	bc 01       	movw	r22, r24
    3528:	cd 01       	movw	r24, r26
    352a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	f8 01       	movw	r30, r16
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	80 83       	st	Z, r24
    3538:	1f c0       	rjmp	.+62     	; 0x3578 <Smart_Home+0x900>
    353a:	fe 01       	movw	r30, r28
    353c:	e9 5a       	subi	r30, 0xA9	; 169
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	88 ec       	ldi	r24, 0xC8	; 200
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	fe 01       	movw	r30, r28
    354a:	e9 5a       	subi	r30, 0xA9	; 169
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	91 81       	ldd	r25, Z+1	; 0x01
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <Smart_Home+0x8da>
    3556:	fe 01       	movw	r30, r28
    3558:	e9 5a       	subi	r30, 0xA9	; 169
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3560:	de 01       	movw	r26, r28
    3562:	a7 5a       	subi	r26, 0xA7	; 167
    3564:	bf 4f       	sbci	r27, 0xFF	; 255
    3566:	fe 01       	movw	r30, r28
    3568:	e7 5a       	subi	r30, 0xA7	; 167
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	9c 93       	st	X, r25
    3576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3578:	fe 01       	movw	r30, r28
    357a:	e7 5a       	subi	r30, 0xA7	; 167
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	d1 f6       	brne	.-76     	; 0x353a <Smart_Home+0x8c2>
    3586:	27 c0       	rjmp	.+78     	; 0x35d6 <Smart_Home+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	8e 01       	movw	r16, r28
    358a:	07 5a       	subi	r16, 0xA7	; 167
    358c:	1f 4f       	sbci	r17, 0xFF	; 255
    358e:	fe 01       	movw	r30, r28
    3590:	e5 5a       	subi	r30, 0xA5	; 165
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	60 81       	ld	r22, Z
    3596:	71 81       	ldd	r23, Z+1	; 0x01
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	f8 01       	movw	r30, r16
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	de 01       	movw	r26, r28
    35ac:	ab 5a       	subi	r26, 0xAB	; 171
    35ae:	bf 4f       	sbci	r27, 0xFF	; 255
    35b0:	fe 01       	movw	r30, r28
    35b2:	e7 5a       	subi	r30, 0xA7	; 167
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	8d 93       	st	X+, r24
    35bc:	9c 93       	st	X, r25
    35be:	fe 01       	movw	r30, r28
    35c0:	eb 5a       	subi	r30, 0xAB	; 171
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <Smart_Home+0x950>
    35cc:	fe 01       	movw	r30, r28
    35ce:	eb 5a       	subi	r30, 0xAB	; 171
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	80 83       	st	Z, r24
		_delay_ms(500);
		HLCD_voidClearDisplay();
    35d6:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    35da:	9e c3       	rjmp	.+1852   	; 0x3d18 <Smart_Home+0x10a0>
		break;
	case '6':


		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    35dc:	fe 01       	movw	r30, r28
    35de:	e5 56       	subi	r30, 0x65	; 101
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 81       	ld	r24, Z
    35e4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    35e8:	8c ea       	ldi	r24, 0xAC	; 172
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOff(DIO_PORTD, PIN4);
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	64 e0       	ldi	r22, 0x04	; 4
    35f4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <HLED_voidTurnOff>
		MUART_voidSendStringSyncNonBlocking("Light ROOM3 OFF\r\n");
    35f8:	83 e4       	ldi	r24, 0x43	; 67
    35fa:	91 e0       	ldi	r25, 0x01	; 1
    35fc:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM3 OFF");
    3600:	85 e5       	ldi	r24, 0x55	; 85
    3602:	91 e0       	ldi	r25, 0x01	; 1
    3604:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    3608:	fe 01       	movw	r30, r28
    360a:	ef 5a       	subi	r30, 0xAF	; 175
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	aa ef       	ldi	r26, 0xFA	; 250
    3614:	b3 e4       	ldi	r27, 0x43	; 67
    3616:	80 83       	st	Z, r24
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	a2 83       	std	Z+2, r26	; 0x02
    361c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361e:	8e 01       	movw	r16, r28
    3620:	03 5b       	subi	r16, 0xB3	; 179
    3622:	1f 4f       	sbci	r17, 0xFF	; 255
    3624:	fe 01       	movw	r30, r28
    3626:	ef 5a       	subi	r30, 0xAF	; 175
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a ef       	ldi	r20, 0xFA	; 250
    3638:	54 e4       	ldi	r21, 0x44	; 68
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	f8 01       	movw	r30, r16
    3644:	80 83       	st	Z, r24
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	a2 83       	std	Z+2, r26	; 0x02
    364a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    364c:	fe 01       	movw	r30, r28
    364e:	e3 5b       	subi	r30, 0xB3	; 179
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	40 e8       	ldi	r20, 0x80	; 128
    3660:	5f e3       	ldi	r21, 0x3F	; 63
    3662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3666:	88 23       	and	r24, r24
    3668:	44 f4       	brge	.+16     	; 0x367a <Smart_Home+0xa02>
		__ticks = 1;
    366a:	fe 01       	movw	r30, r28
    366c:	e5 5b       	subi	r30, 0xB5	; 181
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
    3678:	64 c0       	rjmp	.+200    	; 0x3742 <Smart_Home+0xaca>
	else if (__tmp > 65535)
    367a:	fe 01       	movw	r30, r28
    367c:	e3 5b       	subi	r30, 0xB3	; 179
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	4f e7       	ldi	r20, 0x7F	; 127
    368e:	57 e4       	ldi	r21, 0x47	; 71
    3690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3694:	18 16       	cp	r1, r24
    3696:	0c f0       	brlt	.+2      	; 0x369a <Smart_Home+0xa22>
    3698:	43 c0       	rjmp	.+134    	; 0x3720 <Smart_Home+0xaa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369a:	fe 01       	movw	r30, r28
    369c:	ef 5a       	subi	r30, 0xAF	; 175
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	51 e4       	ldi	r21, 0x41	; 65
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	8e 01       	movw	r16, r28
    36ba:	05 5b       	subi	r16, 0xB5	; 181
    36bc:	1f 4f       	sbci	r17, 0xFF	; 255
    36be:	bc 01       	movw	r22, r24
    36c0:	cd 01       	movw	r24, r26
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	f8 01       	movw	r30, r16
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	1f c0       	rjmp	.+62     	; 0x3710 <Smart_Home+0xa98>
    36d2:	fe 01       	movw	r30, r28
    36d4:	e7 5b       	subi	r30, 0xB7	; 183
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	88 ec       	ldi	r24, 0xC8	; 200
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	80 83       	st	Z, r24
    36e0:	fe 01       	movw	r30, r28
    36e2:	e7 5b       	subi	r30, 0xB7	; 183
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	01 97       	sbiw	r24, 0x01	; 1
    36ec:	f1 f7       	brne	.-4      	; 0x36ea <Smart_Home+0xa72>
    36ee:	fe 01       	movw	r30, r28
    36f0:	e7 5b       	subi	r30, 0xB7	; 183
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	de 01       	movw	r26, r28
    36fa:	a5 5b       	subi	r26, 0xB5	; 181
    36fc:	bf 4f       	sbci	r27, 0xFF	; 255
    36fe:	fe 01       	movw	r30, r28
    3700:	e5 5b       	subi	r30, 0xB5	; 181
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 81       	ld	r24, Z
    3706:	91 81       	ldd	r25, Z+1	; 0x01
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	11 96       	adiw	r26, 0x01	; 1
    370c:	9c 93       	st	X, r25
    370e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3710:	fe 01       	movw	r30, r28
    3712:	e5 5b       	subi	r30, 0xB5	; 181
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	d1 f6       	brne	.-76     	; 0x36d2 <Smart_Home+0xa5a>
    371e:	27 c0       	rjmp	.+78     	; 0x376e <Smart_Home+0xaf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3720:	8e 01       	movw	r16, r28
    3722:	05 5b       	subi	r16, 0xB5	; 181
    3724:	1f 4f       	sbci	r17, 0xFF	; 255
    3726:	fe 01       	movw	r30, r28
    3728:	e3 5b       	subi	r30, 0xB3	; 179
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	f8 01       	movw	r30, r16
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
    3742:	de 01       	movw	r26, r28
    3744:	a9 5b       	subi	r26, 0xB9	; 185
    3746:	bf 4f       	sbci	r27, 0xFF	; 255
    3748:	fe 01       	movw	r30, r28
    374a:	e5 5b       	subi	r30, 0xB5	; 181
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	8d 93       	st	X+, r24
    3754:	9c 93       	st	X, r25
    3756:	fe 01       	movw	r30, r28
    3758:	e9 5b       	subi	r30, 0xB9	; 185
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <Smart_Home+0xae8>
    3764:	fe 01       	movw	r30, r28
    3766:	e9 5b       	subi	r30, 0xB9	; 185
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	91 83       	std	Z+1, r25	; 0x01
    376c:	80 83       	st	Z, r24
		_delay_ms(500);
		HLCD_voidClearDisplay();
    376e:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    3772:	d2 c2       	rjmp	.+1444   	; 0x3d18 <Smart_Home+0x10a0>
		break;

		//fourth room
	case '7':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    3774:	fe 01       	movw	r30, r28
    3776:	e5 56       	subi	r30, 0x65	; 101
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 81       	ld	r24, Z
    377c:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    3780:	8c ea       	ldi	r24, 0xAC	; 172
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOn(DIO_PORTD, PIN6);
    3788:	83 e0       	ldi	r24, 0x03	; 3
    378a:	66 e0       	ldi	r22, 0x06	; 6
    378c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLED_voidTurnOn>
		MUART_voidSendStringSyncNonBlocking("Light ROOM4 ON\r\n");
    3790:	85 e6       	ldi	r24, 0x65	; 101
    3792:	91 e0       	ldi	r25, 0x01	; 1
    3794:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM4 ON");
    3798:	86 e7       	ldi	r24, 0x76	; 118
    379a:	91 e0       	ldi	r25, 0x01	; 1
    379c:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    37a0:	fe 01       	movw	r30, r28
    37a2:	ed 5b       	subi	r30, 0xBD	; 189
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	aa ef       	ldi	r26, 0xFA	; 250
    37ac:	b3 e4       	ldi	r27, 0x43	; 67
    37ae:	80 83       	st	Z, r24
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	a2 83       	std	Z+2, r26	; 0x02
    37b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b6:	8e 01       	movw	r16, r28
    37b8:	01 5c       	subi	r16, 0xC1	; 193
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	fe 01       	movw	r30, r28
    37be:	ed 5b       	subi	r30, 0xBD	; 189
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a ef       	ldi	r20, 0xFA	; 250
    37d0:	54 e4       	ldi	r21, 0x44	; 68
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	f8 01       	movw	r30, r16
    37dc:	80 83       	st	Z, r24
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	a2 83       	std	Z+2, r26	; 0x02
    37e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37e4:	fe 01       	movw	r30, r28
    37e6:	ff 96       	adiw	r30, 0x3f	; 63
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e8       	ldi	r20, 0x80	; 128
    37f6:	5f e3       	ldi	r21, 0x3F	; 63
    37f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37fc:	88 23       	and	r24, r24
    37fe:	2c f4       	brge	.+10     	; 0x380a <Smart_Home+0xb92>
		__ticks = 1;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9e af       	std	Y+62, r25	; 0x3e
    3806:	8d af       	std	Y+61, r24	; 0x3d
    3808:	46 c0       	rjmp	.+140    	; 0x3896 <Smart_Home+0xc1e>
	else if (__tmp > 65535)
    380a:	fe 01       	movw	r30, r28
    380c:	ff 96       	adiw	r30, 0x3f	; 63
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	3f ef       	ldi	r19, 0xFF	; 255
    381a:	4f e7       	ldi	r20, 0x7F	; 127
    381c:	57 e4       	ldi	r21, 0x47	; 71
    381e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3822:	18 16       	cp	r1, r24
    3824:	64 f5       	brge	.+88     	; 0x387e <Smart_Home+0xc06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3826:	fe 01       	movw	r30, r28
    3828:	ed 5b       	subi	r30, 0xBD	; 189
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	60 81       	ld	r22, Z
    382e:	71 81       	ldd	r23, Z+1	; 0x01
    3830:	82 81       	ldd	r24, Z+2	; 0x02
    3832:	93 81       	ldd	r25, Z+3	; 0x03
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e2       	ldi	r20, 0x20	; 32
    383a:	51 e4       	ldi	r21, 0x41	; 65
    383c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	9e af       	std	Y+62, r25	; 0x3e
    3852:	8d af       	std	Y+61, r24	; 0x3d
    3854:	0f c0       	rjmp	.+30     	; 0x3874 <Smart_Home+0xbfc>
    3856:	88 ec       	ldi	r24, 0xC8	; 200
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	9c af       	std	Y+60, r25	; 0x3c
    385c:	8b af       	std	Y+59, r24	; 0x3b
    385e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3860:	9c ad       	ldd	r25, Y+60	; 0x3c
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <Smart_Home+0xbea>
    3866:	9c af       	std	Y+60, r25	; 0x3c
    3868:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386a:	8d ad       	ldd	r24, Y+61	; 0x3d
    386c:	9e ad       	ldd	r25, Y+62	; 0x3e
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	9e af       	std	Y+62, r25	; 0x3e
    3872:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3874:	8d ad       	ldd	r24, Y+61	; 0x3d
    3876:	9e ad       	ldd	r25, Y+62	; 0x3e
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	69 f7       	brne	.-38     	; 0x3856 <Smart_Home+0xbde>
    387c:	16 c0       	rjmp	.+44     	; 0x38aa <Smart_Home+0xc32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387e:	fe 01       	movw	r30, r28
    3880:	ff 96       	adiw	r30, 0x3f	; 63
    3882:	60 81       	ld	r22, Z
    3884:	71 81       	ldd	r23, Z+1	; 0x01
    3886:	82 81       	ldd	r24, Z+2	; 0x02
    3888:	93 81       	ldd	r25, Z+3	; 0x03
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e af       	std	Y+62, r25	; 0x3e
    3894:	8d af       	std	Y+61, r24	; 0x3d
    3896:	8d ad       	ldd	r24, Y+61	; 0x3d
    3898:	9e ad       	ldd	r25, Y+62	; 0x3e
    389a:	9a af       	std	Y+58, r25	; 0x3a
    389c:	89 af       	std	Y+57, r24	; 0x39
    389e:	89 ad       	ldd	r24, Y+57	; 0x39
    38a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <Smart_Home+0xc2a>
    38a6:	9a af       	std	Y+58, r25	; 0x3a
    38a8:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);
		HLCD_voidClearDisplay();
    38aa:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    38ae:	34 c2       	rjmp	.+1128   	; 0x3d18 <Smart_Home+0x10a0>
		break;

	case '8':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    38b0:	fe 01       	movw	r30, r28
    38b2:	e5 56       	subi	r30, 0x65	; 101
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    38bc:	8c ea       	ldi	r24, 0xAC	; 172
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLED_voidTurnOff(DIO_PORTD, PIN6);
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	66 e0       	ldi	r22, 0x06	; 6
    38c8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <HLED_voidTurnOff>
		MUART_voidSendStringSyncNonBlocking("Light ROOM4 OFF\r\n");
    38cc:	85 e8       	ldi	r24, 0x85	; 133
    38ce:	91 e0       	ldi	r25, 0x01	; 1
    38d0:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Light ROOM4 OFF");
    38d4:	87 e9       	ldi	r24, 0x97	; 151
    38d6:	91 e0       	ldi	r25, 0x01	; 1
    38d8:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	aa ef       	ldi	r26, 0xFA	; 250
    38e2:	b3 e4       	ldi	r27, 0x43	; 67
    38e4:	8d ab       	std	Y+53, r24	; 0x35
    38e6:	9e ab       	std	Y+54, r25	; 0x36
    38e8:	af ab       	std	Y+55, r26	; 0x37
    38ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ec:	6d a9       	ldd	r22, Y+53	; 0x35
    38ee:	7e a9       	ldd	r23, Y+54	; 0x36
    38f0:	8f a9       	ldd	r24, Y+55	; 0x37
    38f2:	98 ad       	ldd	r25, Y+56	; 0x38
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	4a ef       	ldi	r20, 0xFA	; 250
    38fa:	54 e4       	ldi	r21, 0x44	; 68
    38fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	89 ab       	std	Y+49, r24	; 0x31
    3906:	9a ab       	std	Y+50, r25	; 0x32
    3908:	ab ab       	std	Y+51, r26	; 0x33
    390a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    390c:	69 a9       	ldd	r22, Y+49	; 0x31
    390e:	7a a9       	ldd	r23, Y+50	; 0x32
    3910:	8b a9       	ldd	r24, Y+51	; 0x33
    3912:	9c a9       	ldd	r25, Y+52	; 0x34
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e8       	ldi	r20, 0x80	; 128
    391a:	5f e3       	ldi	r21, 0x3F	; 63
    391c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3920:	88 23       	and	r24, r24
    3922:	2c f4       	brge	.+10     	; 0x392e <Smart_Home+0xcb6>
		__ticks = 1;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	98 ab       	std	Y+48, r25	; 0x30
    392a:	8f a7       	std	Y+47, r24	; 0x2f
    392c:	3f c0       	rjmp	.+126    	; 0x39ac <Smart_Home+0xd34>
	else if (__tmp > 65535)
    392e:	69 a9       	ldd	r22, Y+49	; 0x31
    3930:	7a a9       	ldd	r23, Y+50	; 0x32
    3932:	8b a9       	ldd	r24, Y+51	; 0x33
    3934:	9c a9       	ldd	r25, Y+52	; 0x34
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	3f ef       	ldi	r19, 0xFF	; 255
    393a:	4f e7       	ldi	r20, 0x7F	; 127
    393c:	57 e4       	ldi	r21, 0x47	; 71
    393e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3942:	18 16       	cp	r1, r24
    3944:	4c f5       	brge	.+82     	; 0x3998 <Smart_Home+0xd20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3946:	6d a9       	ldd	r22, Y+53	; 0x35
    3948:	7e a9       	ldd	r23, Y+54	; 0x36
    394a:	8f a9       	ldd	r24, Y+55	; 0x37
    394c:	98 ad       	ldd	r25, Y+56	; 0x38
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	40 e2       	ldi	r20, 0x20	; 32
    3954:	51 e4       	ldi	r21, 0x41	; 65
    3956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	bc 01       	movw	r22, r24
    3960:	cd 01       	movw	r24, r26
    3962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	98 ab       	std	Y+48, r25	; 0x30
    396c:	8f a7       	std	Y+47, r24	; 0x2f
    396e:	0f c0       	rjmp	.+30     	; 0x398e <Smart_Home+0xd16>
    3970:	88 ec       	ldi	r24, 0xC8	; 200
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	9e a7       	std	Y+46, r25	; 0x2e
    3976:	8d a7       	std	Y+45, r24	; 0x2d
    3978:	8d a5       	ldd	r24, Y+45	; 0x2d
    397a:	9e a5       	ldd	r25, Y+46	; 0x2e
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <Smart_Home+0xd04>
    3980:	9e a7       	std	Y+46, r25	; 0x2e
    3982:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3984:	8f a5       	ldd	r24, Y+47	; 0x2f
    3986:	98 a9       	ldd	r25, Y+48	; 0x30
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	98 ab       	std	Y+48, r25	; 0x30
    398c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3990:	98 a9       	ldd	r25, Y+48	; 0x30
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	69 f7       	brne	.-38     	; 0x3970 <Smart_Home+0xcf8>
    3996:	14 c0       	rjmp	.+40     	; 0x39c0 <Smart_Home+0xd48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3998:	69 a9       	ldd	r22, Y+49	; 0x31
    399a:	7a a9       	ldd	r23, Y+50	; 0x32
    399c:	8b a9       	ldd	r24, Y+51	; 0x33
    399e:	9c a9       	ldd	r25, Y+52	; 0x34
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	98 ab       	std	Y+48, r25	; 0x30
    39aa:	8f a7       	std	Y+47, r24	; 0x2f
    39ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    39ae:	98 a9       	ldd	r25, Y+48	; 0x30
    39b0:	9c a7       	std	Y+44, r25	; 0x2c
    39b2:	8b a7       	std	Y+43, r24	; 0x2b
    39b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    39b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <Smart_Home+0xd40>
    39bc:	9c a7       	std	Y+44, r25	; 0x2c
    39be:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		HLCD_voidClearDisplay();
    39c0:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    39c4:	a9 c1       	rjmp	.+850    	; 0x3d18 <Smart_Home+0x10a0>

		//the door
	case 'o':
	case 'O':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    39c6:	fe 01       	movw	r30, r28
    39c8:	e5 56       	subi	r30, 0x65	; 101
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	80 81       	ld	r24, Z
    39ce:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    39d2:	8c ea       	ldi	r24, 0xAC	; 172
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		MTIMER1_voidSetOCR1AValue(1000);
    39da:	88 ee       	ldi	r24, 0xE8	; 232
    39dc:	93 e0       	ldi	r25, 0x03	; 3
    39de:	0e 94 02 21 	call	0x4204	; 0x4204 <MTIMER1_voidSetOCR1AValue>
		MUART_voidSendStringSyncNonBlocking("Door Is Opened\r\n");
    39e2:	87 ea       	ldi	r24, 0xA7	; 167
    39e4:	91 e0       	ldi	r25, 0x01	; 1
    39e6:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Door Is Opened");
    39ea:	88 eb       	ldi	r24, 0xB8	; 184
    39ec:	91 e0       	ldi	r25, 0x01	; 1
    39ee:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	aa ef       	ldi	r26, 0xFA	; 250
    39f8:	b3 e4       	ldi	r27, 0x43	; 67
    39fa:	8f a3       	std	Y+39, r24	; 0x27
    39fc:	98 a7       	std	Y+40, r25	; 0x28
    39fe:	a9 a7       	std	Y+41, r26	; 0x29
    3a00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a02:	6f a1       	ldd	r22, Y+39	; 0x27
    3a04:	78 a5       	ldd	r23, Y+40	; 0x28
    3a06:	89 a5       	ldd	r24, Y+41	; 0x29
    3a08:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	4a ef       	ldi	r20, 0xFA	; 250
    3a10:	54 e4       	ldi	r21, 0x44	; 68
    3a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	8b a3       	std	Y+35, r24	; 0x23
    3a1c:	9c a3       	std	Y+36, r25	; 0x24
    3a1e:	ad a3       	std	Y+37, r26	; 0x25
    3a20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a22:	6b a1       	ldd	r22, Y+35	; 0x23
    3a24:	7c a1       	ldd	r23, Y+36	; 0x24
    3a26:	8d a1       	ldd	r24, Y+37	; 0x25
    3a28:	9e a1       	ldd	r25, Y+38	; 0x26
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e8       	ldi	r20, 0x80	; 128
    3a30:	5f e3       	ldi	r21, 0x3F	; 63
    3a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a36:	88 23       	and	r24, r24
    3a38:	2c f4       	brge	.+10     	; 0x3a44 <Smart_Home+0xdcc>
		__ticks = 1;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	9a a3       	std	Y+34, r25	; 0x22
    3a40:	89 a3       	std	Y+33, r24	; 0x21
    3a42:	3f c0       	rjmp	.+126    	; 0x3ac2 <Smart_Home+0xe4a>
	else if (__tmp > 65535)
    3a44:	6b a1       	ldd	r22, Y+35	; 0x23
    3a46:	7c a1       	ldd	r23, Y+36	; 0x24
    3a48:	8d a1       	ldd	r24, Y+37	; 0x25
    3a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	3f ef       	ldi	r19, 0xFF	; 255
    3a50:	4f e7       	ldi	r20, 0x7F	; 127
    3a52:	57 e4       	ldi	r21, 0x47	; 71
    3a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a58:	18 16       	cp	r1, r24
    3a5a:	4c f5       	brge	.+82     	; 0x3aae <Smart_Home+0xe36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a5e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a60:	89 a5       	ldd	r24, Y+41	; 0x29
    3a62:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e2       	ldi	r20, 0x20	; 32
    3a6a:	51 e4       	ldi	r21, 0x41	; 65
    3a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	bc 01       	movw	r22, r24
    3a76:	cd 01       	movw	r24, r26
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9a a3       	std	Y+34, r25	; 0x22
    3a82:	89 a3       	std	Y+33, r24	; 0x21
    3a84:	0f c0       	rjmp	.+30     	; 0x3aa4 <Smart_Home+0xe2c>
    3a86:	88 ec       	ldi	r24, 0xC8	; 200
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	98 a3       	std	Y+32, r25	; 0x20
    3a8c:	8f 8f       	std	Y+31, r24	; 0x1f
    3a8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a90:	98 a1       	ldd	r25, Y+32	; 0x20
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <Smart_Home+0xe1a>
    3a96:	98 a3       	std	Y+32, r25	; 0x20
    3a98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	9a a3       	std	Y+34, r25	; 0x22
    3aa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa4:	89 a1       	ldd	r24, Y+33	; 0x21
    3aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	69 f7       	brne	.-38     	; 0x3a86 <Smart_Home+0xe0e>
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <Smart_Home+0xe5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aae:	6b a1       	ldd	r22, Y+35	; 0x23
    3ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	9a a3       	std	Y+34, r25	; 0x22
    3ac0:	89 a3       	std	Y+33, r24	; 0x21
    3ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ac8:	8d 8f       	std	Y+29, r24	; 0x1d
    3aca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3acc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <Smart_Home+0xe56>
    3ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ad4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		HLCD_voidClearDisplay();
    3ad6:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    3ada:	1e c1       	rjmp	.+572    	; 0x3d18 <Smart_Home+0x10a0>
		break;

	case 'c':
	case 'C':

		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    3adc:	fe 01       	movw	r30, r28
    3ade:	e5 56       	subi	r30, 0x65	; 101
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 81       	ld	r24, Z
    3ae4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    3ae8:	8c ea       	ldi	r24, 0xAC	; 172
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		MTIMER1_voidSetOCR1AValue(2000);
    3af0:	80 ed       	ldi	r24, 0xD0	; 208
    3af2:	97 e0       	ldi	r25, 0x07	; 7
    3af4:	0e 94 02 21 	call	0x4204	; 0x4204 <MTIMER1_voidSetOCR1AValue>
		MUART_voidSendStringSyncNonBlocking("Door Is Cloosed\r\n");
    3af8:	87 ec       	ldi	r24, 0xC7	; 199
    3afa:	91 e0       	ldi	r25, 0x01	; 1
    3afc:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Door Is Cloosed");
    3b00:	89 ed       	ldi	r24, 0xD9	; 217
    3b02:	91 e0       	ldi	r25, 0x01	; 1
    3b04:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	aa ef       	ldi	r26, 0xFA	; 250
    3b0e:	b3 e4       	ldi	r27, 0x43	; 67
    3b10:	89 8f       	std	Y+25, r24	; 0x19
    3b12:	9a 8f       	std	Y+26, r25	; 0x1a
    3b14:	ab 8f       	std	Y+27, r26	; 0x1b
    3b16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b18:	69 8d       	ldd	r22, Y+25	; 0x19
    3b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	4a ef       	ldi	r20, 0xFA	; 250
    3b26:	54 e4       	ldi	r21, 0x44	; 68
    3b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	8d 8b       	std	Y+21, r24	; 0x15
    3b32:	9e 8b       	std	Y+22, r25	; 0x16
    3b34:	af 8b       	std	Y+23, r26	; 0x17
    3b36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b38:	6d 89       	ldd	r22, Y+21	; 0x15
    3b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e8       	ldi	r20, 0x80	; 128
    3b46:	5f e3       	ldi	r21, 0x3F	; 63
    3b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b4c:	88 23       	and	r24, r24
    3b4e:	2c f4       	brge	.+10     	; 0x3b5a <Smart_Home+0xee2>
		__ticks = 1;
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	9c 8b       	std	Y+20, r25	; 0x14
    3b56:	8b 8b       	std	Y+19, r24	; 0x13
    3b58:	3f c0       	rjmp	.+126    	; 0x3bd8 <Smart_Home+0xf60>
	else if (__tmp > 65535)
    3b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b60:	98 8d       	ldd	r25, Y+24	; 0x18
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	3f ef       	ldi	r19, 0xFF	; 255
    3b66:	4f e7       	ldi	r20, 0x7F	; 127
    3b68:	57 e4       	ldi	r21, 0x47	; 71
    3b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b6e:	18 16       	cp	r1, r24
    3b70:	4c f5       	brge	.+82     	; 0x3bc4 <Smart_Home+0xf4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b72:	69 8d       	ldd	r22, Y+25	; 0x19
    3b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	40 e2       	ldi	r20, 0x20	; 32
    3b80:	51 e4       	ldi	r21, 0x41	; 65
    3b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	bc 01       	movw	r22, r24
    3b8c:	cd 01       	movw	r24, r26
    3b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	9c 8b       	std	Y+20, r25	; 0x14
    3b98:	8b 8b       	std	Y+19, r24	; 0x13
    3b9a:	0f c0       	rjmp	.+30     	; 0x3bba <Smart_Home+0xf42>
    3b9c:	88 ec       	ldi	r24, 0xC8	; 200
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	9a 8b       	std	Y+18, r25	; 0x12
    3ba2:	89 8b       	std	Y+17, r24	; 0x11
    3ba4:	89 89       	ldd	r24, Y+17	; 0x11
    3ba6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <Smart_Home+0xf30>
    3bac:	9a 8b       	std	Y+18, r25	; 0x12
    3bae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    3bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	9c 8b       	std	Y+20, r25	; 0x14
    3bb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bba:	8b 89       	ldd	r24, Y+19	; 0x13
    3bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bbe:	00 97       	sbiw	r24, 0x00	; 0
    3bc0:	69 f7       	brne	.-38     	; 0x3b9c <Smart_Home+0xf24>
    3bc2:	14 c0       	rjmp	.+40     	; 0x3bec <Smart_Home+0xf74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bca:	98 8d       	ldd	r25, Y+24	; 0x18
    3bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	9c 8b       	std	Y+20, r25	; 0x14
    3bd6:	8b 8b       	std	Y+19, r24	; 0x13
    3bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bda:	9c 89       	ldd	r25, Y+20	; 0x14
    3bdc:	98 8b       	std	Y+16, r25	; 0x10
    3bde:	8f 87       	std	Y+15, r24	; 0x0f
    3be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be2:	98 89       	ldd	r25, Y+16	; 0x10
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	f1 f7       	brne	.-4      	; 0x3be4 <Smart_Home+0xf6c>
    3be8:	98 8b       	std	Y+16, r25	; 0x10
    3bea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		HLCD_voidClearDisplay();
    3bec:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
    3bf0:	93 c0       	rjmp	.+294    	; 0x3d18 <Smart_Home+0x10a0>
		break;

	default:
	{
		MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_OUTPUT);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	63 e0       	ldi	r22, 0x03	; 3
    3bf6:	41 e0       	ldi	r20, 0x01	; 1
    3bf8:	0e 94 05 0a 	call	0x140a	; 0x140a <MDIO_voidSetPinDirection>
		MUART_voidSendByteSyncBlocking(local_u8ReceivedData);
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e5 56       	subi	r30, 0x65	; 101
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 81       	ld	r24, Z
    3c04:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <MUART_voidSendByteSyncBlocking>
		MUART_voidSendStringSyncNonBlocking("\r\n");
    3c08:	8c ea       	ldi	r24, 0xAC	; 172
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		MUART_voidSendStringSyncNonBlocking("Its wrong chois please try again.\r\n");
    3c10:	89 ee       	ldi	r24, 0xE9	; 233
    3c12:	91 e0       	ldi	r25, 0x01	; 1
    3c14:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
		HLCD_voidDisplayString("Wrong chois!!");
    3c18:	8d e0       	ldi	r24, 0x0D	; 13
    3c1a:	92 e0       	ldi	r25, 0x02	; 2
    3c1c:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
		MTIMER0_voidSetOCR0Value(10000);
    3c20:	80 e1       	ldi	r24, 0x10	; 16
    3c22:	0e 94 94 20 	call	0x4128	; 0x4128 <MTIMER0_voidSetOCR0Value>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	aa ef       	ldi	r26, 0xFA	; 250
    3c2c:	b3 e4       	ldi	r27, 0x43	; 67
    3c2e:	8b 87       	std	Y+11, r24	; 0x0b
    3c30:	9c 87       	std	Y+12, r25	; 0x0c
    3c32:	ad 87       	std	Y+13, r26	; 0x0d
    3c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	4a ef       	ldi	r20, 0xFA	; 250
    3c44:	54 e4       	ldi	r21, 0x44	; 68
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	8f 83       	std	Y+7, r24	; 0x07
    3c50:	98 87       	std	Y+8, r25	; 0x08
    3c52:	a9 87       	std	Y+9, r26	; 0x09
    3c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c56:	6f 81       	ldd	r22, Y+7	; 0x07
    3c58:	78 85       	ldd	r23, Y+8	; 0x08
    3c5a:	89 85       	ldd	r24, Y+9	; 0x09
    3c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e8       	ldi	r20, 0x80	; 128
    3c64:	5f e3       	ldi	r21, 0x3F	; 63
    3c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c6a:	88 23       	and	r24, r24
    3c6c:	2c f4       	brge	.+10     	; 0x3c78 <Smart_Home+0x1000>
		__ticks = 1;
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	9e 83       	std	Y+6, r25	; 0x06
    3c74:	8d 83       	std	Y+5, r24	; 0x05
    3c76:	3f c0       	rjmp	.+126    	; 0x3cf6 <Smart_Home+0x107e>
	else if (__tmp > 65535)
    3c78:	6f 81       	ldd	r22, Y+7	; 0x07
    3c7a:	78 85       	ldd	r23, Y+8	; 0x08
    3c7c:	89 85       	ldd	r24, Y+9	; 0x09
    3c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	3f ef       	ldi	r19, 0xFF	; 255
    3c84:	4f e7       	ldi	r20, 0x7F	; 127
    3c86:	57 e4       	ldi	r21, 0x47	; 71
    3c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c8c:	18 16       	cp	r1, r24
    3c8e:	4c f5       	brge	.+82     	; 0x3ce2 <Smart_Home+0x106a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e2       	ldi	r20, 0x20	; 32
    3c9e:	51 e4       	ldi	r21, 0x41	; 65
    3ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	bc 01       	movw	r22, r24
    3caa:	cd 01       	movw	r24, r26
    3cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	9e 83       	std	Y+6, r25	; 0x06
    3cb6:	8d 83       	std	Y+5, r24	; 0x05
    3cb8:	0f c0       	rjmp	.+30     	; 0x3cd8 <Smart_Home+0x1060>
    3cba:	88 ec       	ldi	r24, 0xC8	; 200
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	9c 83       	std	Y+4, r25	; 0x04
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <Smart_Home+0x104e>
    3cca:	9c 83       	std	Y+4, r25	; 0x04
    3ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cce:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	9e 83       	std	Y+6, r25	; 0x06
    3cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cda:	9e 81       	ldd	r25, Y+6	; 0x06
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	69 f7       	brne	.-38     	; 0x3cba <Smart_Home+0x1042>
    3ce0:	14 c0       	rjmp	.+40     	; 0x3d0a <Smart_Home+0x1092>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce4:	78 85       	ldd	r23, Y+8	; 0x08
    3ce6:	89 85       	ldd	r24, Y+9	; 0x09
    3ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	9e 83       	std	Y+6, r25	; 0x06
    3cf4:	8d 83       	std	Y+5, r24	; 0x05
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfa:	9a 83       	std	Y+2, r25	; 0x02
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	9a 81       	ldd	r25, Y+2	; 0x02
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	f1 f7       	brne	.-4      	; 0x3d02 <Smart_Home+0x108a>
    3d06:	9a 83       	std	Y+2, r25	; 0x02
    3d08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_INPUT);
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	63 e0       	ldi	r22, 0x03	; 3
    3d0e:	40 e0       	ldi	r20, 0x00	; 0
    3d10:	0e 94 05 0a 	call	0x140a	; 0x140a <MDIO_voidSetPinDirection>
		HLCD_voidClearDisplay();
    3d14:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
	}

	}
}
    3d18:	c1 56       	subi	r28, 0x61	; 97
    3d1a:	df 4f       	sbci	r29, 0xFF	; 255
    3d1c:	0f b6       	in	r0, 0x3f	; 63
    3d1e:	f8 94       	cli
    3d20:	de bf       	out	0x3e, r29	; 62
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	cd bf       	out	0x3d, r28	; 61
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret

00003d30 <Display_Menu>:

void Display_Menu(void){
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
	MUART_voidSendStringSyncNonBlocking("\r\n\r\nTo Turn ON the FirstRoom Press 1\r\nTo Turn OFF the FirstRoom Press 2\r\n");
    3d38:	8b e1       	ldi	r24, 0x1B	; 27
    3d3a:	92 e0       	ldi	r25, 0x02	; 2
    3d3c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("\r\nTo Turn ON the SecondRoom Press 3\r\nTo Turn OFF the SecondRoom Press 4\r\n");
    3d40:	85 e6       	ldi	r24, 0x65	; 101
    3d42:	92 e0       	ldi	r25, 0x02	; 2
    3d44:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("\r\nTo Turn ON the ThirdRoom Press 5\r\nTo Turn OFF the ThirdRoom Press 6\r\n");
    3d48:	8f ea       	ldi	r24, 0xAF	; 175
    3d4a:	92 e0       	ldi	r25, 0x02	; 2
    3d4c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("\r\nTo Turn ON the FourthRoom Press 7\r\nTo Turn OFF the FourthRoom Press 8\r\n");
    3d50:	87 ef       	ldi	r24, 0xF7	; 247
    3d52:	92 e0       	ldi	r25, 0x02	; 2
    3d54:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("\r\nTo Open The Door Press o or O\r\nTo Close The Door Press c or C\r\n\r\n");
    3d58:	81 e4       	ldi	r24, 0x41	; 65
    3d5a:	93 e0       	ldi	r25, 0x03	; 3
    3d5c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
}
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <Display_WelcomeMessage>:

void Display_WelcomeMessage(void){
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    3d6e:	2e 97       	sbiw	r28, 0x0e	; 14
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	f8 94       	cli
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	cd bf       	out	0x3d, r28	; 61
	MUART_voidSendStringSyncNonBlocking("Welcome to the Smart Home System!\r\n");
    3d7a:	85 e8       	ldi	r24, 0x85	; 133
    3d7c:	93 e0       	ldi	r25, 0x03	; 3
    3d7e:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
	HLCD_voidDisplayString("Welcome Home...");
    3d82:	89 ea       	ldi	r24, 0xA9	; 169
    3d84:	93 e0       	ldi	r25, 0x03	; 3
    3d86:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	aa ef       	ldi	r26, 0xFA	; 250
    3d90:	b4 e4       	ldi	r27, 0x44	; 68
    3d92:	8b 87       	std	Y+11, r24	; 0x0b
    3d94:	9c 87       	std	Y+12, r25	; 0x0c
    3d96:	ad 87       	std	Y+13, r26	; 0x0d
    3d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	4a ef       	ldi	r20, 0xFA	; 250
    3da8:	54 e4       	ldi	r21, 0x44	; 68
    3daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	8f 83       	std	Y+7, r24	; 0x07
    3db4:	98 87       	std	Y+8, r25	; 0x08
    3db6:	a9 87       	std	Y+9, r26	; 0x09
    3db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dba:	6f 81       	ldd	r22, Y+7	; 0x07
    3dbc:	78 85       	ldd	r23, Y+8	; 0x08
    3dbe:	89 85       	ldd	r24, Y+9	; 0x09
    3dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	40 e8       	ldi	r20, 0x80	; 128
    3dc8:	5f e3       	ldi	r21, 0x3F	; 63
    3dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dce:	88 23       	and	r24, r24
    3dd0:	2c f4       	brge	.+10     	; 0x3ddc <Display_WelcomeMessage+0x76>
		__ticks = 1;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	9e 83       	std	Y+6, r25	; 0x06
    3dd8:	8d 83       	std	Y+5, r24	; 0x05
    3dda:	3f c0       	rjmp	.+126    	; 0x3e5a <Display_WelcomeMessage+0xf4>
	else if (__tmp > 65535)
    3ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dde:	78 85       	ldd	r23, Y+8	; 0x08
    3de0:	89 85       	ldd	r24, Y+9	; 0x09
    3de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	3f ef       	ldi	r19, 0xFF	; 255
    3de8:	4f e7       	ldi	r20, 0x7F	; 127
    3dea:	57 e4       	ldi	r21, 0x47	; 71
    3dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3df0:	18 16       	cp	r1, r24
    3df2:	4c f5       	brge	.+82     	; 0x3e46 <Display_WelcomeMessage+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 e2       	ldi	r20, 0x20	; 32
    3e02:	51 e4       	ldi	r21, 0x41	; 65
    3e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	bc 01       	movw	r22, r24
    3e0e:	cd 01       	movw	r24, r26
    3e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	9e 83       	std	Y+6, r25	; 0x06
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
    3e1c:	0f c0       	rjmp	.+30     	; 0x3e3c <Display_WelcomeMessage+0xd6>
    3e1e:	88 ec       	ldi	r24, 0xC8	; 200
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9c 83       	std	Y+4, r25	; 0x04
    3e24:	8b 83       	std	Y+3, r24	; 0x03
    3e26:	8b 81       	ldd	r24, Y+3	; 0x03
    3e28:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <Display_WelcomeMessage+0xc4>
    3e2e:	9c 83       	std	Y+4, r25	; 0x04
    3e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	9e 81       	ldd	r25, Y+6	; 0x06
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	9e 83       	std	Y+6, r25	; 0x06
    3e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	69 f7       	brne	.-38     	; 0x3e1e <Display_WelcomeMessage+0xb8>
    3e44:	14 c0       	rjmp	.+40     	; 0x3e6e <Display_WelcomeMessage+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e46:	6f 81       	ldd	r22, Y+7	; 0x07
    3e48:	78 85       	ldd	r23, Y+8	; 0x08
    3e4a:	89 85       	ldd	r24, Y+9	; 0x09
    3e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	9a 81       	ldd	r25, Y+2	; 0x02
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <Display_WelcomeMessage+0x100>
    3e6a:	9a 83       	std	Y+2, r25	; 0x02
    3e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	HLCD_voidClearDisplay();
    3e6e:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
}
    3e72:	2e 96       	adiw	r28, 0x0e	; 14
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	f8 94       	cli
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	cd bf       	out	0x3d, r28	; 61
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <WrongInput>:

void WrongInput(void){
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	2e 97       	sbiw	r28, 0x0e	; 14
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
	// If no user matched, show access denied message
	MUART_voidSendStringSyncNonBlocking("\r\n\r\nUsername Or Password incorrect.Please try again.\r\n\r\n");
    3e98:	89 eb       	ldi	r24, 0xB9	; 185
    3e9a:	93 e0       	ldi	r25, 0x03	; 3
    3e9c:	0e 94 9c 23 	call	0x4738	; 0x4738 <MUART_voidSendStringSyncNonBlocking>
	HLCD_voidDisplayString("Access Denied!");
    3ea0:	82 ef       	ldi	r24, 0xF2	; 242
    3ea2:	93 e0       	ldi	r25, 0x03	; 3
    3ea4:	0e 94 a1 14 	call	0x2942	; 0x2942 <HLCD_voidDisplayString>
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	aa ef       	ldi	r26, 0xFA	; 250
    3eae:	b3 e4       	ldi	r27, 0x43	; 67
    3eb0:	8b 87       	std	Y+11, r24	; 0x0b
    3eb2:	9c 87       	std	Y+12, r25	; 0x0c
    3eb4:	ad 87       	std	Y+13, r26	; 0x0d
    3eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	4a ef       	ldi	r20, 0xFA	; 250
    3ec6:	54 e4       	ldi	r21, 0x44	; 68
    3ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	8f 83       	std	Y+7, r24	; 0x07
    3ed2:	98 87       	std	Y+8, r25	; 0x08
    3ed4:	a9 87       	std	Y+9, r26	; 0x09
    3ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eda:	78 85       	ldd	r23, Y+8	; 0x08
    3edc:	89 85       	ldd	r24, Y+9	; 0x09
    3ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 e8       	ldi	r20, 0x80	; 128
    3ee6:	5f e3       	ldi	r21, 0x3F	; 63
    3ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3eec:	88 23       	and	r24, r24
    3eee:	2c f4       	brge	.+10     	; 0x3efa <WrongInput+0x76>
		__ticks = 1;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	3f c0       	rjmp	.+126    	; 0x3f78 <WrongInput+0xf4>
	else if (__tmp > 65535)
    3efa:	6f 81       	ldd	r22, Y+7	; 0x07
    3efc:	78 85       	ldd	r23, Y+8	; 0x08
    3efe:	89 85       	ldd	r24, Y+9	; 0x09
    3f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	3f ef       	ldi	r19, 0xFF	; 255
    3f06:	4f e7       	ldi	r20, 0x7F	; 127
    3f08:	57 e4       	ldi	r21, 0x47	; 71
    3f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f0e:	18 16       	cp	r1, r24
    3f10:	4c f5       	brge	.+82     	; 0x3f64 <WrongInput+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e2       	ldi	r20, 0x20	; 32
    3f20:	51 e4       	ldi	r21, 0x41	; 65
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	9e 83       	std	Y+6, r25	; 0x06
    3f38:	8d 83       	std	Y+5, r24	; 0x05
    3f3a:	0f c0       	rjmp	.+30     	; 0x3f5a <WrongInput+0xd6>
    3f3c:	88 ec       	ldi	r24, 0xC8	; 200
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	9c 83       	std	Y+4, r25	; 0x04
    3f42:	8b 83       	std	Y+3, r24	; 0x03
    3f44:	8b 81       	ldd	r24, Y+3	; 0x03
    3f46:	9c 81       	ldd	r25, Y+4	; 0x04
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	f1 f7       	brne	.-4      	; 0x3f48 <WrongInput+0xc4>
    3f4c:	9c 83       	std	Y+4, r25	; 0x04
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f50:	8d 81       	ldd	r24, Y+5	; 0x05
    3f52:	9e 81       	ldd	r25, Y+6	; 0x06
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	69 f7       	brne	.-38     	; 0x3f3c <WrongInput+0xb8>
    3f62:	14 c0       	rjmp	.+40     	; 0x3f8c <WrongInput+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	6f 81       	ldd	r22, Y+7	; 0x07
    3f66:	78 85       	ldd	r23, Y+8	; 0x08
    3f68:	89 85       	ldd	r24, Y+9	; 0x09
    3f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	9e 83       	std	Y+6, r25	; 0x06
    3f76:	8d 83       	std	Y+5, r24	; 0x05
    3f78:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7c:	9a 83       	std	Y+2, r25	; 0x02
    3f7e:	89 83       	std	Y+1, r24	; 0x01
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	f1 f7       	brne	.-4      	; 0x3f84 <WrongInput+0x100>
    3f88:	9a 83       	std	Y+2, r25	; 0x02
    3f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	HLCD_voidClearDisplay();
    3f8c:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidClearDisplay>
}
    3f90:	2e 96       	adiw	r28, 0x0e	; 14
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	cf 91       	pop	r28
    3f9e:	df 91       	pop	r29
    3fa0:	08 95       	ret

00003fa2 <BuzzerOn>:

int BuzzerOn(const u8 Frequecy){
    3fa2:	df 93       	push	r29
    3fa4:	cf 93       	push	r28
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <BuzzerOn+0x6>
    3fa8:	0f 92       	push	r0
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_OUTPUT);
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	63 e0       	ldi	r22, 0x03	; 3
    3fb4:	41 e0       	ldi	r20, 0x01	; 1
    3fb6:	0e 94 05 0a 	call	0x140a	; 0x140a <MDIO_voidSetPinDirection>
	MTIMER0_voidSetOCR0Value(Frequecy);
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	0e 94 94 20 	call	0x4128	; 0x4128 <MTIMER0_voidSetOCR0Value>
}
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	cf 91       	pop	r28
    3fc8:	df 91       	pop	r29
    3fca:	08 95       	ret

00003fcc <BuzzerOff>:

void BuzzerOff(void){
    3fcc:	df 93       	push	r29
    3fce:	cf 93       	push	r28
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(DIO_PORTB,PIN3,DIO_INPUT);
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	63 e0       	ldi	r22, 0x03	; 3
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	0e 94 05 0a 	call	0x140a	; 0x140a <MDIO_voidSetPinDirection>
}
    3fde:	cf 91       	pop	r28
    3fe0:	df 91       	pop	r29
    3fe2:	08 95       	ret

00003fe4 <MTIMER0_voidInit>:
#define NULL 0
void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void)
{
    3fe4:	df 93       	push	r29
    3fe6:	cf 93       	push	r28
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (TIMER0_CLK | (OC0_MODE << 4));

#elif TIMER0_MODE == FAST_PWM_MODE

	// Set Wave Generation Form to 	FAST-PWM
	SET_BIT(TCCR0,3);
    3fec:	a3 e5       	ldi	r26, 0x53	; 83
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	e3 e5       	ldi	r30, 0x53	; 83
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	88 60       	ori	r24, 0x08	; 8
    3ff8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    3ffa:	a3 e5       	ldi	r26, 0x53	; 83
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	e3 e5       	ldi	r30, 0x53	; 83
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	80 81       	ld	r24, Z
    4004:	80 64       	ori	r24, 0x40	; 64
    4006:	8c 93       	st	X, r24

	// Disable All Timer0 Interrupts
	CLR_BIT(TIMSK,1);
    4008:	a9 e5       	ldi	r26, 0x59	; 89
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	e9 e5       	ldi	r30, 0x59	; 89
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	8d 7f       	andi	r24, 0xFD	; 253
    4014:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,0);
    4016:	a9 e5       	ldi	r26, 0x59	; 89
    4018:	b0 e0       	ldi	r27, 0x00	; 0
    401a:	e9 e5       	ldi	r30, 0x59	; 89
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	80 81       	ld	r24, Z
    4020:	8e 7f       	andi	r24, 0xFE	; 254
    4022:	8c 93       	st	X, r24

	// set OCR0 value
	OCR0 = OCR0_VALUE;
    4024:	ec e5       	ldi	r30, 0x5C	; 92
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	87 ec       	ldi	r24, 0xC7	; 199
    402a:	80 83       	st	Z, r24

	// set oc0 configuration
	//start Timer by setting its CLK
	TCCR0 &= TIMER0_CLK_OCR_MASK;
    402c:	a3 e5       	ldi	r26, 0x53	; 83
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	e3 e5       	ldi	r30, 0x53	; 83
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	80 81       	ld	r24, Z
    4036:	88 7c       	andi	r24, 0xC8	; 200
    4038:	8c 93       	st	X, r24
	TCCR0 |= (TIMER0_CLK | (OC0_MODE << 4));
    403a:	a3 e5       	ldi	r26, 0x53	; 83
    403c:	b0 e0       	ldi	r27, 0x00	; 0
    403e:	e3 e5       	ldi	r30, 0x53	; 83
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	80 81       	ld	r24, Z
    4044:	82 63       	ori	r24, 0x32	; 50
    4046:	8c 93       	st	X, r24

#endif
}
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	08 95       	ret

0000404e <MTIMER0_voidSetPreloadValue>:
void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks)
{
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	0f 92       	push	r0
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
    4058:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
    405a:	e2 e5       	ldi	r30, 0x52	; 82
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	80 83       	st	Z, r24
}
    4062:	0f 90       	pop	r0
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	08 95       	ret

0000406a <MTIMER0_voidSetOVFCallback>:
void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void))
{
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	00 d0       	rcall	.+0      	; 0x4070 <MTIMER0_voidSetOVFCallback+0x6>
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	9a 83       	std	Y+2, r25	; 0x02
    4076:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	9a 81       	ldd	r25, Y+2	; 0x02
    407c:	00 97       	sbiw	r24, 0x00	; 0
    407e:	31 f0       	breq	.+12     	; 0x408c <MTIMER0_voidSetOVFCallback+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	9a 81       	ldd	r25, Y+2	; 0x02
    4084:	90 93 ef 04 	sts	0x04EF, r25
    4088:	80 93 ee 04 	sts	0x04EE, r24
	}
}
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <__vector_11>:


void __vector_11(void)__attribute__((signal));
void __vector_11(void){
    4096:	1f 92       	push	r1
    4098:	0f 92       	push	r0
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	0f 92       	push	r0
    409e:	11 24       	eor	r1, r1
    40a0:	2f 93       	push	r18
    40a2:	3f 93       	push	r19
    40a4:	4f 93       	push	r20
    40a6:	5f 93       	push	r21
    40a8:	6f 93       	push	r22
    40aa:	7f 93       	push	r23
    40ac:	8f 93       	push	r24
    40ae:	9f 93       	push	r25
    40b0:	af 93       	push	r26
    40b2:	bf 93       	push	r27
    40b4:	ef 93       	push	r30
    40b6:	ff 93       	push	r31
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    40c0:	80 91 ee 04 	lds	r24, 0x04EE
    40c4:	90 91 ef 04 	lds	r25, 0x04EF
    40c8:	00 97       	sbiw	r24, 0x00	; 0
    40ca:	29 f0       	breq	.+10     	; 0x40d6 <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    40cc:	e0 91 ee 04 	lds	r30, 0x04EE
    40d0:	f0 91 ef 04 	lds	r31, 0x04EF
    40d4:	09 95       	icall
	}
}
    40d6:	cf 91       	pop	r28
    40d8:	df 91       	pop	r29
    40da:	ff 91       	pop	r31
    40dc:	ef 91       	pop	r30
    40de:	bf 91       	pop	r27
    40e0:	af 91       	pop	r26
    40e2:	9f 91       	pop	r25
    40e4:	8f 91       	pop	r24
    40e6:	7f 91       	pop	r23
    40e8:	6f 91       	pop	r22
    40ea:	5f 91       	pop	r21
    40ec:	4f 91       	pop	r20
    40ee:	3f 91       	pop	r19
    40f0:	2f 91       	pop	r18
    40f2:	0f 90       	pop	r0
    40f4:	0f be       	out	0x3f, r0	; 63
    40f6:	0f 90       	pop	r0
    40f8:	1f 90       	pop	r1
    40fa:	18 95       	reti

000040fc <MTIMER0_voidSetCTCCallback>:
void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	00 d0       	rcall	.+0      	; 0x4102 <MTIMER0_voidSetCTCCallback+0x6>
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	9a 83       	std	Y+2, r25	; 0x02
    4108:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	9a 81       	ldd	r25, Y+2	; 0x02
    410e:	00 97       	sbiw	r24, 0x00	; 0
    4110:	31 f0       	breq	.+12     	; 0x411e <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    4112:	89 81       	ldd	r24, Y+1	; 0x01
    4114:	9a 81       	ldd	r25, Y+2	; 0x02
    4116:	90 93 f1 04 	sts	0x04F1, r25
    411a:	80 93 f0 04 	sts	0x04F0, r24
	}
}
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <MTIMER0_voidSetOCR0Value>:
void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
    4128:	df 93       	push	r29
    412a:	cf 93       	push	r28
    412c:	0f 92       	push	r0
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    4134:	ec e5       	ldi	r30, 0x5C	; 92
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	80 83       	st	Z, r24
}
    413c:	0f 90       	pop	r0
    413e:	cf 91       	pop	r28
    4140:	df 91       	pop	r29
    4142:	08 95       	ret

00004144 <MTIMER0_voidStopTimer>:
void MTIMER0_voidStopTimer (void)
{
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_MASK;
    414c:	a3 e5       	ldi	r26, 0x53	; 83
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	e3 e5       	ldi	r30, 0x53	; 83
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	80 81       	ld	r24, Z
    4156:	88 7f       	andi	r24, 0xF8	; 248
    4158:	8c 93       	st	X, r24
}
    415a:	cf 91       	pop	r28
    415c:	df 91       	pop	r29
    415e:	08 95       	ret

00004160 <MTIMER1_voidInit>:
void MTIMER1_voidInit()
{
    4160:	df 93       	push	r29
    4162:	cf 93       	push	r28
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
	//delect timer mode -->14
	CLR_BIT(TCCR1A,0);
    4168:	af e4       	ldi	r26, 0x4F	; 79
    416a:	b0 e0       	ldi	r27, 0x00	; 0
    416c:	ef e4       	ldi	r30, 0x4F	; 79
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	80 81       	ld	r24, Z
    4172:	8e 7f       	andi	r24, 0xFE	; 254
    4174:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    4176:	af e4       	ldi	r26, 0x4F	; 79
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	ef e4       	ldi	r30, 0x4F	; 79
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	80 81       	ld	r24, Z
    4180:	82 60       	ori	r24, 0x02	; 2
    4182:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    4184:	ae e4       	ldi	r26, 0x4E	; 78
    4186:	b0 e0       	ldi	r27, 0x00	; 0
    4188:	ee e4       	ldi	r30, 0x4E	; 78
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	80 81       	ld	r24, Z
    418e:	88 60       	ori	r24, 0x08	; 8
    4190:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    4192:	ae e4       	ldi	r26, 0x4E	; 78
    4194:	b0 e0       	ldi	r27, 0x00	; 0
    4196:	ee e4       	ldi	r30, 0x4E	; 78
    4198:	f0 e0       	ldi	r31, 0x00	; 0
    419a:	80 81       	ld	r24, Z
    419c:	80 61       	ori	r24, 0x10	; 16
    419e:	8c 93       	st	X, r24

	//Non-Tnverting mode for OC1A
	CLR_BIT(TCCR1A,6);
    41a0:	af e4       	ldi	r26, 0x4F	; 79
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	ef e4       	ldi	r30, 0x4F	; 79
    41a6:	f0 e0       	ldi	r31, 0x00	; 0
    41a8:	80 81       	ld	r24, Z
    41aa:	8f 7b       	andi	r24, 0xBF	; 191
    41ac:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    41ae:	af e4       	ldi	r26, 0x4F	; 79
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	ef e4       	ldi	r30, 0x4F	; 79
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	80 68       	ori	r24, 0x80	; 128
    41ba:	8c 93       	st	X, r24

	//ICR1 <-- 19999
	ICR1 = 19999;
    41bc:	e6 e4       	ldi	r30, 0x46	; 70
    41be:	f0 e0       	ldi	r31, 0x00	; 0
    41c0:	8f e1       	ldi	r24, 0x1F	; 31
    41c2:	9e e4       	ldi	r25, 0x4E	; 78
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
	/*OCR1A <-- 1000
	 * 1000 --> 0 	degree
	 * 1500 --> 90 	degree
	 * 2000 --> 180 degree
	 */
	OCR1A = 1000;
    41c8:	ea e4       	ldi	r30, 0x4A	; 74
    41ca:	f0 e0       	ldi	r31, 0x00	; 0
    41cc:	88 ee       	ldi	r24, 0xE8	; 232
    41ce:	93 e0       	ldi	r25, 0x03	; 3
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24

	//Start timer by setting its clock
	CLR_BIT(TCCR1B,0);
    41d4:	ae e4       	ldi	r26, 0x4E	; 78
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	ee e4       	ldi	r30, 0x4E	; 78
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	8e 7f       	andi	r24, 0xFE	; 254
    41e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    41e2:	ae e4       	ldi	r26, 0x4E	; 78
    41e4:	b0 e0       	ldi	r27, 0x00	; 0
    41e6:	ee e4       	ldi	r30, 0x4E	; 78
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	80 81       	ld	r24, Z
    41ec:	82 60       	ori	r24, 0x02	; 2
    41ee:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    41f0:	ae e4       	ldi	r26, 0x4E	; 78
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	ee e4       	ldi	r30, 0x4E	; 78
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	80 81       	ld	r24, Z
    41fa:	8b 7f       	andi	r24, 0xFB	; 251
    41fc:	8c 93       	st	X, r24

}
    41fe:	cf 91       	pop	r28
    4200:	df 91       	pop	r29
    4202:	08 95       	ret

00004204 <MTIMER1_voidSetOCR1AValue>:
void MTIMER1_voidSetOCR1AValue(u16 A_u16value)
{
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	00 d0       	rcall	.+0      	; 0x420a <MTIMER1_voidSetOCR1AValue+0x6>
    420a:	cd b7       	in	r28, 0x3d	; 61
    420c:	de b7       	in	r29, 0x3e	; 62
    420e:	9a 83       	std	Y+2, r25	; 0x02
    4210:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16value;
    4212:	ea e4       	ldi	r30, 0x4A	; 74
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	80 83       	st	Z, r24
}
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	cf 91       	pop	r28
    4224:	df 91       	pop	r29
    4226:	08 95       	ret

00004228 <MTIMER1_voidICUSWInit>:
void MTIMER1_voidICUSWInit()
{
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	cd b7       	in	r28, 0x3d	; 61
    422e:	de b7       	in	r29, 0x3e	; 62
	//Start timer by setting its clock
	CLR_BIT(TCCR1B,0);
    4230:	ae e4       	ldi	r26, 0x4E	; 78
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	ee e4       	ldi	r30, 0x4E	; 78
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	80 81       	ld	r24, Z
    423a:	8e 7f       	andi	r24, 0xFE	; 254
    423c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    423e:	ae e4       	ldi	r26, 0x4E	; 78
    4240:	b0 e0       	ldi	r27, 0x00	; 0
    4242:	ee e4       	ldi	r30, 0x4E	; 78
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	80 81       	ld	r24, Z
    4248:	82 60       	ori	r24, 0x02	; 2
    424a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    424c:	ae e4       	ldi	r26, 0x4E	; 78
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	ee e4       	ldi	r30, 0x4E	; 78
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	80 81       	ld	r24, Z
    4256:	8b 7f       	andi	r24, 0xFB	; 251
    4258:	8c 93       	st	X, r24
}
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <MTIMER1_voidSetTimer1Value>:
void MTIMER1_voidSetTimer1Value(u16 A_u16Value)
{
    4260:	df 93       	push	r29
    4262:	cf 93       	push	r28
    4264:	00 d0       	rcall	.+0      	; 0x4266 <MTIMER1_voidSetTimer1Value+0x6>
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
    426a:	9a 83       	std	Y+2, r25	; 0x02
    426c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1= A_u16Value;
    426e:	ec e4       	ldi	r30, 0x4C	; 76
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	9a 81       	ldd	r25, Y+2	; 0x02
    4276:	91 83       	std	Z+1, r25	; 0x01
    4278:	80 83       	st	Z, r24
}
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	08 95       	ret

00004284 <MTIMER1_u16ReadTimer1Value>:
u16 MTIMER1_u16ReadTimer1Value(void)
{
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    428c:	ec e4       	ldi	r30, 0x4C	; 76
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	80 81       	ld	r24, Z
    4292:	91 81       	ldd	r25, Z+1	; 0x01
}
    4294:	cf 91       	pop	r28
    4296:	df 91       	pop	r29
    4298:	08 95       	ret

0000429a <TWI_voidInitMaster>:
#include "../include/MCAL/TWI/TWI_private.h"
#include "../include/MCAL/TWI/TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    429a:	df 93       	push	r29
    429c:	cf 93       	push	r28
    429e:	0f 92       	push	r0
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    42a6:	a6 e5       	ldi	r26, 0x56	; 86
    42a8:	b0 e0       	ldi	r27, 0x00	; 0
    42aa:	e6 e5       	ldi	r30, 0x56	; 86
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	80 81       	ld	r24, Z
    42b0:	80 64       	ori	r24, 0x40	; 64
    42b2:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
    42b4:	e0 e2       	ldi	r30, 0x20	; 32
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    42bc:	a1 e2       	ldi	r26, 0x21	; 33
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	e1 e2       	ldi	r30, 0x21	; 33
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	8e 7f       	andi	r24, 0xFE	; 254
    42c8:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    42ca:	a1 e2       	ldi	r26, 0x21	; 33
    42cc:	b0 e0       	ldi	r27, 0x00	; 0
    42ce:	e1 e2       	ldi	r30, 0x21	; 33
    42d0:	f0 e0       	ldi	r31, 0x00	; 0
    42d2:	80 81       	ld	r24, Z
    42d4:	8d 7f       	andi	r24, 0xFD	; 253
    42d6:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    42d8:	89 81       	ldd	r24, Y+1	; 0x01
    42da:	88 23       	and	r24, r24
    42dc:	29 f0       	breq	.+10     	; 0x42e8 <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/ //bits from 1 to 7
		TWAR = (Copy_u8Address << 1);
    42de:	e2 e2       	ldi	r30, 0x22	; 34
    42e0:	f0 e0       	ldi	r31, 0x00	; 0
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	88 0f       	add	r24, r24
    42e6:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    42e8:	a6 e5       	ldi	r26, 0x56	; 86
    42ea:	b0 e0       	ldi	r27, 0x00	; 0
    42ec:	e6 e5       	ldi	r30, 0x56	; 86
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	80 81       	ld	r24, Z
    42f2:	84 60       	ori	r24, 0x04	; 4
    42f4:	8c 93       	st	X, r24
}
    42f6:	0f 90       	pop	r0
    42f8:	cf 91       	pop	r28
    42fa:	df 91       	pop	r29
    42fc:	08 95       	ret

000042fe <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    42fe:	df 93       	push	r29
    4300:	cf 93       	push	r28
    4302:	0f 92       	push	r0
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
    4308:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
    430a:	e2 e2       	ldi	r30, 0x22	; 34
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	88 0f       	add	r24, r24
    4312:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    4314:	a6 e5       	ldi	r26, 0x56	; 86
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	e6 e5       	ldi	r30, 0x56	; 86
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	80 81       	ld	r24, Z
    431e:	80 64       	ori	r24, 0x40	; 64
    4320:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    4322:	a6 e5       	ldi	r26, 0x56	; 86
    4324:	b0 e0       	ldi	r27, 0x00	; 0
    4326:	e6 e5       	ldi	r30, 0x56	; 86
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	80 81       	ld	r24, Z
    432c:	84 60       	ori	r24, 0x04	; 4
    432e:	8c 93       	st	X, r24
}
    4330:	0f 90       	pop	r0
    4332:	cf 91       	pop	r28
    4334:	df 91       	pop	r29
    4336:	08 95       	ret

00004338 <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	0f 92       	push	r0
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    4342:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    4344:	a6 e5       	ldi	r26, 0x56	; 86
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	e6 e5       	ldi	r30, 0x56	; 86
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	80 81       	ld	r24, Z
    434e:	80 62       	ori	r24, 0x20	; 32
    4350:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4352:	a6 e5       	ldi	r26, 0x56	; 86
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	e6 e5       	ldi	r30, 0x56	; 86
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	80 81       	ld	r24, Z
    435c:	80 68       	ori	r24, 0x80	; 128
    435e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4360:	e6 e5       	ldi	r30, 0x56	; 86
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	80 81       	ld	r24, Z
    4366:	88 23       	and	r24, r24
    4368:	dc f7       	brge	.-10     	; 0x4360 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
    436a:	e1 e2       	ldi	r30, 0x21	; 33
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	80 81       	ld	r24, Z
    4370:	88 2f       	mov	r24, r24
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	88 7f       	andi	r24, 0xF8	; 248
    4376:	90 70       	andi	r25, 0x00	; 0
    4378:	88 30       	cpi	r24, 0x08	; 8
    437a:	91 05       	cpc	r25, r1
    437c:	11 f0       	breq	.+4      	; 0x4382 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    4382:	89 81       	ldd	r24, Y+1	; 0x01
}
    4384:	0f 90       	pop	r0
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	08 95       	ret

0000438c <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    438c:	df 93       	push	r29
    438e:	cf 93       	push	r28
    4390:	0f 92       	push	r0
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    4396:	19 82       	std	Y+1, r1	; 0x01
	// clear INT flag
	// Send Repeated Start Condition
	// Enable TWI
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    4398:	a6 e5       	ldi	r26, 0x56	; 86
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	e6 e5       	ldi	r30, 0x56	; 86
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	84 6a       	ori	r24, 0xA4	; 164
    43a4:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    43a6:	e6 e5       	ldi	r30, 0x56	; 86
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	80 81       	ld	r24, Z
    43ac:	88 23       	and	r24, r24
    43ae:	dc f7       	brge	.-10     	; 0x43a6 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    43b0:	e1 e2       	ldi	r30, 0x21	; 33
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	80 81       	ld	r24, Z
    43b6:	88 2f       	mov	r24, r24
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	88 7f       	andi	r24, 0xF8	; 248
    43bc:	90 70       	andi	r25, 0x00	; 0
    43be:	80 31       	cpi	r24, 0x10	; 16
    43c0:	91 05       	cpc	r25, r1
    43c2:	11 f0       	breq	.+4      	; 0x43c8 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    43c4:	82 e0       	ldi	r24, 0x02	; 2
    43c6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    43ca:	0f 90       	pop	r0
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	08 95       	ret

000043d2 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    43d2:	df 93       	push	r29
    43d4:	cf 93       	push	r28
    43d6:	00 d0       	rcall	.+0      	; 0x43d8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    43de:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    43e0:	e3 e2       	ldi	r30, 0x23	; 35
    43e2:	f0 e0       	ldi	r31, 0x00	; 0
    43e4:	8a 81       	ldd	r24, Y+2	; 0x02
    43e6:	88 0f       	add	r24, r24
    43e8:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWDR, TWDR_TWD0);
    43ea:	a3 e2       	ldi	r26, 0x23	; 35
    43ec:	b0 e0       	ldi	r27, 0x00	; 0
    43ee:	e3 e2       	ldi	r30, 0x23	; 35
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	80 81       	ld	r24, Z
    43f4:	8e 7f       	andi	r24, 0xFE	; 254
    43f6:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    43f8:	a6 e5       	ldi	r26, 0x56	; 86
    43fa:	b0 e0       	ldi	r27, 0x00	; 0
    43fc:	e6 e5       	ldi	r30, 0x56	; 86
    43fe:	f0 e0       	ldi	r31, 0x00	; 0
    4400:	80 81       	ld	r24, Z
    4402:	8f 7d       	andi	r24, 0xDF	; 223
    4404:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4406:	a6 e5       	ldi	r26, 0x56	; 86
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	e6 e5       	ldi	r30, 0x56	; 86
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	80 81       	ld	r24, Z
    4410:	80 68       	ori	r24, 0x80	; 128
    4412:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4414:	e6 e5       	ldi	r30, 0x56	; 86
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	80 81       	ld	r24, Z
    441a:	88 23       	and	r24, r24
    441c:	dc f7       	brge	.-10     	; 0x4414 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    441e:	e1 e2       	ldi	r30, 0x21	; 33
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	80 81       	ld	r24, Z
    4424:	88 2f       	mov	r24, r24
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	88 7f       	andi	r24, 0xF8	; 248
    442a:	90 70       	andi	r25, 0x00	; 0
    442c:	88 31       	cpi	r24, 0x18	; 24
    442e:	91 05       	cpc	r25, r1
    4430:	11 f0       	breq	.+4      	; 0x4436 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    4432:	83 e0       	ldi	r24, 0x03	; 3
    4434:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    4436:	89 81       	ldd	r24, Y+1	; 0x01
}
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	cf 91       	pop	r28
    443e:	df 91       	pop	r29
    4440:	08 95       	ret

00004442 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    4442:	df 93       	push	r29
    4444:	cf 93       	push	r28
    4446:	00 d0       	rcall	.+0      	; 0x4448 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    4448:	cd b7       	in	r28, 0x3d	; 61
    444a:	de b7       	in	r29, 0x3e	; 62
    444c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    444e:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    4450:	e3 e2       	ldi	r30, 0x23	; 35
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	88 0f       	add	r24, r24
    4458:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWDR, TWDR_TWD0);
    445a:	a3 e2       	ldi	r26, 0x23	; 35
    445c:	b0 e0       	ldi	r27, 0x00	; 0
    445e:	e3 e2       	ldi	r30, 0x23	; 35
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	80 81       	ld	r24, Z
    4464:	81 60       	ori	r24, 0x01	; 1
    4466:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    4468:	a6 e5       	ldi	r26, 0x56	; 86
    446a:	b0 e0       	ldi	r27, 0x00	; 0
    446c:	e6 e5       	ldi	r30, 0x56	; 86
    446e:	f0 e0       	ldi	r31, 0x00	; 0
    4470:	80 81       	ld	r24, Z
    4472:	8f 7d       	andi	r24, 0xDF	; 223
    4474:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4476:	a6 e5       	ldi	r26, 0x56	; 86
    4478:	b0 e0       	ldi	r27, 0x00	; 0
    447a:	e6 e5       	ldi	r30, 0x56	; 86
    447c:	f0 e0       	ldi	r31, 0x00	; 0
    447e:	80 81       	ld	r24, Z
    4480:	80 68       	ori	r24, 0x80	; 128
    4482:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4484:	e6 e5       	ldi	r30, 0x56	; 86
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	80 81       	ld	r24, Z
    448a:	88 23       	and	r24, r24
    448c:	dc f7       	brge	.-10     	; 0x4484 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    448e:	e1 e2       	ldi	r30, 0x21	; 33
    4490:	f0 e0       	ldi	r31, 0x00	; 0
    4492:	80 81       	ld	r24, Z
    4494:	88 2f       	mov	r24, r24
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	88 7f       	andi	r24, 0xF8	; 248
    449a:	90 70       	andi	r25, 0x00	; 0
    449c:	80 34       	cpi	r24, 0x40	; 64
    449e:	91 05       	cpc	r25, r1
    44a0:	11 f0       	breq	.+4      	; 0x44a6 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    44a2:	84 e0       	ldi	r24, 0x04	; 4
    44a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    44a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	08 95       	ret

000044b2 <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    44b2:	df 93       	push	r29
    44b4:	cf 93       	push	r28
    44b6:	00 d0       	rcall	.+0      	; 0x44b8 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
    44bc:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    44be:	19 82       	std	Y+1, r1	; 0x01

	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
    44c0:	e3 e2       	ldi	r30, 0x23	; 35
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	8a 81       	ldd	r24, Y+2	; 0x02
    44c6:	80 83       	st	Z, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    44c8:	a6 e5       	ldi	r26, 0x56	; 86
    44ca:	b0 e0       	ldi	r27, 0x00	; 0
    44cc:	e6 e5       	ldi	r30, 0x56	; 86
    44ce:	f0 e0       	ldi	r31, 0x00	; 0
    44d0:	80 81       	ld	r24, Z
    44d2:	80 68       	ori	r24, 0x80	; 128
    44d4:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    44d6:	e6 e5       	ldi	r30, 0x56	; 86
    44d8:	f0 e0       	ldi	r31, 0x00	; 0
    44da:	80 81       	ld	r24, Z
    44dc:	88 23       	and	r24, r24
    44de:	dc f7       	brge	.-10     	; 0x44d6 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    44e0:	e1 e2       	ldi	r30, 0x21	; 33
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	88 2f       	mov	r24, r24
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	88 7f       	andi	r24, 0xF8	; 248
    44ec:	90 70       	andi	r25, 0x00	; 0
    44ee:	88 32       	cpi	r24, 0x28	; 40
    44f0:	91 05       	cpc	r25, r1
    44f2:	11 f0       	breq	.+4      	; 0x44f8 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    44f4:	85 e0       	ldi	r24, 0x05	; 5
    44f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	08 95       	ret

00004504 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    4504:	df 93       	push	r29
    4506:	cf 93       	push	r28
    4508:	00 d0       	rcall	.+0      	; 0x450a <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    450a:	0f 92       	push	r0
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	9b 83       	std	Y+3, r25	; 0x03
    4512:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    4514:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    4516:	a6 e5       	ldi	r26, 0x56	; 86
    4518:	b0 e0       	ldi	r27, 0x00	; 0
    451a:	e6 e5       	ldi	r30, 0x56	; 86
    451c:	f0 e0       	ldi	r31, 0x00	; 0
    451e:	80 81       	ld	r24, Z
    4520:	80 68       	ori	r24, 0x80	; 128
    4522:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    4524:	e6 e5       	ldi	r30, 0x56	; 86
    4526:	f0 e0       	ldi	r31, 0x00	; 0
    4528:	80 81       	ld	r24, Z
    452a:	88 23       	and	r24, r24
    452c:	dc f7       	brge	.-10     	; 0x4524 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    452e:	e1 e2       	ldi	r30, 0x21	; 33
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	88 2f       	mov	r24, r24
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	88 7f       	andi	r24, 0xF8	; 248
    453a:	90 70       	andi	r25, 0x00	; 0
    453c:	80 35       	cpi	r24, 0x50	; 80
    453e:	91 05       	cpc	r25, r1
    4540:	19 f0       	breq	.+6      	; 0x4548 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    4542:	86 e0       	ldi	r24, 0x06	; 6
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	06 c0       	rjmp	.+12     	; 0x4554 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    4548:	e3 e2       	ldi	r30, 0x23	; 35
    454a:	f0 e0       	ldi	r31, 0x00	; 0
    454c:	80 81       	ld	r24, Z
    454e:	ea 81       	ldd	r30, Y+2	; 0x02
    4550:	fb 81       	ldd	r31, Y+3	; 0x03
    4552:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    4554:	89 81       	ldd	r24, Y+1	; 0x01

}
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	cf 91       	pop	r28
    455e:	df 91       	pop	r29
    4560:	08 95       	ret

00004562 <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    4562:	df 93       	push	r29
    4564:	cf 93       	push	r28
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    456a:	a6 e5       	ldi	r26, 0x56	; 86
    456c:	b0 e0       	ldi	r27, 0x00	; 0
    456e:	e6 e5       	ldi	r30, 0x56	; 86
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	80 61       	ori	r24, 0x10	; 16
    4576:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    4578:	a6 e5       	ldi	r26, 0x56	; 86
    457a:	b0 e0       	ldi	r27, 0x00	; 0
    457c:	e6 e5       	ldi	r30, 0x56	; 86
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	80 81       	ld	r24, Z
    4582:	80 68       	ori	r24, 0x80	; 128
    4584:	8c 93       	st	X, r24
}
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <MUART_voidInit>:
#define NULL 0

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	00 d0       	rcall	.+0      	; 0x4592 <MUART_voidInit+0x6>
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    4596:	83 e3       	ldi	r24, 0x33	; 51
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	89 83       	std	Y+1, r24	; 0x01
	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    459e:	e9 e2       	ldi	r30, 0x29	; 41
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    45a6:	e0 e4       	ldi	r30, 0x40	; 64
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	9a 81       	ldd	r25, Y+2	; 0x02
    45ae:	89 2f       	mov	r24, r25
    45b0:	99 27       	eor	r25, r25
    45b2:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    45b4:	aa e2       	ldi	r26, 0x2A	; 42
    45b6:	b0 e0       	ldi	r27, 0x00	; 0
    45b8:	ea e2       	ldi	r30, 0x2A	; 42
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	80 81       	ld	r24, Z
    45be:	8b 7f       	andi	r24, 0xFB	; 251
    45c0:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    45c2:	e0 e4       	ldi	r30, 0x40	; 64
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	86 e8       	ldi	r24, 0x86	; 134
    45c8:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    45ca:	aa e2       	ldi	r26, 0x2A	; 42
    45cc:	b0 e0       	ldi	r27, 0x00	; 0
    45ce:	ea e2       	ldi	r30, 0x2A	; 42
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	80 81       	ld	r24, Z
    45d4:	88 60       	ori	r24, 0x08	; 8
    45d6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    45d8:	aa e2       	ldi	r26, 0x2A	; 42
    45da:	b0 e0       	ldi	r27, 0x00	; 0
    45dc:	ea e2       	ldi	r30, 0x2A	; 42
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	80 81       	ld	r24, Z
    45e2:	80 61       	ori	r24, 0x10	; 16
    45e4:	8c 93       	st	X, r24
}
    45e6:	0f 90       	pop	r0
    45e8:	0f 90       	pop	r0
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	08 95       	ret

000045f0 <MUART_voidSendByteSyncBlocking>:


void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    45f0:	df 93       	push	r29
    45f2:	cf 93       	push	r28
    45f4:	0f 92       	push	r0
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    45fc:	eb e2       	ldi	r30, 0x2B	; 43
    45fe:	f0 e0       	ldi	r31, 0x00	; 0
    4600:	80 81       	ld	r24, Z
    4602:	82 95       	swap	r24
    4604:	86 95       	lsr	r24
    4606:	87 70       	andi	r24, 0x07	; 7
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	81 70       	andi	r24, 0x01	; 1
    460e:	90 70       	andi	r25, 0x00	; 0
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	a1 f3       	breq	.-24     	; 0x45fc <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    4614:	ec e2       	ldi	r30, 0x2C	; 44
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	89 81       	ldd	r24, Y+1	; 0x01
    461a:	80 83       	st	Z, r24

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    461c:	eb e2       	ldi	r30, 0x2B	; 43
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	82 95       	swap	r24
    4624:	86 95       	lsr	r24
    4626:	87 70       	andi	r24, 0x07	; 7
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	81 70       	andi	r24, 0x01	; 1
    462e:	90 70       	andi	r25, 0x00	; 0
    4630:	00 97       	sbiw	r24, 0x00	; 0
    4632:	a1 f3       	breq	.-24     	; 0x461c <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    4634:	ab e2       	ldi	r26, 0x2B	; 43
    4636:	b0 e0       	ldi	r27, 0x00	; 0
    4638:	eb e2       	ldi	r30, 0x2B	; 43
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	80 81       	ld	r24, Z
    463e:	80 64       	ori	r24, 0x40	; 64
    4640:	8c 93       	st	X, r24

}
    4642:	0f 90       	pop	r0
    4644:	cf 91       	pop	r28
    4646:	df 91       	pop	r29
    4648:	08 95       	ret

0000464a <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    464a:	df 93       	push	r29
    464c:	cf 93       	push	r28
    464e:	00 d0       	rcall	.+0      	; 0x4650 <MUART_voidSendByteSyncNonBlocking+0x6>
    4650:	00 d0       	rcall	.+0      	; 0x4652 <MUART_voidSendByteSyncNonBlocking+0x8>
    4652:	0f 92       	push	r0
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    465a:	19 82       	std	Y+1, r1	; 0x01
    465c:	1a 82       	std	Y+2, r1	; 0x02
    465e:	1b 82       	std	Y+3, r1	; 0x03
    4660:	1c 82       	std	Y+4, r1	; 0x04
    4662:	17 c0       	rjmp	.+46     	; 0x4692 <MUART_voidSendByteSyncNonBlocking+0x48>

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    4664:	89 81       	ldd	r24, Y+1	; 0x01
    4666:	9a 81       	ldd	r25, Y+2	; 0x02
    4668:	ab 81       	ldd	r26, Y+3	; 0x03
    466a:	bc 81       	ldd	r27, Y+4	; 0x04
    466c:	01 96       	adiw	r24, 0x01	; 1
    466e:	a1 1d       	adc	r26, r1
    4670:	b1 1d       	adc	r27, r1
    4672:	89 83       	std	Y+1, r24	; 0x01
    4674:	9a 83       	std	Y+2, r25	; 0x02
    4676:	ab 83       	std	Y+3, r26	; 0x03
    4678:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    467a:	89 81       	ldd	r24, Y+1	; 0x01
    467c:	9a 81       	ldd	r25, Y+2	; 0x02
    467e:	ab 81       	ldd	r26, Y+3	; 0x03
    4680:	bc 81       	ldd	r27, Y+4	; 0x04
    4682:	88 38       	cpi	r24, 0x88	; 136
    4684:	23 e1       	ldi	r18, 0x13	; 19
    4686:	92 07       	cpc	r25, r18
    4688:	20 e0       	ldi	r18, 0x00	; 0
    468a:	a2 07       	cpc	r26, r18
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	b2 07       	cpc	r27, r18
    4690:	61 f0       	breq	.+24     	; 0x46aa <MUART_voidSendByteSyncNonBlocking+0x60>
void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
    4692:	eb e2       	ldi	r30, 0x2B	; 43
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	80 81       	ld	r24, Z
    4698:	82 95       	swap	r24
    469a:	86 95       	lsr	r24
    469c:	87 70       	andi	r24, 0x07	; 7
    469e:	88 2f       	mov	r24, r24
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	81 70       	andi	r24, 0x01	; 1
    46a4:	90 70       	andi	r25, 0x00	; 0
    46a6:	00 97       	sbiw	r24, 0x00	; 0
    46a8:	e9 f2       	breq	.-70     	; 0x4664 <MUART_voidSendByteSyncNonBlocking+0x1a>
		{
			break;
		}
	}

	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	9a 81       	ldd	r25, Y+2	; 0x02
    46ae:	ab 81       	ldd	r26, Y+3	; 0x03
    46b0:	bc 81       	ldd	r27, Y+4	; 0x04
    46b2:	88 38       	cpi	r24, 0x88	; 136
    46b4:	23 e1       	ldi	r18, 0x13	; 19
    46b6:	92 07       	cpc	r25, r18
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	a2 07       	cpc	r26, r18
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	b2 07       	cpc	r27, r18
    46c0:	99 f1       	breq	.+102    	; 0x4728 <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    46c2:	19 82       	std	Y+1, r1	; 0x01
    46c4:	1a 82       	std	Y+2, r1	; 0x02
    46c6:	1b 82       	std	Y+3, r1	; 0x03
    46c8:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    46ca:	ec e2       	ldi	r30, 0x2C	; 44
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	8d 81       	ldd	r24, Y+5	; 0x05
    46d0:	80 83       	st	Z, r24
    46d2:	17 c0       	rjmp	.+46     	; 0x4702 <MUART_voidSendByteSyncNonBlocking+0xb8>
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	ab 81       	ldd	r26, Y+3	; 0x03
    46da:	bc 81       	ldd	r27, Y+4	; 0x04
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	a1 1d       	adc	r26, r1
    46e0:	b1 1d       	adc	r27, r1
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	9a 83       	std	Y+2, r25	; 0x02
    46e6:	ab 83       	std	Y+3, r26	; 0x03
    46e8:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	ab 81       	ldd	r26, Y+3	; 0x03
    46f0:	bc 81       	ldd	r27, Y+4	; 0x04
    46f2:	88 38       	cpi	r24, 0x88	; 136
    46f4:	23 e1       	ldi	r18, 0x13	; 19
    46f6:	92 07       	cpc	r25, r18
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	a2 07       	cpc	r26, r18
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	b2 07       	cpc	r27, r18
    4700:	61 f0       	breq	.+24     	; 0x471a <MUART_voidSendByteSyncNonBlocking+0xd0>
	{
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
    4702:	eb e2       	ldi	r30, 0x2B	; 43
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	82 95       	swap	r24
    470a:	86 95       	lsr	r24
    470c:	87 70       	andi	r24, 0x07	; 7
    470e:	88 2f       	mov	r24, r24
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	81 70       	andi	r24, 0x01	; 1
    4714:	90 70       	andi	r25, 0x00	; 0
    4716:	00 97       	sbiw	r24, 0x00	; 0
    4718:	e9 f2       	breq	.-70     	; 0x46d4 <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    471a:	ab e2       	ldi	r26, 0x2B	; 43
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	eb e2       	ldi	r30, 0x2B	; 43
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	80 81       	ld	r24, Z
    4724:	80 64       	ori	r24, 0x40	; 64
    4726:	8c 93       	st	X, r24
	}

}
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <MUART_voidSendStringSyncNonBlocking>:


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    4738:	df 93       	push	r29
    473a:	cf 93       	push	r28
    473c:	00 d0       	rcall	.+0      	; 0x473e <MUART_voidSendStringSyncNonBlocking+0x6>
    473e:	cd b7       	in	r28, 0x3d	; 61
    4740:	de b7       	in	r29, 0x3e	; 62
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	0b c0       	rjmp	.+22     	; 0x475e <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    4748:	e9 81       	ldd	r30, Y+1	; 0x01
    474a:	fa 81       	ldd	r31, Y+2	; 0x02
    474c:	20 81       	ld	r18, Z
    474e:	89 81       	ldd	r24, Y+1	; 0x01
    4750:	9a 81       	ldd	r25, Y+2	; 0x02
    4752:	01 96       	adiw	r24, 0x01	; 1
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01
    4758:	82 2f       	mov	r24, r18
    475a:	0e 94 25 23 	call	0x464a	; 0x464a <MUART_voidSendByteSyncNonBlocking>
}


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while(*A_pu8String > 0)
    475e:	e9 81       	ldd	r30, Y+1	; 0x01
    4760:	fa 81       	ldd	r31, Y+2	; 0x02
    4762:	80 81       	ld	r24, Z
    4764:	88 23       	and	r24, r24
    4766:	81 f7       	brne	.-32     	; 0x4748 <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
    476c:	cf 91       	pop	r28
    476e:	df 91       	pop	r29
    4770:	08 95       	ret

00004772 <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    4772:	df 93       	push	r29
    4774:	cf 93       	push	r28
    4776:	0f 92       	push	r0
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	89 83       	std	Y+1, r24	; 0x01
	// Check if Data Register is empty
	if (GET_BIT(UCSRA,5)==1)
    477e:	eb e2       	ldi	r30, 0x2B	; 43
    4780:	f0 e0       	ldi	r31, 0x00	; 0
    4782:	80 81       	ld	r24, Z
    4784:	82 95       	swap	r24
    4786:	86 95       	lsr	r24
    4788:	87 70       	andi	r24, 0x07	; 7
    478a:	88 2f       	mov	r24, r24
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	81 70       	andi	r24, 0x01	; 1
    4790:	90 70       	andi	r25, 0x00	; 0
    4792:	88 23       	and	r24, r24
    4794:	21 f0       	breq	.+8      	; 0x479e <MUART_voidSendByteAsync+0x2c>
	{
		// Send Data
		UDR = A_u8DataByte;
    4796:	ec e2       	ldi	r30, 0x2C	; 44
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	89 81       	ldd	r24, Y+1	; 0x01
    479c:	80 83       	st	Z, r24
	}
}
    479e:	0f 90       	pop	r0
    47a0:	cf 91       	pop	r28
    47a2:	df 91       	pop	r29
    47a4:	08 95       	ret

000047a6 <MUART_voidReceiveStringSync>:
void MUART_voidReceiveStringSync(u8 * Copy_u8ReceiveData){
    47a6:	df 93       	push	r29
    47a8:	cf 93       	push	r28
    47aa:	00 d0       	rcall	.+0      	; 0x47ac <MUART_voidReceiveStringSync+0x6>
    47ac:	00 d0       	rcall	.+0      	; 0x47ae <MUART_voidReceiveStringSync+0x8>
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
    47b2:	9c 83       	std	Y+4, r25	; 0x04
    47b4:	8b 83       	std	Y+3, r24	; 0x03
	u8 counter =0;
    47b6:	19 82       	std	Y+1, r1	; 0x01
	volatile u8 recChar;
	recChar =  MUART_u8ReadByteSyncBlocking();
    47b8:	0e 94 01 24 	call	0x4802	; 0x4802 <MUART_u8ReadByteSyncBlocking>
    47bc:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8ReceiveData != NULL){
    47be:	8b 81       	ldd	r24, Y+3	; 0x03
    47c0:	9c 81       	ldd	r25, Y+4	; 0x04
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	b9 f0       	breq	.+46     	; 0x47f4 <MUART_voidReceiveStringSync+0x4e>
    47c6:	13 c0       	rjmp	.+38     	; 0x47ee <MUART_voidReceiveStringSync+0x48>
		while(recChar !=13){
			MUART_voidSendByteAsync(recChar);
    47c8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ca:	0e 94 b9 23 	call	0x4772	; 0x4772 <MUART_voidSendByteAsync>
			//read data
			Copy_u8ReceiveData[counter]= recChar;
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	28 2f       	mov	r18, r24
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	8b 81       	ldd	r24, Y+3	; 0x03
    47d6:	9c 81       	ldd	r25, Y+4	; 0x04
    47d8:	fc 01       	movw	r30, r24
    47da:	e2 0f       	add	r30, r18
    47dc:	f3 1f       	adc	r31, r19
    47de:	8a 81       	ldd	r24, Y+2	; 0x02
    47e0:	80 83       	st	Z, r24
			counter ++ ;
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	8f 5f       	subi	r24, 0xFF	; 255
    47e6:	89 83       	std	Y+1, r24	; 0x01
			recChar =  MUART_u8ReadByteSyncBlocking();
    47e8:	0e 94 01 24 	call	0x4802	; 0x4802 <MUART_u8ReadByteSyncBlocking>
    47ec:	8a 83       	std	Y+2, r24	; 0x02
void MUART_voidReceiveStringSync(u8 * Copy_u8ReceiveData){
	u8 counter =0;
	volatile u8 recChar;
	recChar =  MUART_u8ReadByteSyncBlocking();
	if(Copy_u8ReceiveData != NULL){
		while(recChar !=13){
    47ee:	8a 81       	ldd	r24, Y+2	; 0x02
    47f0:	8d 30       	cpi	r24, 0x0D	; 13
    47f2:	51 f7       	brne	.-44     	; 0x47c8 <MUART_voidReceiveStringSync+0x22>
			counter ++ ;
			recChar =  MUART_u8ReadByteSyncBlocking();

		}
	}
}
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	0f 90       	pop	r0
    47fa:	0f 90       	pop	r0
    47fc:	cf 91       	pop	r28
    47fe:	df 91       	pop	r29
    4800:	08 95       	ret

00004802 <MUART_u8ReadByteSyncBlocking>:

u8 MUART_u8ReadByteSyncBlocking (void)
{
    4802:	df 93       	push	r29
    4804:	cf 93       	push	r28
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62

	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0);
    480a:	eb e2       	ldi	r30, 0x2B	; 43
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	88 23       	and	r24, r24
    4812:	dc f7       	brge	.-10     	; 0x480a <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    4814:	ec e2       	ldi	r30, 0x2C	; 44
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	80 81       	ld	r24, Z
}
    481a:	cf 91       	pop	r28
    481c:	df 91       	pop	r29
    481e:	08 95       	ret

00004820 <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    4820:	df 93       	push	r29
    4822:	cf 93       	push	r28
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    4828:	ec e2       	ldi	r30, 0x2C	; 44
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	80 81       	ld	r24, Z
}
    482e:	cf 91       	pop	r28
    4830:	df 91       	pop	r29
    4832:	08 95       	ret

00004834 <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    4834:	df 93       	push	r29
    4836:	cf 93       	push	r28
    4838:	00 d0       	rcall	.+0      	; 0x483a <MUART_u8ReadByteSyncNonBlocking+0x6>
    483a:	0f 92       	push	r0
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    4840:	8f ef       	ldi	r24, 0xFF	; 255
    4842:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16Timeout = 0;
    4844:	1a 82       	std	Y+2, r1	; 0x02
    4846:	19 82       	std	Y+1, r1	; 0x01
    4848:	0b c0       	rjmp	.+22     	; 0x4860 <MUART_u8ReadByteSyncNonBlocking+0x2c>
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
	{
		local_u16Timeout++;
    484a:	89 81       	ldd	r24, Y+1	; 0x01
    484c:	9a 81       	ldd	r25, Y+2	; 0x02
    484e:	01 96       	adiw	r24, 0x01	; 1
    4850:	9a 83       	std	Y+2, r25	; 0x02
    4852:	89 83       	std	Y+1, r24	; 0x01
		if (local_u16Timeout == NON_BLOCKING_TIME_OUT)
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	9a 81       	ldd	r25, Y+2	; 0x02
    4858:	23 e1       	ldi	r18, 0x13	; 19
    485a:	88 38       	cpi	r24, 0x88	; 136
    485c:	92 07       	cpc	r25, r18
    485e:	29 f0       	breq	.+10     	; 0x486a <MUART_u8ReadByteSyncNonBlocking+0x36>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u16 local_u16Timeout = 0;
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
    4860:	eb e2       	ldi	r30, 0x2B	; 43
    4862:	f0 e0       	ldi	r31, 0x00	; 0
    4864:	80 81       	ld	r24, Z
    4866:	88 23       	and	r24, r24
    4868:	84 f7       	brge	.-32     	; 0x484a <MUART_u8ReadByteSyncNonBlocking+0x16>
		{
			break;
		}
	}

	if (local_u16Timeout != NON_BLOCKING_TIME_OUT)
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	23 e1       	ldi	r18, 0x13	; 19
    4870:	88 38       	cpi	r24, 0x88	; 136
    4872:	92 07       	cpc	r25, r18
    4874:	21 f0       	breq	.+8      	; 0x487e <MUART_u8ReadByteSyncNonBlocking+0x4a>
	{
		// Read Received Data from the UDR
		local_u8ReceivedData = UDR;
    4876:	ec e2       	ldi	r30, 0x2C	; 44
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_u8ReceivedData;
    487e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	cf 91       	pop	r28
    4888:	df 91       	pop	r29
    488a:	08 95       	ret

0000488c <MUART_VoidSendNumber>:


void MUART_VoidSendNumber(u32 Copy_u32Data)
{
    488c:	df 93       	push	r29
    488e:	cf 93       	push	r28
    4890:	cd b7       	in	r28, 0x3d	; 61
    4892:	de b7       	in	r29, 0x3e	; 62
    4894:	2b 97       	sbiw	r28, 0x0b	; 11
    4896:	0f b6       	in	r0, 0x3f	; 63
    4898:	f8 94       	cli
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	0f be       	out	0x3f, r0	; 63
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	68 87       	std	Y+8, r22	; 0x08
    48a2:	79 87       	std	Y+9, r23	; 0x09
    48a4:	8a 87       	std	Y+10, r24	; 0x0a
    48a6:	9b 87       	std	Y+11, r25	; 0x0b
	/*Loop counter for the two Loops*/
	u8 Local_u8LoopCounter = 0;
    48a8:	1f 82       	std	Y+7, r1	; 0x07
	/*Extract single number in that variable*/
	u8 Local_u8SingleNumber = 0;
    48aa:	1e 82       	std	Y+6, r1	; 0x06
	/*Store number of Zeros at the end */
	u8 Local_Copy_u8DigitNumbers = 0;
    48ac:	1d 82       	std	Y+5, r1	; 0x05
	/*Store the reversed number*/
	u32 Local_Copy_u32DataReversed = 1;
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	89 83       	std	Y+1, r24	; 0x01
    48b8:	9a 83       	std	Y+2, r25	; 0x02
    48ba:	ab 83       	std	Y+3, r26	; 0x03
    48bc:	bc 83       	std	Y+4, r27	; 0x04

	if(Copy_u32Data != 0)
    48be:	88 85       	ldd	r24, Y+8	; 0x08
    48c0:	99 85       	ldd	r25, Y+9	; 0x09
    48c2:	aa 85       	ldd	r26, Y+10	; 0x0a
    48c4:	bb 85       	ldd	r27, Y+11	; 0x0b
    48c6:	00 97       	sbiw	r24, 0x00	; 0
    48c8:	a1 05       	cpc	r26, r1
    48ca:	b1 05       	cpc	r27, r1
    48cc:	09 f4       	brne	.+2      	; 0x48d0 <MUART_VoidSendNumber+0x44>
    48ce:	7b c0       	rjmp	.+246    	; 0x49c6 <MUART_VoidSendNumber+0x13a>
    48d0:	42 c0       	rjmp	.+132    	; 0x4956 <MUART_VoidSendNumber+0xca>
	{
		while(Copy_u32Data != 0)
		{
			/*Extract Last single number from the whole number*/
			Local_u8SingleNumber = Copy_u32Data % 10;
    48d2:	88 85       	ldd	r24, Y+8	; 0x08
    48d4:	99 85       	ldd	r25, Y+9	; 0x09
    48d6:	aa 85       	ldd	r26, Y+10	; 0x0a
    48d8:	bb 85       	ldd	r27, Y+11	; 0x0b
    48da:	2a e0       	ldi	r18, 0x0A	; 10
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	40 e0       	ldi	r20, 0x00	; 0
    48e0:	50 e0       	ldi	r21, 0x00	; 0
    48e2:	bc 01       	movw	r22, r24
    48e4:	cd 01       	movw	r24, r26
    48e6:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	8e 83       	std	Y+6, r24	; 0x06
			/*storing the number reversed*/
			Local_Copy_u32DataReversed = (Local_Copy_u32DataReversed*10) + (Local_u8SingleNumber);
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	9a 81       	ldd	r25, Y+2	; 0x02
    48f4:	ab 81       	ldd	r26, Y+3	; 0x03
    48f6:	bc 81       	ldd	r27, Y+4	; 0x04
    48f8:	2a e0       	ldi	r18, 0x0A	; 10
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e0       	ldi	r20, 0x00	; 0
    48fe:	50 e0       	ldi	r21, 0x00	; 0
    4900:	bc 01       	movw	r22, r24
    4902:	cd 01       	movw	r24, r26
    4904:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    4908:	9b 01       	movw	r18, r22
    490a:	ac 01       	movw	r20, r24
    490c:	8e 81       	ldd	r24, Y+6	; 0x06
    490e:	88 2f       	mov	r24, r24
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	a0 e0       	ldi	r26, 0x00	; 0
    4914:	b0 e0       	ldi	r27, 0x00	; 0
    4916:	82 0f       	add	r24, r18
    4918:	93 1f       	adc	r25, r19
    491a:	a4 1f       	adc	r26, r20
    491c:	b5 1f       	adc	r27, r21
    491e:	89 83       	std	Y+1, r24	; 0x01
    4920:	9a 83       	std	Y+2, r25	; 0x02
    4922:	ab 83       	std	Y+3, r26	; 0x03
    4924:	bc 83       	std	Y+4, r27	; 0x04
			/*Delete the extracted number from the whole number*/
			Copy_u32Data /= 10;
    4926:	88 85       	ldd	r24, Y+8	; 0x08
    4928:	99 85       	ldd	r25, Y+9	; 0x09
    492a:	aa 85       	ldd	r26, Y+10	; 0x0a
    492c:	bb 85       	ldd	r27, Y+11	; 0x0b
    492e:	2a e0       	ldi	r18, 0x0A	; 10
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e0       	ldi	r20, 0x00	; 0
    4934:	50 e0       	ldi	r21, 0x00	; 0
    4936:	bc 01       	movw	r22, r24
    4938:	cd 01       	movw	r24, r26
    493a:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    493e:	da 01       	movw	r26, r20
    4940:	c9 01       	movw	r24, r18
    4942:	88 87       	std	Y+8, r24	; 0x08
    4944:	99 87       	std	Y+9, r25	; 0x09
    4946:	aa 87       	std	Y+10, r26	; 0x0a
    4948:	bb 87       	std	Y+11, r27	; 0x0b
			/*Increment the Loop counter*/
			Local_u8LoopCounter++;
    494a:	8f 81       	ldd	r24, Y+7	; 0x07
    494c:	8f 5f       	subi	r24, 0xFF	; 255
    494e:	8f 83       	std	Y+7, r24	; 0x07
			/*Counting the digit numbers*/
			Local_Copy_u8DigitNumbers++;
    4950:	8d 81       	ldd	r24, Y+5	; 0x05
    4952:	8f 5f       	subi	r24, 0xFF	; 255
    4954:	8d 83       	std	Y+5, r24	; 0x05
	/*Store the reversed number*/
	u32 Local_Copy_u32DataReversed = 1;

	if(Copy_u32Data != 0)
	{
		while(Copy_u32Data != 0)
    4956:	88 85       	ldd	r24, Y+8	; 0x08
    4958:	99 85       	ldd	r25, Y+9	; 0x09
    495a:	aa 85       	ldd	r26, Y+10	; 0x0a
    495c:	bb 85       	ldd	r27, Y+11	; 0x0b
    495e:	00 97       	sbiw	r24, 0x00	; 0
    4960:	a1 05       	cpc	r26, r1
    4962:	b1 05       	cpc	r27, r1
    4964:	09 f0       	breq	.+2      	; 0x4968 <MUART_VoidSendNumber+0xdc>
    4966:	b5 cf       	rjmp	.-150    	; 0x48d2 <MUART_VoidSendNumber+0x46>
			Local_u8LoopCounter++;
			/*Counting the digit numbers*/
			Local_Copy_u8DigitNumbers++;
		}

		for(Local_u8LoopCounter = 0; Local_u8LoopCounter < Local_Copy_u8DigitNumbers; Local_u8LoopCounter++)
    4968:	1f 82       	std	Y+7, r1	; 0x07
    496a:	28 c0       	rjmp	.+80     	; 0x49bc <MUART_VoidSendNumber+0x130>
		{
			/*Extract Last single number from the whole number*/
			Local_u8SingleNumber = Local_Copy_u32DataReversed % 10;
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	9a 81       	ldd	r25, Y+2	; 0x02
    4970:	ab 81       	ldd	r26, Y+3	; 0x03
    4972:	bc 81       	ldd	r27, Y+4	; 0x04
    4974:	2a e0       	ldi	r18, 0x0A	; 10
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e0       	ldi	r20, 0x00	; 0
    497a:	50 e0       	ldi	r21, 0x00	; 0
    497c:	bc 01       	movw	r22, r24
    497e:	cd 01       	movw	r24, r26
    4980:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	8e 83       	std	Y+6, r24	; 0x06
			/*Delete the extracted number from the whole number*/
			Local_Copy_u32DataReversed /= 10;
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	9a 81       	ldd	r25, Y+2	; 0x02
    498e:	ab 81       	ldd	r26, Y+3	; 0x03
    4990:	bc 81       	ldd	r27, Y+4	; 0x04
    4992:	2a e0       	ldi	r18, 0x0A	; 10
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	40 e0       	ldi	r20, 0x00	; 0
    4998:	50 e0       	ldi	r21, 0x00	; 0
    499a:	bc 01       	movw	r22, r24
    499c:	cd 01       	movw	r24, r26
    499e:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodsi4>
    49a2:	da 01       	movw	r26, r20
    49a4:	c9 01       	movw	r24, r18
    49a6:	89 83       	std	Y+1, r24	; 0x01
    49a8:	9a 83       	std	Y+2, r25	; 0x02
    49aa:	ab 83       	std	Y+3, r26	; 0x03
    49ac:	bc 83       	std	Y+4, r27	; 0x04
			/*Sending the extracted single number Asci code from the Asci array to the LCD */
			 MUART_voidSendByteAsync('0' + Local_u8SingleNumber);
    49ae:	8e 81       	ldd	r24, Y+6	; 0x06
    49b0:	80 5d       	subi	r24, 0xD0	; 208
    49b2:	0e 94 b9 23 	call	0x4772	; 0x4772 <MUART_voidSendByteAsync>
			Local_u8LoopCounter++;
			/*Counting the digit numbers*/
			Local_Copy_u8DigitNumbers++;
		}

		for(Local_u8LoopCounter = 0; Local_u8LoopCounter < Local_Copy_u8DigitNumbers; Local_u8LoopCounter++)
    49b6:	8f 81       	ldd	r24, Y+7	; 0x07
    49b8:	8f 5f       	subi	r24, 0xFF	; 255
    49ba:	8f 83       	std	Y+7, r24	; 0x07
    49bc:	9f 81       	ldd	r25, Y+7	; 0x07
    49be:	8d 81       	ldd	r24, Y+5	; 0x05
    49c0:	98 17       	cp	r25, r24
    49c2:	a0 f2       	brcs	.-88     	; 0x496c <MUART_VoidSendNumber+0xe0>
    49c4:	03 c0       	rjmp	.+6      	; 0x49cc <MUART_VoidSendNumber+0x140>
		}
	}
	else
	{
		/*Sending Char Zero*/
		 MUART_voidSendByteAsync('0');
    49c6:	80 e3       	ldi	r24, 0x30	; 48
    49c8:	0e 94 b9 23 	call	0x4772	; 0x4772 <MUART_voidSendByteAsync>
	}
}
    49cc:	2b 96       	adiw	r28, 0x0b	; 11
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <MUART_voidSetCallBack>:



void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    49de:	df 93       	push	r29
    49e0:	cf 93       	push	r28
    49e2:	00 d0       	rcall	.+0      	; 0x49e4 <MUART_voidSetCallBack+0x6>
    49e4:	0f 92       	push	r0
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
    49ea:	89 83       	std	Y+1, r24	; 0x01
    49ec:	7b 83       	std	Y+3, r23	; 0x03
    49ee:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    49f0:	89 81       	ldd	r24, Y+1	; 0x01
    49f2:	83 30       	cpi	r24, 0x03	; 3
    49f4:	80 f4       	brcc	.+32     	; 0x4a16 <MUART_voidSetCallBack+0x38>
    49f6:	8a 81       	ldd	r24, Y+2	; 0x02
    49f8:	9b 81       	ldd	r25, Y+3	; 0x03
    49fa:	00 97       	sbiw	r24, 0x00	; 0
    49fc:	61 f0       	breq	.+24     	; 0x4a16 <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	88 2f       	mov	r24, r24
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	88 0f       	add	r24, r24
    4a06:	99 1f       	adc	r25, r25
    4a08:	fc 01       	movw	r30, r24
    4a0a:	ee 50       	subi	r30, 0x0E	; 14
    4a0c:	fb 4f       	sbci	r31, 0xFB	; 251
    4a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a10:	9b 81       	ldd	r25, Y+3	; 0x03
    4a12:	91 83       	std	Z+1, r25	; 0x01
    4a14:	80 83       	st	Z, r24
	}
}
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	0f 90       	pop	r0
    4a1c:	cf 91       	pop	r28
    4a1e:	df 91       	pop	r29
    4a20:	08 95       	ret

00004a22 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    4a22:	1f 92       	push	r1
    4a24:	0f 92       	push	r0
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	0f 92       	push	r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	2f 93       	push	r18
    4a2e:	3f 93       	push	r19
    4a30:	4f 93       	push	r20
    4a32:	5f 93       	push	r21
    4a34:	6f 93       	push	r22
    4a36:	7f 93       	push	r23
    4a38:	8f 93       	push	r24
    4a3a:	9f 93       	push	r25
    4a3c:	af 93       	push	r26
    4a3e:	bf 93       	push	r27
    4a40:	ef 93       	push	r30
    4a42:	ff 93       	push	r31
    4a44:	df 93       	push	r29
    4a46:	cf 93       	push	r28
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    4a4c:	80 91 f2 04 	lds	r24, 0x04F2
    4a50:	90 91 f3 04 	lds	r25, 0x04F3
    4a54:	00 97       	sbiw	r24, 0x00	; 0
    4a56:	29 f0       	breq	.+10     	; 0x4a62 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    4a58:	e0 91 f2 04 	lds	r30, 0x04F2
    4a5c:	f0 91 f3 04 	lds	r31, 0x04F3
    4a60:	09 95       	icall
	}
}
    4a62:	cf 91       	pop	r28
    4a64:	df 91       	pop	r29
    4a66:	ff 91       	pop	r31
    4a68:	ef 91       	pop	r30
    4a6a:	bf 91       	pop	r27
    4a6c:	af 91       	pop	r26
    4a6e:	9f 91       	pop	r25
    4a70:	8f 91       	pop	r24
    4a72:	7f 91       	pop	r23
    4a74:	6f 91       	pop	r22
    4a76:	5f 91       	pop	r21
    4a78:	4f 91       	pop	r20
    4a7a:	3f 91       	pop	r19
    4a7c:	2f 91       	pop	r18
    4a7e:	0f 90       	pop	r0
    4a80:	0f be       	out	0x3f, r0	; 63
    4a82:	0f 90       	pop	r0
    4a84:	1f 90       	pop	r1
    4a86:	18 95       	reti

00004a88 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    4a88:	1f 92       	push	r1
    4a8a:	0f 92       	push	r0
    4a8c:	0f b6       	in	r0, 0x3f	; 63
    4a8e:	0f 92       	push	r0
    4a90:	11 24       	eor	r1, r1
    4a92:	2f 93       	push	r18
    4a94:	3f 93       	push	r19
    4a96:	4f 93       	push	r20
    4a98:	5f 93       	push	r21
    4a9a:	6f 93       	push	r22
    4a9c:	7f 93       	push	r23
    4a9e:	8f 93       	push	r24
    4aa0:	9f 93       	push	r25
    4aa2:	af 93       	push	r26
    4aa4:	bf 93       	push	r27
    4aa6:	ef 93       	push	r30
    4aa8:	ff 93       	push	r31
    4aaa:	df 93       	push	r29
    4aac:	cf 93       	push	r28
    4aae:	cd b7       	in	r28, 0x3d	; 61
    4ab0:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    4ab2:	80 91 f4 04 	lds	r24, 0x04F4
    4ab6:	90 91 f5 04 	lds	r25, 0x04F5
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	29 f0       	breq	.+10     	; 0x4ac8 <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    4abe:	e0 91 f4 04 	lds	r30, 0x04F4
    4ac2:	f0 91 f5 04 	lds	r31, 0x04F5
    4ac6:	09 95       	icall
	}
}
    4ac8:	cf 91       	pop	r28
    4aca:	df 91       	pop	r29
    4acc:	ff 91       	pop	r31
    4ace:	ef 91       	pop	r30
    4ad0:	bf 91       	pop	r27
    4ad2:	af 91       	pop	r26
    4ad4:	9f 91       	pop	r25
    4ad6:	8f 91       	pop	r24
    4ad8:	7f 91       	pop	r23
    4ada:	6f 91       	pop	r22
    4adc:	5f 91       	pop	r21
    4ade:	4f 91       	pop	r20
    4ae0:	3f 91       	pop	r19
    4ae2:	2f 91       	pop	r18
    4ae4:	0f 90       	pop	r0
    4ae6:	0f be       	out	0x3f, r0	; 63
    4ae8:	0f 90       	pop	r0
    4aea:	1f 90       	pop	r1
    4aec:	18 95       	reti

00004aee <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    4aee:	1f 92       	push	r1
    4af0:	0f 92       	push	r0
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	0f 92       	push	r0
    4af6:	11 24       	eor	r1, r1
    4af8:	2f 93       	push	r18
    4afa:	3f 93       	push	r19
    4afc:	4f 93       	push	r20
    4afe:	5f 93       	push	r21
    4b00:	6f 93       	push	r22
    4b02:	7f 93       	push	r23
    4b04:	8f 93       	push	r24
    4b06:	9f 93       	push	r25
    4b08:	af 93       	push	r26
    4b0a:	bf 93       	push	r27
    4b0c:	ef 93       	push	r30
    4b0e:	ff 93       	push	r31
    4b10:	df 93       	push	r29
    4b12:	cf 93       	push	r28
    4b14:	cd b7       	in	r28, 0x3d	; 61
    4b16:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    4b18:	80 91 f6 04 	lds	r24, 0x04F6
    4b1c:	90 91 f7 04 	lds	r25, 0x04F7
    4b20:	00 97       	sbiw	r24, 0x00	; 0
    4b22:	29 f0       	breq	.+10     	; 0x4b2e <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    4b24:	e0 91 f6 04 	lds	r30, 0x04F6
    4b28:	f0 91 f7 04 	lds	r31, 0x04F7
    4b2c:	09 95       	icall
	}
}
    4b2e:	cf 91       	pop	r28
    4b30:	df 91       	pop	r29
    4b32:	ff 91       	pop	r31
    4b34:	ef 91       	pop	r30
    4b36:	bf 91       	pop	r27
    4b38:	af 91       	pop	r26
    4b3a:	9f 91       	pop	r25
    4b3c:	8f 91       	pop	r24
    4b3e:	7f 91       	pop	r23
    4b40:	6f 91       	pop	r22
    4b42:	5f 91       	pop	r21
    4b44:	4f 91       	pop	r20
    4b46:	3f 91       	pop	r19
    4b48:	2f 91       	pop	r18
    4b4a:	0f 90       	pop	r0
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	0f 90       	pop	r0
    4b50:	1f 90       	pop	r1
    4b52:	18 95       	reti

00004b54 <__mulsi3>:
    4b54:	62 9f       	mul	r22, r18
    4b56:	d0 01       	movw	r26, r0
    4b58:	73 9f       	mul	r23, r19
    4b5a:	f0 01       	movw	r30, r0
    4b5c:	82 9f       	mul	r24, r18
    4b5e:	e0 0d       	add	r30, r0
    4b60:	f1 1d       	adc	r31, r1
    4b62:	64 9f       	mul	r22, r20
    4b64:	e0 0d       	add	r30, r0
    4b66:	f1 1d       	adc	r31, r1
    4b68:	92 9f       	mul	r25, r18
    4b6a:	f0 0d       	add	r31, r0
    4b6c:	83 9f       	mul	r24, r19
    4b6e:	f0 0d       	add	r31, r0
    4b70:	74 9f       	mul	r23, r20
    4b72:	f0 0d       	add	r31, r0
    4b74:	65 9f       	mul	r22, r21
    4b76:	f0 0d       	add	r31, r0
    4b78:	99 27       	eor	r25, r25
    4b7a:	72 9f       	mul	r23, r18
    4b7c:	b0 0d       	add	r27, r0
    4b7e:	e1 1d       	adc	r30, r1
    4b80:	f9 1f       	adc	r31, r25
    4b82:	63 9f       	mul	r22, r19
    4b84:	b0 0d       	add	r27, r0
    4b86:	e1 1d       	adc	r30, r1
    4b88:	f9 1f       	adc	r31, r25
    4b8a:	bd 01       	movw	r22, r26
    4b8c:	cf 01       	movw	r24, r30
    4b8e:	11 24       	eor	r1, r1
    4b90:	08 95       	ret

00004b92 <__udivmodsi4>:
    4b92:	a1 e2       	ldi	r26, 0x21	; 33
    4b94:	1a 2e       	mov	r1, r26
    4b96:	aa 1b       	sub	r26, r26
    4b98:	bb 1b       	sub	r27, r27
    4b9a:	fd 01       	movw	r30, r26
    4b9c:	0d c0       	rjmp	.+26     	; 0x4bb8 <__udivmodsi4_ep>

00004b9e <__udivmodsi4_loop>:
    4b9e:	aa 1f       	adc	r26, r26
    4ba0:	bb 1f       	adc	r27, r27
    4ba2:	ee 1f       	adc	r30, r30
    4ba4:	ff 1f       	adc	r31, r31
    4ba6:	a2 17       	cp	r26, r18
    4ba8:	b3 07       	cpc	r27, r19
    4baa:	e4 07       	cpc	r30, r20
    4bac:	f5 07       	cpc	r31, r21
    4bae:	20 f0       	brcs	.+8      	; 0x4bb8 <__udivmodsi4_ep>
    4bb0:	a2 1b       	sub	r26, r18
    4bb2:	b3 0b       	sbc	r27, r19
    4bb4:	e4 0b       	sbc	r30, r20
    4bb6:	f5 0b       	sbc	r31, r21

00004bb8 <__udivmodsi4_ep>:
    4bb8:	66 1f       	adc	r22, r22
    4bba:	77 1f       	adc	r23, r23
    4bbc:	88 1f       	adc	r24, r24
    4bbe:	99 1f       	adc	r25, r25
    4bc0:	1a 94       	dec	r1
    4bc2:	69 f7       	brne	.-38     	; 0x4b9e <__udivmodsi4_loop>
    4bc4:	60 95       	com	r22
    4bc6:	70 95       	com	r23
    4bc8:	80 95       	com	r24
    4bca:	90 95       	com	r25
    4bcc:	9b 01       	movw	r18, r22
    4bce:	ac 01       	movw	r20, r24
    4bd0:	bd 01       	movw	r22, r26
    4bd2:	cf 01       	movw	r24, r30
    4bd4:	08 95       	ret

00004bd6 <__prologue_saves__>:
    4bd6:	2f 92       	push	r2
    4bd8:	3f 92       	push	r3
    4bda:	4f 92       	push	r4
    4bdc:	5f 92       	push	r5
    4bde:	6f 92       	push	r6
    4be0:	7f 92       	push	r7
    4be2:	8f 92       	push	r8
    4be4:	9f 92       	push	r9
    4be6:	af 92       	push	r10
    4be8:	bf 92       	push	r11
    4bea:	cf 92       	push	r12
    4bec:	df 92       	push	r13
    4bee:	ef 92       	push	r14
    4bf0:	ff 92       	push	r15
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	ca 1b       	sub	r28, r26
    4c00:	db 0b       	sbc	r29, r27
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	f8 94       	cli
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	cd bf       	out	0x3d, r28	; 61
    4c0c:	09 94       	ijmp

00004c0e <__epilogue_restores__>:
    4c0e:	2a 88       	ldd	r2, Y+18	; 0x12
    4c10:	39 88       	ldd	r3, Y+17	; 0x11
    4c12:	48 88       	ldd	r4, Y+16	; 0x10
    4c14:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c16:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c18:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c20:	b9 84       	ldd	r11, Y+9	; 0x09
    4c22:	c8 84       	ldd	r12, Y+8	; 0x08
    4c24:	df 80       	ldd	r13, Y+7	; 0x07
    4c26:	ee 80       	ldd	r14, Y+6	; 0x06
    4c28:	fd 80       	ldd	r15, Y+5	; 0x05
    4c2a:	0c 81       	ldd	r16, Y+4	; 0x04
    4c2c:	1b 81       	ldd	r17, Y+3	; 0x03
    4c2e:	aa 81       	ldd	r26, Y+2	; 0x02
    4c30:	b9 81       	ldd	r27, Y+1	; 0x01
    4c32:	ce 0f       	add	r28, r30
    4c34:	d1 1d       	adc	r29, r1
    4c36:	0f b6       	in	r0, 0x3f	; 63
    4c38:	f8 94       	cli
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	cd bf       	out	0x3d, r28	; 61
    4c40:	ed 01       	movw	r28, r26
    4c42:	08 95       	ret

00004c44 <strcmp>:
    4c44:	fb 01       	movw	r30, r22
    4c46:	dc 01       	movw	r26, r24
    4c48:	8d 91       	ld	r24, X+
    4c4a:	01 90       	ld	r0, Z+
    4c4c:	80 19       	sub	r24, r0
    4c4e:	01 10       	cpse	r0, r1
    4c50:	d9 f3       	breq	.-10     	; 0x4c48 <strcmp+0x4>
    4c52:	99 0b       	sbc	r25, r25
    4c54:	08 95       	ret

00004c56 <strlen>:
    4c56:	fc 01       	movw	r30, r24
    4c58:	01 90       	ld	r0, Z+
    4c5a:	00 20       	and	r0, r0
    4c5c:	e9 f7       	brne	.-6      	; 0x4c58 <strlen+0x2>
    4c5e:	80 95       	com	r24
    4c60:	90 95       	com	r25
    4c62:	8e 0f       	add	r24, r30
    4c64:	9f 1f       	adc	r25, r31
    4c66:	08 95       	ret

00004c68 <_exit>:
    4c68:	f8 94       	cli

00004c6a <__stop_program>:
    4c6a:	ff cf       	rjmp	.-2      	; 0x4c6a <__stop_program>
